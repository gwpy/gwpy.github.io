
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/spectrogram/plot.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_spectrogram_plot.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_spectrogram_plot.py:


.. sectionauthor:: Duncan Macleod <duncan.macleod@ligo.org>
.. currentmodule:: gwpy.timeseries

Plotting a `Spectrogram`
########################

One of the most useful methods of visualising gravitational-wave data is to
use a spectrogram, highlighting the frequency-domain content of some data
over a number of time steps.

For this example we can use the public data around the |GW150914|_ detection.

.. GENERATED FROM PYTHON SOURCE LINES 34-37

First, we import the `TimeSeries` and call
:meth:`TimeSeries.fetch_open_data` the download the strain
data for the LIGO-Hanford interferometer

.. GENERATED FROM PYTHON SOURCE LINES 37-44

.. code-block:: Python

    from gwpy.timeseries import TimeSeries
    data = TimeSeries.fetch_open_data(
        "H1",
        "Sep 14 2015 09:45",
        "Sep 14 2015 09:55",
    )








.. GENERATED FROM PYTHON SOURCE LINES 45-48

Next, we can calculate a `~gwpy.spectrogram.Spectrogram` using the
:meth:`spectrogram` method of the `TimeSeries` over a 2-second stride
with a 1-second FFT and # .5-second overlap (50%):

.. GENERATED FROM PYTHON SOURCE LINES 48-50

.. code-block:: Python

    specgram = data.spectrogram(2, fftlength=1, overlap=.5) ** (1/2.)








.. GENERATED FROM PYTHON SOURCE LINES 51-58

.. note::
   :meth:`TimeSeries.spectrogram` returns a Power Spectral Density (PSD)
   `~gwpy.spectrogram.Spectrogram` by default, so we use the ``** (1/2.)``
   to convert this into a (more familiar) Amplitude Spectral Density.

Finally, we can make a plot using the
:meth:`~gwpy.spectrogram.Spectrogram.plot` method

.. GENERATED FROM PYTHON SOURCE LINES 58-66

.. code-block:: Python

    plot = specgram.imshow(norm="log", vmin=5e-24, vmax=1e-19)
    ax = plot.gca()
    ax.set_yscale("log")
    ax.set_ylim(10, 2000)
    ax.colorbar(
        label=r"Gravitational-wave amplitude [strain/$\sqrt{\mathrm{Hz}}$]")
    plot.show()




.. image-sg:: /examples/spectrogram/images/sphx_glr_plot_001.png
   :alt: plot
   :srcset: /examples/spectrogram/images/sphx_glr_plot_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 67-73

This shows the relative stability of the interferometer sensitivity over
the ten-minute span. Despite there being a gravitational-wave signal in the
data, the resolution (and dynamic range) of the spectrogram make it
impossible to see. :ref:`sphx_glr_examples_spectrogram_ratio.py`
shows how to normalise a `~gwpy.spectrogram.Spectrogram` to better
see features in the most sensitive frequency band.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.855 seconds)


.. _sphx_glr_download_examples_spectrogram_plot.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot.ipynb <plot.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot.py <plot.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot.zip <plot.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
