Search.setIndex({docurls:["api/gwpy.astro.burst_range/","api/gwpy.astro.burst_range_spectrum/","api/gwpy.astro.inspiral_range/","api/gwpy.astro.inspiral_range_psd/","api/gwpy.frequencyseries.FrequencySeries/","api/gwpy.frequencyseries.SpectralVariance/","api/gwpy.segments.DataQualityDict/","api/gwpy.segments.DataQualityFlag/","api/gwpy.segments.Segment/","api/gwpy.segments.SegmentList/","api/gwpy.segments.SegmentListDict/","api/gwpy.spectrogram.Spectrogram/","api/gwpy.table.EventTable/","api/gwpy.timeseries.StateTimeSeries/","api/gwpy.timeseries.StateVector/","api/gwpy.timeseries.StateVectorDict/","api/gwpy.timeseries.TimeSeries/","api/gwpy.timeseries.TimeSeriesDict/","api/gwpy.timeseries.TimeSeriesList/","astro/","citing/","cli/examples/coherence/","cli/examples/coherencegram/","cli/examples/spectrogram/","cli/examples/spectrogram-norm/","cli/examples/spectrum-hr/","cli/examples/spectrum-simple/","cli/examples/spectrum-three-ifo/","cli/examples/spectrum-times/","cli/examples/timeseries-filter/","cli/examples/timeseries-long/","cli/examples/timeseries-simple/","cli/","detector/channel/","dev/release/","env/","examples/frequencyseries/coherence/","examples/frequencyseries/hoff/","examples/frequencyseries/","examples/frequencyseries/inject/","examples/frequencyseries/percentiles/","examples/frequencyseries/rayleigh/","examples/frequencyseries/transfer_function/","examples/frequencyseries/variance/","examples/miscellaneous/","examples/miscellaneous/open-data-spectrogram/","examples/miscellaneous/range-spectrogram/","examples/miscellaneous/range-timeseries/","examples/segments/","examples/segments/open-data/","examples/signal/gw150914/","examples/signal/","examples/signal/qscan/","examples/spectrogram/coherence/","examples/spectrogram/","examples/spectrogram/plot/","examples/spectrogram/ratio/","examples/spectrogram/rayleigh/","examples/spectrogram/spectrogram2/","examples/table/histogram/","examples/table/","examples/table/rate/","examples/table/rate_binned/","examples/table/scatter/","examples/table/tiles/","examples/timeseries/blrms/","examples/timeseries/correlate/","examples/timeseries/filter/","examples/timeseries/","examples/timeseries/inject/","examples/timeseries/public/","examples/timeseries/pycbc-snr/","examples/timeseries/qscan/","examples/timeseries/statevector/","examples/timeseries/whiten/","external/framecpp/","external/framel/","external/lalsuite/","external/nds2/","","install/","overview/","plot/colorbars/","plot/colors/","plot/filter/","plot/gps/","plot/","plot/legend/","plot/log/","segments/dqsegdb/","segments/","segments/io/","segments/thresholding/","signal/","spectrogram/","spectrum/filtering/","spectrum/","spectrum/io/","table/filter/","table/histogram/","table/","table/io/","table/plot/","table/rate/","time/","timeseries/datafind/","timeseries/","timeseries/io/","timeseries/opendata/","timeseries/plot/","timeseries/statevector/"],envversion:{"sphinx.domains.c":2,"sphinx.domains.changeset":1,"sphinx.domains.citation":1,"sphinx.domains.cpp":5,"sphinx.domains.index":1,"sphinx.domains.javascript":2,"sphinx.domains.math":2,"sphinx.domains.python":3,"sphinx.domains.rst":2,"sphinx.domains.std":2,"sphinx.ext.intersphinx":1,"sphinx.ext.todo":2,sphinx:56},objects:{"gwpy.astro":[[0,0,1,0,"burst_range","Calculate the integrated GRB-like GW burst range from a strain PSD"],[1,0,1,0,"burst_range_spectrum","Calculate the frequency-dependent GW burst range from a strain PSD"],[2,0,1,0,"inspiral_range","Calculate the cosmology-corrected inspiral sensitive distance"],[3,0,1,0,"inspiral_range_psd","Calculate the cosmology-corrected inspiral sensitive distance PSD"]],"gwpy.detector":[[33,1,1,0,"Channel","Representation of a laser-interferometer data channel."],[33,1,1,0,"ChannelList","A list of channels, with parsing utilities."]],"gwpy.frequencyseries":[[4,1,1,0,"FrequencySeries","A data array holding some metadata to represent a frequency series"],[5,1,1,0,"SpectralVariance","A 2-dimensional array containing the variance histogram of a frequency-series FrequencySeries"]],"gwpy.frequencyseries.FrequencySeries":[[4,2,1,0,"T","View of the transposed array."],[4,3,1,0,"abs","Calculate the absolute value element-wise."],[4,3,1,0,"all","Returns True if all elements evaluate to True."],[4,3,1,0,"any","Returns True if any of the elements of a evaluate to True."],[4,3,1,0,"append","Connect another series onto the end of the current one."],[4,3,1,0,"argmax","Return indices of the maximum values along the given axis."],[4,3,1,0,"argmin","Return indices of the minimum values along the given axis."],[4,3,1,0,"argpartition","Returns the indices that would partition this array."],[4,3,1,0,"argsort","Returns the indices that would sort this array."],[4,3,1,0,"astype","Copy of the array, cast to a specified type."],[4,2,1,0,"base","Base object if memory is from some other object."],[4,3,1,0,"byteswap","Swap the bytes of the array elements"],[4,2,1,0,"cgs","Returns a copy of the current Quantity instance with CGS units. The value of the resulting object will be scaled."],[4,2,1,0,"channel","Instrumental channel associated with these data"],[4,3,1,0,"choose","Use an index array to construct a new array from a set of choices."],[4,3,1,0,"clip","Return an array whose values are limited to [min, max]. One of max or min must be given."],[4,3,1,0,"compress","Return selected slices of this array along given axis."],[4,3,1,0,"conj","Complex-conjugate all elements."],[4,3,1,0,"conjugate","Return the complex conjugate, element-wise."],[4,3,1,0,"copy","Return a copy of the array."],[4,3,1,0,"crop","Crop this series to the given x-axis extent."],[4,2,1,0,"ctypes","An object to simplify the interaction of the array with the ctypes module."],[4,3,1,0,"cumprod","Return the cumulative product of the elements along the given axis."],[4,3,1,0,"cumsum","Return the cumulative sum of the elements along the given axis."],[4,2,1,0,"data","Python buffer object pointing to the start of the array's data."],[4,3,1,0,"decompose","Generates a new Quantity with the units decomposed. Decomposed units have only irreducible units in them (see astropy.units.UnitBase.decompose)."],[4,2,1,0,"df","Frequency spacing of this FrequencySeries"],[4,3,1,0,"diagonal","Return specified diagonals. In NumPy 1.9 the returned array is a read-only view instead of a copy as in previous NumPy versions.  In a future version the read-only restriction will be removed."],[4,3,1,0,"diff","Calculate the n-th order discrete difference along given axis."],[4,3,1,0,"dot","!! processed by numpydoc !!"],[4,2,1,0,"dtype","Data-type of the array's elements."],[4,3,1,0,"dump","Not implemented, use .value.dump() instead."],[4,3,1,0,"dumps","Returns the pickle of the array as a string. pickle.loads will convert the string back to an array."],[4,2,1,0,"dx","X-axis sample separation"],[4,3,1,0,"ediff1d","!! processed by numpydoc !!"],[4,2,1,0,"epoch","GPS epoch associated with these data"],[4,2,1,0,"equivalencies","A list of equivalencies that will be applied by default during unit conversions."],[4,2,1,0,"f0","Starting frequency for this FrequencySeries"],[4,3,1,0,"fill","Fill the array with a scalar value."],[4,3,1,0,"filter","Apply a filter to this FrequencySeries."],[4,3,1,0,"filterba","!! processed by numpydoc !!"],[4,2,1,0,"flags","Information about the memory layout of the array."],[4,2,1,0,"flat","A 1-D iterator over the Quantity array."],[4,3,1,0,"flatten","Return a copy of the array collapsed into one dimension."],[4,2,1,0,"frequencies","Series of frequencies for each sample"],[4,3,1,0,"from_lal","Generate a new FrequencySeries from a LAL FrequencySeries of any type."],[4,3,1,0,"from_pycbc","Convert a pycbc.types.frequencyseries.FrequencySeries into a FrequencySeries"],[4,3,1,0,"getfield","Returns a field of the given array as a certain type."],[4,3,1,0,"ifft","Compute the one-dimensional discrete inverse Fourier transform of this FrequencySeries."],[4,2,1,0,"imag","The imaginary part of the array."],[4,2,1,0,"info","Container for meta information like name, description, format.  This is required when the object is used as a mixin column within a table, but can be used as a general way to store meta information."],[4,3,1,0,"inject","Add two compatible Series along their shared x-axis values."],[4,3,1,0,"insert","Insert values along the given axis before the given indices and return a new Quantity object."],[4,3,1,0,"interpolate","Interpolate this FrequencySeries to a new resolution."],[4,3,1,0,"is_compatible","Check whether this series and other have compatible metadata"],[4,3,1,0,"is_contiguous","Check whether other is contiguous with self."],[4,2,1,0,"isscalar","True if the value of this quantity is a scalar, or False if it is an array-like object."],[4,3,1,0,"item","Copy an element of an array to a scalar Quantity and return it."],[4,3,1,0,"itemset","Insert scalar into an array (scalar is cast to array's dtype, if possible)"],[4,2,1,0,"itemsize","Length of one array element in bytes."],[4,3,1,0,"max","Return the maximum along a given axis."],[4,3,1,0,"mean","Returns the average of the array elements along given axis."],[4,3,1,0,"median","Compute the median along the specified axis."],[4,3,1,0,"min","Return the minimum along a given axis."],[4,2,1,0,"name","Name for this data set"],[4,3,1,0,"nansum","Deprecated since version 5.3: The nansum method is deprecated and may be removed in a future version.     Use np.nansum instead."],[4,2,1,0,"nbytes","Total bytes consumed by the elements of the array."],[4,2,1,0,"ndim","Number of array dimensions."],[4,3,1,0,"newbyteorder","Return the array with the same data viewed with a different byte order."],[4,3,1,0,"nonzero","Return the indices of the elements that are non-zero."],[4,3,1,0,"override_unit","Forcefully reset the unit of these data"],[4,3,1,0,"pad","Pad this series to a new size"],[4,3,1,0,"partition","Rearranges the elements in the array in such a way that the value of the element in kth position is in the position it would be in a sorted array. All elements smaller than the kth element are moved before this element and all equal or greater are moved behind it. The ordering of the elements in the two partitions is undefined."],[4,3,1,0,"plot","Plot the data for this series"],[4,3,1,0,"prepend","Connect another series onto the start of the current one."],[4,3,1,0,"prod","Return the product of the array elements over the given axis"],[4,3,1,0,"ptp","Peak to peak (maximum - minimum) value along a given axis."],[4,3,1,0,"put","Set a.flat[n] = values[n] for all n in indices."],[4,3,1,0,"ravel","Return a flattened array."],[4,3,1,0,"read","Read data into a FrequencySeries"],[4,2,1,0,"real","The real part of the array."],[4,3,1,0,"repeat","Repeat elements of an array."],[4,3,1,0,"reshape","Returns an array containing the same data with a new shape."],[4,3,1,0,"resize","Change shape and size of array in-place."],[4,3,1,0,"round","Return a with each element rounded to the given number of decimals."],[4,3,1,0,"searchsorted","Find indices where elements of v should be inserted in a to maintain order."],[4,3,1,0,"setfield","Put a value into a specified place in a field defined by a data-type."],[4,3,1,0,"setflags","Set array flags WRITEABLE, ALIGNED, WRITEBACKIFCOPY, respectively."],[4,2,1,0,"shape","Tuple of array dimensions."],[4,3,1,0,"shift","Shift this Series forward on the X-axis by delta"],[4,2,1,0,"si","Returns a copy of the current Quantity instance with SI units. The value of the resulting object will be scaled."],[4,2,1,0,"size","Number of elements in the array."],[4,3,1,0,"sort","Sort an array in-place. Refer to numpy.sort for full documentation."],[4,3,1,0,"squeeze","Remove axes of length one from a."],[4,3,1,0,"std","Returns the standard deviation of the array elements along given axis."],[4,3,1,0,"step","Create a step plot of this series"],[4,2,1,0,"strides","Tuple of bytes to step in each dimension when traversing an array."],[4,3,1,0,"sum","Return the sum of the array elements over the given axis."],[4,3,1,0,"swapaxes","Return a view of the array with axis1 and axis2 interchanged."],[4,3,1,0,"take","Return an array formed from the elements of a at the given indices."],[4,3,1,0,"to","Return a new Quantity object with the specified unit."],[4,3,1,0,"to_lal","Convert this FrequencySeries into a LAL FrequencySeries."],[4,3,1,0,"to_pycbc","Convert this FrequencySeries into a FrequencySeries"],[4,3,1,0,"to_string","Generate a string representation of the quantity and its unit."],[4,3,1,0,"to_value","The numerical value, possibly in a different unit."],[4,3,1,0,"tobytes","Not implemented, use .value.tobytes() instead."],[4,3,1,0,"tofile","Not implemented, use .value.tofile() instead."],[4,3,1,0,"tolist","Return the array as an a.ndim-levels deep nested list of Python scalars."],[4,3,1,0,"tostring","Construct Python bytes containing the raw data bytes in the array."],[4,3,1,0,"trace","Return the sum along diagonals of the array."],[4,3,1,0,"transpose","Returns a view of the array with axes transposed."],[4,2,1,0,"unit","The physical unit of these data"],[4,3,1,0,"update","Update this series by appending new data from an other and dropping the same amount of data off the start."],[4,2,1,0,"value","The numerical value of this instance."],[4,3,1,0,"value_at","Return the value of this Series at the given xindex value"],[4,3,1,0,"var","Returns the variance of the array elements, along given axis."],[4,3,1,0,"view","New view of array with the same data."],[4,3,1,0,"write","Write this FrequencySeries to a file"],[4,2,1,0,"x0","X-axis coordinate of the first data point"],[4,2,1,0,"xindex","Positions of the data on the x-axis"],[4,2,1,0,"xspan","X-axis [low, high) segment encompassed by these data"],[4,2,1,0,"xunit","Unit of x-axis index"],[4,3,1,0,"zip","Zip the xindex and value arrays of this Series"],[4,3,1,0,"zpk","Filter this FrequencySeries by applying a zero-pole-gain filter"]],"gwpy.frequencyseries.SpectralVariance":[[5,2,1,0,"T","!! processed by numpydoc !!"],[5,3,1,0,"abs","Calculate the absolute value element-wise."],[5,3,1,0,"all","Returns True if all elements evaluate to True."],[5,3,1,0,"any","Returns True if any of the elements of a evaluate to True."],[5,3,1,0,"append","Connect another series onto the end of the current one."],[5,3,1,0,"argmax","Return indices of the maximum values along the given axis."],[5,3,1,0,"argmin","Return indices of the minimum values along the given axis."],[5,3,1,0,"argpartition","Returns the indices that would partition this array."],[5,3,1,0,"argsort","Returns the indices that would sort this array."],[5,3,1,0,"astype","Copy of the array, cast to a specified type."],[5,2,1,0,"base","Base object if memory is from some other object."],[5,2,1,0,"bins","Array of bin edges, including the rightmost edge"],[5,3,1,0,"byteswap","Swap the bytes of the array elements"],[5,2,1,0,"cgs","Returns a copy of the current Quantity instance with CGS units. The value of the resulting object will be scaled."],[5,2,1,0,"channel","Instrumental channel associated with these data"],[5,3,1,0,"choose","Use an index array to construct a new array from a set of choices."],[5,3,1,0,"clip","Return an array whose values are limited to [min, max]. One of max or min must be given."],[5,3,1,0,"compress","Return selected slices of this array along given axis."],[5,3,1,0,"conj","Complex-conjugate all elements."],[5,3,1,0,"conjugate","Return the complex conjugate, element-wise."],[5,3,1,0,"copy","Return a copy of the array."],[5,3,1,0,"crop","Crop this series to the given x-axis extent."],[5,2,1,0,"ctypes","An object to simplify the interaction of the array with the ctypes module."],[5,3,1,0,"cumprod","Return the cumulative product of the elements along the given axis."],[5,3,1,0,"cumsum","Return the cumulative sum of the elements along the given axis."],[5,2,1,0,"data","Python buffer object pointing to the start of the array's data."],[5,3,1,0,"decompose","Generates a new Quantity with the units decomposed. Decomposed units have only irreducible units in them (see astropy.units.UnitBase.decompose)."],[5,2,1,0,"df","Frequency spacing of this Spectogram"],[5,3,1,0,"diagonal","Return specified diagonals. In NumPy 1.9 the returned array is a read-only view instead of a copy as in previous NumPy versions.  In a future version the read-only restriction will be removed."],[5,3,1,0,"diff","Calculate the n-th order discrete difference along given axis."],[5,3,1,0,"dot","!! processed by numpydoc !!"],[5,2,1,0,"dtype","Data-type of the array's elements."],[5,3,1,0,"dump","Not implemented, use .value.dump() instead."],[5,3,1,0,"dumps","Returns the pickle of the array as a string. pickle.loads will convert the string back to an array."],[5,2,1,0,"dx","X-axis sample separation"],[5,2,1,0,"dy","Size of the first (lowest value) amplitude bin"],[5,3,1,0,"ediff1d","!! processed by numpydoc !!"],[5,2,1,0,"epoch","GPS epoch associated with these data"],[5,2,1,0,"equivalencies","A list of equivalencies that will be applied by default during unit conversions."],[5,2,1,0,"f0","Starting frequency for this Spectrogram"],[5,3,1,0,"fill","Fill the array with a scalar value."],[5,2,1,0,"flags","Information about the memory layout of the array."],[5,2,1,0,"flat","A 1-D iterator over the Quantity array."],[5,3,1,0,"flatten","Return a copy of the array collapsed into one dimension."],[5,2,1,0,"frequencies","Array of frequencies for each sample"],[5,3,1,0,"from_spectrogram","Calculate a new SpectralVariance from a Spectrogram"],[5,3,1,0,"getfield","Returns a field of the given array as a certain type."],[5,2,1,0,"imag","The imaginary part of the array."],[5,3,1,0,"imshow","!! processed by numpydoc !!"],[5,2,1,0,"info","Container for meta information like name, description, format.  This is required when the object is used as a mixin column within a table, but can be used as a general way to store meta information."],[5,3,1,0,"inject","Add two compatible Series along their shared x-axis values."],[5,3,1,0,"insert","Insert values along the given axis before the given indices and return a new Quantity object."],[5,3,1,0,"is_compatible","Check whether this series and other have compatible metadata"],[5,3,1,0,"is_contiguous","Check whether other is contiguous with self."],[5,2,1,0,"isscalar","True if the value of this quantity is a scalar, or False if it is an array-like object."],[5,3,1,0,"item","Copy an element of an array to a scalar Quantity and return it."],[5,3,1,0,"itemset","Insert scalar into an array (scalar is cast to array's dtype, if possible)"],[5,2,1,0,"itemsize","Length of one array element in bytes."],[5,3,1,0,"max","Return the maximum along a given axis."],[5,3,1,0,"mean","Returns the average of the array elements along given axis."],[5,3,1,0,"median","Compute the median along the specified axis."],[5,3,1,0,"min","Return the minimum along a given axis."],[5,2,1,0,"name","Name for this data set"],[5,3,1,0,"nansum","Deprecated since version 5.3: The nansum method is deprecated and may be removed in a future version.     Use np.nansum instead."],[5,2,1,0,"nbytes","Total bytes consumed by the elements of the array."],[5,2,1,0,"ndim","Number of array dimensions."],[5,3,1,0,"newbyteorder","Return the array with the same data viewed with a different byte order."],[5,3,1,0,"nonzero","Return the indices of the elements that are non-zero."],[5,3,1,0,"override_unit","Forcefully reset the unit of these data"],[5,3,1,0,"pad","Pad this series to a new size"],[5,3,1,0,"partition","Rearranges the elements in the array in such a way that the value of the element in kth position is in the position it would be in a sorted array. All elements smaller than the kth element are moved before this element and all equal or greater are moved behind it. The ordering of the elements in the two partitions is undefined."],[5,3,1,0,"pcolormesh","!! processed by numpydoc !!"],[5,3,1,0,"percentile","Calculate a given spectral percentile for this SpectralVariance"],[5,3,1,0,"plot","Plot the data for this series"],[5,3,1,0,"prepend","Connect another series onto the start of the current one."],[5,3,1,0,"prod","Return the product of the array elements over the given axis"],[5,3,1,0,"ptp","Peak to peak (maximum - minimum) value along a given axis."],[5,3,1,0,"put","Set a.flat[n] = values[n] for all n in indices."],[5,3,1,0,"ravel","Return a flattened array."],[5,3,1,0,"read","Read data into a SpectralVariance"],[5,2,1,0,"real","The real part of the array."],[5,3,1,0,"repeat","Repeat elements of an array."],[5,3,1,0,"reshape","Returns an array containing the same data with a new shape."],[5,3,1,0,"resize","Change shape and size of array in-place."],[5,3,1,0,"round","Return a with each element rounded to the given number of decimals."],[5,3,1,0,"searchsorted","Find indices where elements of v should be inserted in a to maintain order."],[5,3,1,0,"setfield","Put a value into a specified place in a field defined by a data-type."],[5,3,1,0,"setflags","Set array flags WRITEABLE, ALIGNED, WRITEBACKIFCOPY, respectively."],[5,2,1,0,"shape","Tuple of array dimensions."],[5,3,1,0,"shift","Shift this Series forward on the X-axis by delta"],[5,2,1,0,"si","Returns a copy of the current Quantity instance with SI units. The value of the resulting object will be scaled."],[5,2,1,0,"size","Number of elements in the array."],[5,3,1,0,"sort","Sort an array in-place. Refer to numpy.sort for full documentation."],[5,3,1,0,"squeeze","Remove axes of length one from a."],[5,3,1,0,"std","Returns the standard deviation of the array elements along given axis."],[5,3,1,0,"step","Create a step plot of this series"],[5,2,1,0,"strides","Tuple of bytes to step in each dimension when traversing an array."],[5,3,1,0,"sum","Return the sum of the array elements over the given axis."],[5,3,1,0,"swapaxes","Return a view of the array with axis1 and axis2 interchanged."],[5,3,1,0,"take","Return an array formed from the elements of a at the given indices."],[5,3,1,0,"to","Return a new Quantity object with the specified unit."],[5,3,1,0,"to_string","Generate a string representation of the quantity and its unit."],[5,3,1,0,"to_value","The numerical value, possibly in a different unit."],[5,3,1,0,"tobytes","Not implemented, use .value.tobytes() instead."],[5,3,1,0,"tofile","Not implemented, use .value.tofile() instead."],[5,3,1,0,"tolist","Return the array as an a.ndim-levels deep nested list of Python scalars."],[5,3,1,0,"tostring","Construct Python bytes containing the raw data bytes in the array."],[5,3,1,0,"trace","Return the sum along diagonals of the array."],[5,3,1,0,"transpose","Returns a view of the array with axes transposed."],[5,2,1,0,"unit","The physical unit of these data"],[5,3,1,0,"update","Update this series by appending new data from an other and dropping the same amount of data off the start."],[5,2,1,0,"value","The numerical value of this instance."],[5,3,1,0,"value_at","Return the value of this Series at the given (x, y) coordinates"],[5,3,1,0,"var","Returns the variance of the array elements, along given axis."],[5,3,1,0,"view","New view of array with the same data."],[5,3,1,0,"write","Write this SpectralVariance to a file"],[5,2,1,0,"x0","X-axis coordinate of the first data point"],[5,2,1,0,"xindex","Positions of the data on the x-axis"],[5,2,1,0,"xspan","X-axis [low, high) segment encompassed by these data"],[5,2,1,0,"xunit","Unit of x-axis index"],[5,2,1,0,"y0","Starting value of the first (lowert value) amplitude bin"],[5,2,1,0,"yindex","List of left-hand amplitude bin edges"],[5,2,1,0,"yspan","Amplitude range (low, high) spanned by this array"],[5,2,1,0,"yunit","Unit of Y-axis index"],[5,3,1,0,"zip","Zip the xindex and value arrays of this Series"]],"gwpy.segments":[[6,1,1,0,"DataQualityDict","An OrderedDict of (key, DataQualityFlag) pairs."],[7,1,1,0,"DataQualityFlag","A representation of a named set of segments."],[8,1,1,0,"Segment","A tuple defining a semi-open interval [start, end)"],[9,1,1,0,"SegmentList","A list of Segments"],[10,1,1,0,"SegmentListDict","A dict of SegmentLists"]],"gwpy.segments.DataQualityDict":[[6,3,1,0,"clear","!! processed by numpydoc !!"],[6,3,1,0,"coalesce","Coalesce all segments lists in this DataQualityDict."],[6,3,1,0,"copy","Build a copy of this dictionary."],[6,3,1,0,"from_ligolw_tables","Build a DataQualityDict from a set of LIGO_LW segment tables"],[6,3,1,0,"from_veto_definer_file","Read a DataQualityDict from a LIGO_LW XML VetoDefinerTable."],[6,3,1,0,"fromkeys","Create a new ordered dictionary with keys from iterable and values set to value."],[6,3,1,0,"get","Return the value for key if key is in the dictionary, else default."],[6,3,1,0,"intersection","Return the intersection of all flags in this dict"],[6,3,1,0,"items","!! processed by numpydoc !!"],[6,3,1,0,"keys","!! processed by numpydoc !!"],[6,3,1,0,"move_to_end","Move an existing element to the end (or beginning if last is false)."],[6,3,1,0,"plot","Plot this flag on a segments projection."],[6,3,1,0,"pop","If the key is not found, return the default if given; otherwise, raise a KeyError."],[6,3,1,0,"popitem","Remove and return a (key, value) pair from the dictionary."],[6,3,1,0,"populate","Query the segment database for each flag's active segments."],[6,3,1,0,"query","Query the advanced LIGO DQSegDB for a list of flags."],[6,3,1,0,"query_dqsegdb","Query the advanced LIGO DQSegDB for a list of flags."],[6,3,1,0,"read","Read segments from file into a DataQualityDict"],[6,3,1,0,"setdefault","Insert key with a value of default if key is not in the dictionary."],[6,3,1,0,"to_ligolw_tables","Convert this DataQualityDict into a trio of LIGO_LW segment tables"],[6,3,1,0,"union","Return the union of all flags in this dict"],[6,3,1,0,"update","If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k] If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v In either case, this is followed by: for k in F:  D[k] = F[k]"],[6,3,1,0,"values","!! processed by numpydoc !!"],[6,3,1,0,"write","Write this DataQualityDict to file"]],"gwpy.segments.DataQualityFlag":[[7,2,1,0,"active","The set of segments during which this flag was active."],[7,2,1,0,"category","Veto category for this flag."],[7,3,1,0,"coalesce","Coalesce the segments for this flag."],[7,3,1,0,"contract","Contract each of the active Segments by x seconds."],[7,3,1,0,"copy","Build an exact copy of this flag."],[7,2,1,0,"description","Description of why/how this flag was generated."],[7,2,1,0,"extent","The single GPS [start, stop) enclosing segment of this DataQualityFlag."],[7,3,1,0,"fetch_open_data","Fetch Open Data timeline segments into a flag."],[7,3,1,0,"from_veto_def","Define a DataQualityFlag from a VetoDef"],[7,2,1,0,"ifo","The interferometer associated with this flag."],[7,2,1,0,"isgood","Whether active segments mean the instrument was in a good state."],[7,2,1,0,"known","The set of segments during which this flag was known, and its state was well defined."],[7,2,1,0,"label","A human-readable label for this flag."],[7,2,1,0,"livetime","Amount of time this flag was active."],[7,2,1,0,"name","The name associated with this flag."],[7,3,1,0,"pad","Apply a padding to each segment in this DataQualityFlag"],[7,2,1,0,"padding","[start, end) padding for this flag's active segments."],[7,3,1,0,"plot","Plot this flag on a segments projection."],[7,3,1,0,"populate","Query the segment database for this flag's active segments."],[7,3,1,0,"protract","Protract each of the active Segments by x seconds."],[7,3,1,0,"query","Query the advanced LIGO DQSegDB for the given flag"],[7,3,1,0,"query_dqsegdb","Query the advanced LIGO DQSegDB for the given flag"],[7,3,1,0,"read","Read segments from file into a DataQualityFlag."],[7,2,1,0,"regular","True if the active segments are a proper subset of the known."],[7,3,1,0,"round","Round this flag to integer segments."],[7,2,1,0,"tag","The tag (name) associated with this flag."],[7,2,1,0,"texname","Name of this flag in LaTeX printable format."],[7,2,1,0,"version","The version number of this flag."],[7,3,1,0,"write","Write this DataQualityFlag to file"]],"gwpy.segments.Segment":[[8,3,1,0,"connects","Return True if self connects exactly onto other."],[8,3,1,0,"contract","Return a new segment whose bounds are given by adding x to the segment's lower bound and subtracting x from the segment's upper bound."],[8,3,1,0,"count","Return number of occurrences of value."],[8,3,1,0,"disjoint","Returns >0 if self covers an interval above other's interval, <0 if self covers an interval below other's, or 0 if the two intervals are not disjoint (intersect or touch).  A return value of 0 indicates the two segments would coalesce."],[8,2,1,0,"end","The GPS end time of this segment"],[8,3,1,0,"index","Return first index of value."],[8,3,1,0,"intersects","Return True if the intersection of self and other is not a null segment."],[8,3,1,0,"protract","Return a new segment whose bounds are given by subtracting x from the segment's lower bound and adding x to the segment's upper bound."],[8,3,1,0,"shift","Return a new segment whose bounds are given by adding x to the segment's upper and lower bounds."],[8,2,1,0,"start","The GPS start time of this segment"]],"gwpy.segments.SegmentList":[[9,3,1,0,"append","Append object to the end of the list."],[9,3,1,0,"clear","Remove all items from list."],[9,3,1,0,"coalesce","Sort the elements of a list into ascending order, and merge continuous segments into single segments.  This operation is O(n log n)."],[9,3,1,0,"contract","Execute the .contract() method on each segment in the list and coalesce the result.  Segmentlist is modified in place."],[9,3,1,0,"copy","Return a shallow copy of the list."],[9,3,1,0,"count","Return number of occurrences of value."],[9,3,1,0,"extend","Extend list by appending elements from the iterable."],[9,3,1,0,"extent","Return the segment whose end-points denote the maximum and minimum extent of the segmentlist.  Does not require the segmentlist to be coalesced."],[9,3,1,0,"find","Return the smallest i such that i is the index of an element that wholly contains item.  Raises ValueError if no such element exists.  Does not require the segmentlist to be coalesced."],[9,3,1,0,"index","Return first index of value."],[9,3,1,0,"insert","Insert object before index."],[9,3,1,0,"intersects","Returns True if the intersection of self and the segmentlist other is not the null set, otherwise returns False.  The algorithm is O(n), but faster than explicit calculation of the intersection, i.e. by testing bool(self & other).  Requires both lists to be coalesced."],[9,3,1,0,"intersects_segment","Returns True if the intersection of self and the segment other is not the null set, otherwise returns False.  The algorithm is O(log n).  Requires the list to be coalesced."],[9,3,1,0,"pop","Remove and return item at index (default last)."],[9,3,1,0,"protract","Execute the .protract() method on each segment in the list and coalesce the result.  Segmentlist is modified in place."],[9,3,1,0,"read","Read segments from file into a SegmentList"],[9,3,1,0,"remove","Remove first occurrence of value."],[9,3,1,0,"reverse","Reverse IN PLACE."],[9,3,1,0,"shift","Execute the .shift() method on each segment in the list.  The algorithm is O(n) and does not require the list to be coalesced nor does it coalesce the list.  Segmentlist is modified in place."],[9,3,1,0,"sort","Sort the list in ascending order and return None."],[9,3,1,0,"to_table","Convert this SegmentList to a Table"],[9,3,1,0,"value_slice_to_index","Convert the slice s from a slice of values to a slice of indexes.  self must be coalesced, the operation is O(log n).  This is used to extract from a segmentlist the segments that span a given range of values, and is useful in reducing operation counts when many repeated operations are required within a limited range of values."],[9,3,1,0,"write","Write this SegmentList to a file"]],"gwpy.segments.SegmentListDict":[[10,3,1,0,"all_intersects","Returns True if each segmentlist in self intersects the corresponding segmentlist in other;  returns False if this is not the case or if self is empty."],[10,3,1,0,"all_intersects_all","Returns True if self and other have the same keys, and each segmentlist intersects the corresponding segmentlist in the other;  returns False if this is not the case or if either dictionary is empty."],[10,3,1,0,"clear","!! processed by numpydoc !!"],[10,3,1,0,"coalesce","Run .coalesce() on all segmentlists."],[10,3,1,0,"contract","Run .contract(x) on all segmentlists."],[10,3,1,0,"copy","Return a copy of the segmentlistdict object.  The return value is a new object with a new offsets attribute, with references to the original keys, and shallow copies of the segment lists.  Modifications made to the offset dictionary or segmentlists in the object returned by this method will not affect the original, but without using much memory until such modifications are made.  If the optional keys argument is not None, then should be an iterable of keys and only those segmentlists will be copied (KeyError is raised if any of those keys are not in the segmentlistdict)."],[10,3,1,0,"extend","Appends the segmentlists from other to the corresponding segmentlists in self, adding new segmentslists to self as needed."],[10,3,1,0,"extent","Return a dictionary of the results of running .extent() on each of the segmentlists."],[10,3,1,0,"extent_all","Return the result of running .extent() on the union of all lists in the dictionary."],[10,3,1,0,"extract_common","Return a new segmentlistdict containing only those segmentlists associated with the keys in keys, with each set to their mutual intersection.  The offsets are preserved.  If n is not None then instead of their mutual intersection, compute the intervals in which n or more of the segmentlists named in keys intersect.  n = len(keys) is equivalent to n = None.  If keys contains repeated entries, those segmentlists are still only considered once for the purpose of counting n."],[10,3,1,0,"find","Return a dictionary of the results of running .find() on each of the segmentlists."],[10,3,1,0,"fromkeys","Create a new dictionary with keys from iterable and values set to value."],[10,3,1,0,"get","Return the value for key if key is in the dictionary, else default."],[10,3,1,0,"intersection","Return the intersection of the segmentlists associated with the keys in keys."],[10,3,1,0,"intersects","Returns True if there exists a segmentlist in self that intersects the corresponding segmentlist in other;  returns False otherwise."],[10,3,1,0,"intersects_all","Returns True if each segmentlist in other intersects the corresponding segmentlist in self;  returns False if this is not the case, or if other is empty."],[10,3,1,0,"intersects_segment","Returns True if any segmentlist in self intersects the segment, otherwise returns False."],[10,3,1,0,"is_coincident","Return True if any segment in any list in self intersects any segment in any list in other.  If the optional keys argument is not None, then it should be an iterable of keys and only segment lists for those keys will be considered in the test (instead of raising KeyError, keys not present in both segment list dictionaries will be ignored).  If keys is None (the default) then all segment lists are considered."],[10,3,1,0,"items","!! processed by numpydoc !!"],[10,3,1,0,"keys","!! processed by numpydoc !!"],[10,3,1,0,"keys_at","Return a list of the keys for the segment lists that contain x."],[10,3,1,0,"map","Return a dictionary of the results of func applied to each of the segmentlist objects in self."],[10,3,1,0,"pop","If the key is not found, return the default if given; otherwise, raise a KeyError."],[10,3,1,0,"popitem","Remove and return a (key, value) pair as a 2-tuple."],[10,3,1,0,"protract","Run .protract(x) on all segmentlists."],[10,3,1,0,"setdefault","Insert key with a value of default if key is not in the dictionary."],[10,3,1,0,"union","Return the union of the segmentlists associated with the keys in keys."],[10,3,1,0,"update","If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k] If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v In either case, this is followed by: for k in F:  D[k] = F[k]"],[10,3,1,0,"values","!! processed by numpydoc !!"],[10,3,1,0,"vote","Return the intervals when n or more of the segment lists identified by keys are on.  Each segment list casts as many votes as the number of times it appears in keys."]],"gwpy.signal.filter_design":[[93,3,1,0,"bandpass","Design a band-pass filter for the given cutoff frequencies"],[93,3,1,0,"concatenate_zpks","Concatenate a list of zero-pole-gain (ZPK) filters"],[93,3,1,0,"highpass","Design a high-pass filter for the given cutoff frequency"],[93,3,1,0,"lowpass","Design a low-pass filter for the given cutoff frequency"],[93,3,1,0,"notch","Design a ZPK notch filter for the given frequency and sampling rate"]],"gwpy.spectrogram":[[11,1,1,0,"Spectrogram","A 2D array holding a spectrogram of time-frequency data"]],"gwpy.spectrogram.Spectrogram":[[11,2,1,0,"T","!! processed by numpydoc !!"],[11,3,1,0,"abs","Calculate the absolute value element-wise."],[11,3,1,0,"all","Returns True if all elements evaluate to True."],[11,3,1,0,"any","Returns True if any of the elements of a evaluate to True."],[11,3,1,0,"append","Connect another series onto the end of the current one."],[11,3,1,0,"argmax","Return indices of the maximum values along the given axis."],[11,3,1,0,"argmin","Return indices of the minimum values along the given axis."],[11,3,1,0,"argpartition","Returns the indices that would partition this array."],[11,3,1,0,"argsort","Returns the indices that would sort this array."],[11,3,1,0,"astype","Copy of the array, cast to a specified type."],[11,2,1,0,"band","Frequency band described by this Spectrogram"],[11,2,1,0,"base","Base object if memory is from some other object."],[11,3,1,0,"byteswap","Swap the bytes of the array elements"],[11,2,1,0,"cgs","Returns a copy of the current Quantity instance with CGS units. The value of the resulting object will be scaled."],[11,2,1,0,"channel","Instrumental channel associated with these data"],[11,3,1,0,"choose","Use an index array to construct a new array from a set of choices."],[11,3,1,0,"clip","Return an array whose values are limited to [min, max]. One of max or min must be given."],[11,3,1,0,"compress","Return selected slices of this array along given axis."],[11,3,1,0,"conj","Complex-conjugate all elements."],[11,3,1,0,"conjugate","Return the complex conjugate, element-wise."],[11,3,1,0,"copy","Return a copy of the array."],[11,3,1,0,"crop","Crop this series to the given x-axis extent."],[11,3,1,0,"crop_frequencies","Crop this Spectrogram to the specified frequencies"],[11,2,1,0,"ctypes","An object to simplify the interaction of the array with the ctypes module."],[11,3,1,0,"cumprod","Return the cumulative product of the elements along the given axis."],[11,3,1,0,"cumsum","Return the cumulative sum of the elements along the given axis."],[11,2,1,0,"data","Python buffer object pointing to the start of the array's data."],[11,3,1,0,"decompose","Generates a new Quantity with the units decomposed. Decomposed units have only irreducible units in them (see astropy.units.UnitBase.decompose)."],[11,2,1,0,"df","Frequency spacing of this Spectrogram"],[11,3,1,0,"diagonal","Return specified diagonals. In NumPy 1.9 the returned array is a read-only view instead of a copy as in previous NumPy versions.  In a future version the read-only restriction will be removed."],[11,3,1,0,"diff","Calculate the n-th order discrete difference along given axis."],[11,3,1,0,"dot","!! processed by numpydoc !!"],[11,2,1,0,"dt","Time-spacing for this Spectrogram"],[11,2,1,0,"dtype","Data-type of the array's elements."],[11,3,1,0,"dump","Not implemented, use .value.dump() instead."],[11,3,1,0,"dumps","Returns the pickle of the array as a string. pickle.loads will convert the string back to an array."],[11,2,1,0,"dx","X-axis sample separation"],[11,2,1,0,"dy","Y-axis sample separation"],[11,3,1,0,"ediff1d","!! processed by numpydoc !!"],[11,2,1,0,"epoch","Starting GPS epoch for this Spectrogram"],[11,2,1,0,"equivalencies","A list of equivalencies that will be applied by default during unit conversions."],[11,2,1,0,"f0","Starting frequency for this Spectrogram"],[11,3,1,0,"fill","Fill the array with a scalar value."],[11,3,1,0,"filter","Apply the given filter to this Spectrogram."],[11,2,1,0,"flags","Information about the memory layout of the array."],[11,2,1,0,"flat","A 1-D iterator over the Quantity array."],[11,3,1,0,"flatten","Return a copy of the array collapsed into one dimension."],[11,2,1,0,"frequencies","Series of frequencies for this Spectrogram"],[11,3,1,0,"from_spectra","Build a new Spectrogram from a list of spectra."],[11,3,1,0,"getfield","Returns a field of the given array as a certain type."],[11,2,1,0,"imag","The imaginary part of the array."],[11,3,1,0,"imshow","!! processed by numpydoc !!"],[11,2,1,0,"info","Container for meta information like name, description, format.  This is required when the object is used as a mixin column within a table, but can be used as a general way to store meta information."],[11,3,1,0,"inject","Add two compatible Series along their shared x-axis values."],[11,3,1,0,"insert","Insert values along the given axis before the given indices and return a new Quantity object."],[11,3,1,0,"is_compatible","Check whether this series and other have compatible metadata"],[11,3,1,0,"is_contiguous","Check whether other is contiguous with self."],[11,2,1,0,"isscalar","True if the value of this quantity is a scalar, or False if it is an array-like object."],[11,3,1,0,"item","Copy an element of an array to a scalar Quantity and return it."],[11,3,1,0,"itemset","Insert scalar into an array (scalar is cast to array's dtype, if possible)"],[11,2,1,0,"itemsize","Length of one array element in bytes."],[11,3,1,0,"max","Return the maximum along a given axis."],[11,3,1,0,"mean","Returns the average of the array elements along given axis."],[11,3,1,0,"median","Compute the median along the specified axis."],[11,3,1,0,"min","Return the minimum along a given axis."],[11,2,1,0,"name","Name for this data set"],[11,3,1,0,"nansum","Deprecated since version 5.3: The nansum method is deprecated and may be removed in a future version.     Use np.nansum instead."],[11,2,1,0,"nbytes","Total bytes consumed by the elements of the array."],[11,2,1,0,"ndim","Number of array dimensions."],[11,3,1,0,"newbyteorder","Return the array with the same data viewed with a different byte order."],[11,3,1,0,"nonzero","Return the indices of the elements that are non-zero."],[11,3,1,0,"override_unit","Forcefully reset the unit of these data"],[11,3,1,0,"pad","Pad this series to a new size"],[11,3,1,0,"partition","Rearranges the elements in the array in such a way that the value of the element in kth position is in the position it would be in a sorted array. All elements smaller than the kth element are moved before this element and all equal or greater are moved behind it. The ordering of the elements in the two partitions is undefined."],[11,3,1,0,"pcolormesh","!! processed by numpydoc !!"],[11,3,1,0,"percentile","Calculate a given spectral percentile for this Spectrogram."],[11,3,1,0,"plot","Plot the data for this Spectrogram"],[11,3,1,0,"prepend","Connect another series onto the start of the current one."],[11,3,1,0,"prod","Return the product of the array elements over the given axis"],[11,3,1,0,"ptp","Peak to peak (maximum - minimum) value along a given axis."],[11,3,1,0,"put","Set a.flat[n] = values[n] for all n in indices."],[11,3,1,0,"ratio","Calculate the ratio of this Spectrogram against a reference"],[11,3,1,0,"ravel","Return a flattened array."],[11,3,1,0,"read","Read data into a Spectrogram"],[11,2,1,0,"real","The real part of the array."],[11,3,1,0,"repeat","Repeat elements of an array."],[11,3,1,0,"reshape","Returns an array containing the same data with a new shape."],[11,3,1,0,"resize","Change shape and size of array in-place."],[11,3,1,0,"round","Return a with each element rounded to the given number of decimals."],[11,3,1,0,"searchsorted","Find indices where elements of v should be inserted in a to maintain order."],[11,3,1,0,"setfield","Put a value into a specified place in a field defined by a data-type."],[11,3,1,0,"setflags","Set array flags WRITEABLE, ALIGNED, WRITEBACKIFCOPY, respectively."],[11,2,1,0,"shape","Tuple of array dimensions."],[11,3,1,0,"shift","Shift this Series forward on the X-axis by delta"],[11,2,1,0,"si","Returns a copy of the current Quantity instance with SI units. The value of the resulting object will be scaled."],[11,2,1,0,"size","Number of elements in the array."],[11,3,1,0,"sort","Sort an array in-place. Refer to numpy.sort for full documentation."],[11,2,1,0,"span","GPS [start, stop) span for this Spectrogram"],[11,3,1,0,"squeeze","Remove axes of length one from a."],[11,3,1,0,"std","Returns the standard deviation of the array elements along given axis."],[11,3,1,0,"step","Create a step plot of this series"],[11,2,1,0,"strides","Tuple of bytes to step in each dimension when traversing an array."],[11,3,1,0,"sum","Return the sum of the array elements over the given axis."],[11,3,1,0,"swapaxes","Return a view of the array with axis1 and axis2 interchanged."],[11,2,1,0,"t0","GPS time of first time bin"],[11,3,1,0,"take","Return an array formed from the elements of a at the given indices."],[11,2,1,0,"times","Series of GPS times for each sample"],[11,3,1,0,"to","Return a new Quantity object with the specified unit."],[11,3,1,0,"to_string","Generate a string representation of the quantity and its unit."],[11,3,1,0,"to_value","The numerical value, possibly in a different unit."],[11,3,1,0,"tobytes","Not implemented, use .value.tobytes() instead."],[11,3,1,0,"tofile","Not implemented, use .value.tofile() instead."],[11,3,1,0,"tolist","Return the array as an a.ndim-levels deep nested list of Python scalars."],[11,3,1,0,"tostring","Construct Python bytes containing the raw data bytes in the array."],[11,3,1,0,"trace","Return the sum along diagonals of the array."],[11,3,1,0,"transpose","Returns a view of the array with axes transposed."],[11,2,1,0,"unit","The physical unit of these data"],[11,3,1,0,"update","Update this series by appending new data from an other and dropping the same amount of data off the start."],[11,2,1,0,"value","The numerical value of this instance."],[11,3,1,0,"value_at","Return the value of this Series at the given (x, y) coordinates"],[11,3,1,0,"var","Returns the variance of the array elements, along given axis."],[11,3,1,0,"variance","Calculate the SpectralVariance of this Spectrogram."],[11,3,1,0,"view","New view of array with the same data."],[11,3,1,0,"write","Write this Spectrogram to a file"],[11,2,1,0,"x0","X-axis coordinate of the first data point"],[11,2,1,0,"xindex","Positions of the data on the x-axis"],[11,2,1,0,"xspan","X-axis [low, high) segment encompassed by these data"],[11,2,1,0,"xunit","Unit of x-axis index"],[11,2,1,0,"y0","Y-axis coordinate of the first data point"],[11,2,1,0,"yindex","Positions of the data on the y-axis"],[11,2,1,0,"yspan","Y-axis [low, high) segment encompassed by these data"],[11,2,1,0,"yunit","Unit of Y-axis index"],[11,3,1,0,"zip","Zip the xindex and value arrays of this Series"],[11,3,1,0,"zpk","Filter this Spectrogram by applying a zero-pole-gain filter"]],"gwpy.table":[[12,1,1,0,"EventTable","A container for a table of events."]],"gwpy.table.EventTable":[[12,2,1,0,"ColumnClass","!! processed by numpydoc !!"],[12,3,1,0,"add_column","Add a new column to the table using col as input.  If index is supplied then insert column before index position in the list of columns, otherwise append column to the end of the list."],[12,3,1,0,"add_columns","Add a list of new columns the table using cols data objects.  If a corresponding list of indexes is supplied then insert column before each index position in the original list of columns, otherwise append columns to the end of the list."],[12,3,1,0,"add_index","Insert a new index among one or more columns. If there are no indices, make this index the primary table index."],[12,3,1,0,"add_row","Add a new row to the end of the table."],[12,3,1,0,"argsort","Return the indices which would sort the table according to one or more key columns.  This simply calls the numpy.argsort function on the table with the order parameter set to keys."],[12,3,1,0,"as_array","Return a new copy of the table in the form of a structured np.ndarray or np.ma.MaskedArray object (as appropriate)."],[12,3,1,0,"binned_event_rates","Calculate an event rate TimeSeriesDict over a number of bins."],[12,3,1,0,"cluster","Cluster this EventTable over a given column, index, maximizing over a specified column in the table, rank."],[12,2,1,0,"colnames","!! processed by numpydoc !!"],[12,3,1,0,"convert_bytestring_to_unicode","Convert bytestring columns (dtype.kind='S') to unicode (dtype.kind='U') using UTF-8 encoding."],[12,3,1,0,"convert_unicode_to_bytestring","Convert unicode columns (dtype.kind='U') to bytestring (dtype.kind='S') using UTF-8 encoding."],[12,3,1,0,"copy","Return a copy of the table."],[12,2,1,0,"dtype","!! processed by numpydoc !!"],[12,3,1,0,"event_rate","Calculate the rate TimeSeries for this Table."],[12,3,1,0,"fetch","Fetch a table of events from a database"],[12,3,1,0,"fetch_open_data","Fetch events from an open-data catalogue hosted by GWOSC."],[12,3,1,0,"field","Return column[item] for recarray compatibility."],[12,3,1,0,"filled","Return copy of self, with masked values filled."],[12,3,1,0,"filter","Apply one or more column slice filters to this EventTable"],[12,3,1,0,"from_pandas","Create a Table from a pandas.DataFrame instance."],[12,3,1,0,"get_column","Return the Column with the given name"],[12,3,1,0,"group_by","Group this table by the specified keys."],[12,2,1,0,"groups","!! processed by numpydoc !!"],[12,2,1,0,"has_masked_columns","True if table has any MaskedColumn columns."],[12,2,1,0,"has_masked_values","True if column in the table has values which are masked."],[12,2,1,0,"has_mixin_columns","True if table has any mixin columns (defined as columns that are not Column subclasses)."],[12,3,1,0,"hist","Generate a HistogramPlot of this Table."],[12,2,1,0,"iloc","Return a TableILoc object that can be used for retrieving indexed rows in the order they appear in the index."],[12,3,1,0,"index_column","Return the positional index of column name."],[12,3,1,0,"index_mode","Return a context manager for an indexing mode."],[12,2,1,0,"indices","Return the indices associated with columns of the table as a TableIndices object."],[12,2,1,0,"info","!! processed by numpydoc !!"],[12,3,1,0,"insert_row","Add a new row before the given index position in the table."],[12,3,1,0,"items","!! processed by numpydoc !!"],[12,3,1,0,"itercols","Iterate over the columns of this table."],[12,3,1,0,"iterrows","Iterate over rows of table returning a tuple of values for each row."],[12,3,1,0,"keep_columns","Keep only the columns specified (remove the others)."],[12,3,1,0,"keys","!! processed by numpydoc !!"],[12,2,1,0,"loc","Return a TableLoc object that can be used for retrieving rows by index in a given data range. Note that both loc and iloc work only with single-column indices."],[12,2,1,0,"loc_indices","Return a TableLocIndices object that can be used for retrieving the row indices corresponding to given table index key value or values."],[12,2,1,0,"mask","!! processed by numpydoc !!"],[12,2,1,0,"masked","!! processed by numpydoc !!"],[12,2,1,0,"meta",""],[12,3,1,0,"more","Interactively browse table with a paging interface."],[12,3,1,0,"pformat","the table."],[12,3,1,0,"pformat_all","the entire table."],[12,3,1,0,"plot","DEPRECATED, use EventTable.scatter"],[12,3,1,0,"pprint","Print a formatted string representation of the table."],[12,3,1,0,"pprint_all","Print a formatted string representation of the entire table."],[12,2,1,0,"pprint_exclude_names","Maintain tuple that controls table column visibility for print output."],[12,2,1,0,"pprint_include_names","Maintain tuple that controls table column visibility for print output."],[12,3,1,0,"read","Read data into an EventTable"],[12,3,1,0,"remove_column","Remove a column from the table."],[12,3,1,0,"remove_columns","Remove several columns from the table."],[12,3,1,0,"remove_indices","Remove all indices involving the given column. If the primary index is removed, the new primary index will be the most recently added remaining index."],[12,3,1,0,"remove_row","Remove a row from the table."],[12,3,1,0,"remove_rows","Remove rows from the table."],[12,3,1,0,"rename_column","Rename a column."],[12,3,1,0,"rename_columns","Rename multiple columns."],[12,3,1,0,"replace_column","Replace column name with the new col object."],[12,3,1,0,"reverse","Reverse the row order of table rows.  The table is reversed in place and there are no function arguments."],[12,3,1,0,"round","Round numeric columns in-place to the specified number of decimals. Non-numeric columns will be ignored."],[12,3,1,0,"scatter","Make a scatter plot of column x vs column y."],[12,3,1,0,"setdefault","Ensure a column named name exists."],[12,3,1,0,"show_in_browser","Deprecated since version 6.1: We are planning on deprecating show_in_browser in the future.             If you are actively using this method, please let us know             at https://github.com/astropy/astropy/issues/16067"],[12,3,1,0,"show_in_notebook","Deprecated since version 6.1: show_in_notebook() is deprecated as of 6.1 and to create      interactive tables it is recommended to use dedicated tools like:      - https://github.com/bloomberg/ipydatagrid      - https://docs.bokeh.org/en/latest/docs/user_guide/interaction/widgets.html#datatable      - https://dash.plotly.com/datatable"],[12,3,1,0,"sort","Sort the table according to one or more keys. This operates on the existing table and does not return a new table."],[12,3,1,0,"tile","Make a tile plot of this table."],[12,3,1,0,"to_pandas","Return a pandas.DataFrame instance."],[12,3,1,0,"update","Perform a dictionary-style update and merge metadata."],[12,3,1,0,"values","!! processed by numpydoc !!"],[12,3,1,0,"values_equal","Element-wise comparison of table with another table, list, or scalar."],[12,3,1,0,"write","Write this table to a file"]],"gwpy.time":[[104,0,1,0,"from_gps","Convert a GPS time into a datetime.datetime."],[104,0,1,0,"tconvert","Convert GPS times to ISO-format date-times and vice-versa."],[104,0,1,0,"to_gps","Convert any input date/time into a LIGOTimeGPS."]],"gwpy.timeseries":[[13,1,1,0,"StateTimeSeries","Boolean array representing a good/bad state determination"],[14,1,1,0,"StateVector","Binary array representing good/bad state determinations of some data."],[15,1,1,0,"StateVectorDict","Ordered key-value mapping of named StateVector objects"],[16,1,1,0,"TimeSeries","A time-domain data array."],[17,1,1,0,"TimeSeriesDict","Ordered key-value mapping of named TimeSeries objects"],[18,1,1,0,"TimeSeriesList","Fancy list representing a list of TimeSeries"]],"gwpy.timeseries.StateTimeSeries":[[13,2,1,0,"T","View of the transposed array."],[13,3,1,0,"abs","Calculate the absolute value element-wise."],[13,3,1,0,"all","Returns True if all elements evaluate to True."],[13,3,1,0,"any","Returns True if any of the elements of a evaluate to True."],[13,3,1,0,"append","Connect another series onto the end of the current one."],[13,3,1,0,"argmax","Return indices of the maximum values along the given axis."],[13,3,1,0,"argmin","Return indices of the minimum values along the given axis."],[13,3,1,0,"argpartition","Returns the indices that would partition this array."],[13,3,1,0,"argsort","Returns the indices that would sort this array."],[13,3,1,0,"astype","Copy of the array, cast to a specified type."],[13,2,1,0,"base","Base object if memory is from some other object."],[13,3,1,0,"byteswap","Swap the bytes of the array elements"],[13,2,1,0,"cgs","Returns a copy of the current Quantity instance with CGS units. The value of the resulting object will be scaled."],[13,2,1,0,"channel","Instrumental channel associated with these data"],[13,3,1,0,"choose","Use an index array to construct a new array from a set of choices."],[13,3,1,0,"clip","Return an array whose values are limited to [min, max]. One of max or min must be given."],[13,3,1,0,"compress","Return selected slices of this array along given axis."],[13,3,1,0,"conj","Complex-conjugate all elements."],[13,3,1,0,"conjugate","Return the complex conjugate, element-wise."],[13,3,1,0,"copy","Return a copy of the array."],[13,3,1,0,"crop","Crop this series to the given x-axis extent."],[13,2,1,0,"ctypes","An object to simplify the interaction of the array with the ctypes module."],[13,3,1,0,"cumprod","Return the cumulative product of the elements along the given axis."],[13,3,1,0,"cumsum","Return the cumulative sum of the elements along the given axis."],[13,2,1,0,"data","Python buffer object pointing to the start of the array's data."],[13,3,1,0,"decompose","Generates a new Quantity with the units decomposed. Decomposed units have only irreducible units in them (see astropy.units.UnitBase.decompose)."],[13,3,1,0,"diagonal","Return specified diagonals. In NumPy 1.9 the returned array is a read-only view instead of a copy as in previous NumPy versions.  In a future version the read-only restriction will be removed."],[13,3,1,0,"diff","Calculate the n-th order discrete difference along given axis."],[13,3,1,0,"dot","!! processed by numpydoc !!"],[13,2,1,0,"dt","X-axis sample separation"],[13,2,1,0,"dtype","Data-type of the array's elements."],[13,3,1,0,"dump","Not implemented, use .value.dump() instead."],[13,3,1,0,"dumps","Returns the pickle of the array as a string. pickle.loads will convert the string back to an array."],[13,2,1,0,"duration","Duration of this series in seconds"],[13,2,1,0,"dx","X-axis sample separation"],[13,3,1,0,"ediff1d","!! processed by numpydoc !!"],[13,2,1,0,"epoch","GPS epoch for these data."],[13,2,1,0,"equivalencies","A list of equivalencies that will be applied by default during unit conversions."],[13,3,1,0,"fetch","Fetch data from NDS"],[13,3,1,0,"fetch_open_data","Fetch open-access data from the LIGO Open Science Center"],[13,3,1,0,"fill","Fill the array with a scalar value."],[13,3,1,0,"find","Find and read data from frames for a channel"],[13,2,1,0,"flags","Information about the memory layout of the array."],[13,2,1,0,"flat","A 1-D iterator over the Quantity array."],[13,3,1,0,"flatten","Return a copy of the array collapsed into one dimension."],[13,3,1,0,"from_lal","Generate a new TimeSeries from a LAL TimeSeries of any type."],[13,3,1,0,"from_nds2_buffer","Construct a new series from an nds2.buffer object"],[13,3,1,0,"from_pycbc","Convert a pycbc.types.timeseries.TimeSeries into a TimeSeries"],[13,3,1,0,"get","Get data for this channel from frames or NDS"],[13,3,1,0,"getfield","Returns a field of the given array as a certain type."],[13,2,1,0,"imag","The imaginary part of the array."],[13,2,1,0,"info","Container for meta information like name, description, format.  This is required when the object is used as a mixin column within a table, but can be used as a general way to store meta information."],[13,3,1,0,"inject","Add two compatible Series along their shared x-axis values."],[13,3,1,0,"insert","Insert values along the given axis before the given indices and return a new Quantity object."],[13,3,1,0,"is_compatible","Check whether this series and other have compatible metadata"],[13,3,1,0,"is_contiguous","Check whether other is contiguous with self."],[13,2,1,0,"isscalar","True if the value of this quantity is a scalar, or False if it is an array-like object."],[13,3,1,0,"item","Copy an element of an array to a scalar Quantity and return it."],[13,3,1,0,"itemset","Insert scalar into an array (scalar is cast to array's dtype, if possible)"],[13,2,1,0,"itemsize","Length of one array element in bytes."],[13,3,1,0,"max","Return the maximum along a given axis."],[13,3,1,0,"mean","Returns the average of the array elements along given axis."],[13,3,1,0,"median","Compute the median along the specified axis."],[13,3,1,0,"min","Return the minimum along a given axis."],[13,2,1,0,"name","Name for this data set"],[13,3,1,0,"nansum","Deprecated since version 5.3: The nansum method is deprecated and may be removed in a future version.     Use np.nansum instead."],[13,2,1,0,"nbytes","Total bytes consumed by the elements of the array."],[13,2,1,0,"ndim","Number of array dimensions."],[13,3,1,0,"newbyteorder","Return the array with the same data viewed with a different byte order."],[13,3,1,0,"nonzero","Return the indices of the elements that are non-zero."],[13,3,1,0,"override_unit","Forcefully reset the unit of these data"],[13,3,1,0,"pad","Pad this series to a new size"],[13,3,1,0,"partition","Rearranges the elements in the array in such a way that the value of the element in kth position is in the position it would be in a sorted array. All elements smaller than the kth element are moved before this element and all equal or greater are moved behind it. The ordering of the elements in the two partitions is undefined."],[13,3,1,0,"plot","Plot the data for this timeseries"],[13,3,1,0,"prepend","Connect another series onto the start of the current one."],[13,3,1,0,"prod","Return the product of the array elements over the given axis"],[13,3,1,0,"ptp","Peak to peak (maximum - minimum) value along a given axis."],[13,3,1,0,"put","Set a.flat[n] = values[n] for all n in indices."],[13,3,1,0,"ravel","Return a flattened array."],[13,3,1,0,"read","Read data into a TimeSeries"],[13,2,1,0,"real","The real part of the array."],[13,3,1,0,"repeat","Repeat elements of an array."],[13,3,1,0,"reshape","Returns an array containing the same data with a new shape."],[13,3,1,0,"resize","Change shape and size of array in-place."],[13,3,1,0,"round","Return a with each element rounded to the given number of decimals."],[13,2,1,0,"sample_rate","Data rate for this TimeSeries in samples per second (Hertz)."],[13,3,1,0,"searchsorted","Find indices where elements of v should be inserted in a to maintain order."],[13,3,1,0,"setfield","Put a value into a specified place in a field defined by a data-type."],[13,3,1,0,"setflags","Set array flags WRITEABLE, ALIGNED, WRITEBACKIFCOPY, respectively."],[13,2,1,0,"shape","Tuple of array dimensions."],[13,3,1,0,"shift","Shift this Series forward on the X-axis by delta"],[13,2,1,0,"si","Returns a copy of the current Quantity instance with SI units. The value of the resulting object will be scaled."],[13,2,1,0,"size","Number of elements in the array."],[13,3,1,0,"sort","Sort an array in-place. Refer to numpy.sort for full documentation."],[13,2,1,0,"span","X-axis [low, high) segment encompassed by these data"],[13,3,1,0,"squeeze","Remove axes of length one from a."],[13,3,1,0,"std","Returns the standard deviation of the array elements along given axis."],[13,3,1,0,"step","Create a step plot of this series"],[13,2,1,0,"strides","Tuple of bytes to step in each dimension when traversing an array."],[13,3,1,0,"sum","Return the sum of the array elements over the given axis."],[13,3,1,0,"swapaxes","Return a view of the array with axis1 and axis2 interchanged."],[13,2,1,0,"t0","X-axis coordinate of the first data point"],[13,3,1,0,"take","Return an array formed from the elements of a at the given indices."],[13,2,1,0,"times","Positions of the data on the x-axis"],[13,3,1,0,"to","Return a new Quantity object with the specified unit."],[13,3,1,0,"to_dqflag","Convert this series into a DataQualityFlag."],[13,3,1,0,"to_lal","Bogus function inherited from superclass, do not use."],[13,3,1,0,"to_pycbc","Convert this TimeSeries into a PyCBC TimeSeries"],[13,3,1,0,"to_string","Generate a string representation of the quantity and its unit."],[13,3,1,0,"to_value","The numerical value, possibly in a different unit."],[13,3,1,0,"tobytes","Not implemented, use .value.tobytes() instead."],[13,3,1,0,"tofile","Not implemented, use .value.tofile() instead."],[13,3,1,0,"tolist","Return the array as an a.ndim-levels deep nested list of Python scalars."],[13,3,1,0,"tostring","Construct Python bytes containing the raw data bytes in the array."],[13,3,1,0,"trace","Return the sum along diagonals of the array."],[13,3,1,0,"transpose","Returns a view of the array with axes transposed."],[13,2,1,0,"unit","!! processed by numpydoc !!"],[13,3,1,0,"update","Update this series by appending new data from an other and dropping the same amount of data off the start."],[13,2,1,0,"value","The numerical value of this instance."],[13,3,1,0,"value_at","Return the value of this Series at the given xindex value"],[13,3,1,0,"var","Returns the variance of the array elements, along given axis."],[13,3,1,0,"view","New view of array with the same data."],[13,3,1,0,"write","Write this TimeSeries to a file"],[13,2,1,0,"x0","X-axis coordinate of the first data point"],[13,2,1,0,"xindex","Positions of the data on the x-axis"],[13,2,1,0,"xspan","X-axis [low, high) segment encompassed by these data"],[13,2,1,0,"xunit","Unit of x-axis index"],[13,3,1,0,"zip","Zip the xindex and value arrays of this Series"]],"gwpy.timeseries.StateVector":[[14,2,1,0,"T","View of the transposed array."],[14,3,1,0,"abs","Calculate the absolute value element-wise."],[14,3,1,0,"all","Returns True if all elements evaluate to True."],[14,3,1,0,"any","Returns True if any of the elements of a evaluate to True."],[14,3,1,0,"append","Connect another series onto the end of the current one."],[14,3,1,0,"argmax","Return indices of the maximum values along the given axis."],[14,3,1,0,"argmin","Return indices of the minimum values along the given axis."],[14,3,1,0,"argpartition","Returns the indices that would partition this array."],[14,3,1,0,"argsort","Returns the indices that would sort this array."],[14,3,1,0,"astype","Copy of the array, cast to a specified type."],[14,2,1,0,"base","Base object if memory is from some other object."],[14,2,1,0,"bits","list of Bits for this StateVector"],[14,2,1,0,"boolean","A mapping of this StateVector to a 2-D array containing all binary bits as booleans, for each time point."],[14,3,1,0,"byteswap","Swap the bytes of the array elements"],[14,2,1,0,"cgs","Returns a copy of the current Quantity instance with CGS units. The value of the resulting object will be scaled."],[14,2,1,0,"channel","Instrumental channel associated with these data"],[14,3,1,0,"choose","Use an index array to construct a new array from a set of choices."],[14,3,1,0,"clip","Return an array whose values are limited to [min, max]. One of max or min must be given."],[14,3,1,0,"compress","Return selected slices of this array along given axis."],[14,3,1,0,"conj","Complex-conjugate all elements."],[14,3,1,0,"conjugate","Return the complex conjugate, element-wise."],[14,3,1,0,"copy","Return a copy of the array."],[14,3,1,0,"crop","Crop this series to the given x-axis extent."],[14,2,1,0,"ctypes","An object to simplify the interaction of the array with the ctypes module."],[14,3,1,0,"cumprod","Return the cumulative product of the elements along the given axis."],[14,3,1,0,"cumsum","Return the cumulative sum of the elements along the given axis."],[14,2,1,0,"data","Python buffer object pointing to the start of the array's data."],[14,3,1,0,"decompose","Generates a new Quantity with the units decomposed. Decomposed units have only irreducible units in them (see astropy.units.UnitBase.decompose)."],[14,3,1,0,"diagonal","Return specified diagonals. In NumPy 1.9 the returned array is a read-only view instead of a copy as in previous NumPy versions.  In a future version the read-only restriction will be removed."],[14,3,1,0,"diff","Calculate the n-th order discrete difference along given axis."],[14,3,1,0,"dot","!! processed by numpydoc !!"],[14,2,1,0,"dt","X-axis sample separation"],[14,2,1,0,"dtype","Data-type of the array's elements."],[14,3,1,0,"dump","Not implemented, use .value.dump() instead."],[14,3,1,0,"dumps","Returns the pickle of the array as a string. pickle.loads will convert the string back to an array."],[14,2,1,0,"duration","Duration of this series in seconds"],[14,2,1,0,"dx","X-axis sample separation"],[14,3,1,0,"ediff1d","!! processed by numpydoc !!"],[14,2,1,0,"epoch","GPS epoch for these data."],[14,2,1,0,"equivalencies","A list of equivalencies that will be applied by default during unit conversions."],[14,3,1,0,"fetch","Fetch data from NDS into a StateVector."],[14,3,1,0,"fetch_open_data","Fetch open-access data from the LIGO Open Science Center"],[14,3,1,0,"fill","Fill the array with a scalar value."],[14,3,1,0,"find","Find and read data from frames for a channel"],[14,2,1,0,"flags","Information about the memory layout of the array."],[14,2,1,0,"flat","A 1-D iterator over the Quantity array."],[14,3,1,0,"flatten","Return a copy of the array collapsed into one dimension."],[14,3,1,0,"from_lal","Generate a new TimeSeries from a LAL TimeSeries of any type."],[14,3,1,0,"from_nds2_buffer","Construct a new series from an nds2.buffer object"],[14,3,1,0,"from_pycbc","Convert a pycbc.types.timeseries.TimeSeries into a TimeSeries"],[14,3,1,0,"get","Get data for this channel from frames or NDS"],[14,3,1,0,"get_bit_series","Get the StateTimeSeries for each bit of this StateVector."],[14,3,1,0,"getfield","Returns a field of the given array as a certain type."],[14,2,1,0,"imag","The imaginary part of the array."],[14,2,1,0,"info","Container for meta information like name, description, format.  This is required when the object is used as a mixin column within a table, but can be used as a general way to store meta information."],[14,3,1,0,"inject","Add two compatible Series along their shared x-axis values."],[14,3,1,0,"insert","Insert values along the given axis before the given indices and return a new Quantity object."],[14,3,1,0,"is_compatible","Check whether this series and other have compatible metadata"],[14,3,1,0,"is_contiguous","Check whether other is contiguous with self."],[14,2,1,0,"isscalar","True if the value of this quantity is a scalar, or False if it is an array-like object."],[14,3,1,0,"item","Copy an element of an array to a scalar Quantity and return it."],[14,3,1,0,"itemset","Insert scalar into an array (scalar is cast to array's dtype, if possible)"],[14,2,1,0,"itemsize","Length of one array element in bytes."],[14,3,1,0,"max","Return the maximum along a given axis."],[14,3,1,0,"mean","Returns the average of the array elements along given axis."],[14,3,1,0,"median","Compute the median along the specified axis."],[14,3,1,0,"min","Return the minimum along a given axis."],[14,2,1,0,"name","Name for this data set"],[14,3,1,0,"nansum","Deprecated since version 5.3: The nansum method is deprecated and may be removed in a future version.     Use np.nansum instead."],[14,2,1,0,"nbytes","Total bytes consumed by the elements of the array."],[14,2,1,0,"ndim","Number of array dimensions."],[14,3,1,0,"newbyteorder","Return the array with the same data viewed with a different byte order."],[14,3,1,0,"nonzero","Return the indices of the elements that are non-zero."],[14,3,1,0,"override_unit","Forcefully reset the unit of these data"],[14,3,1,0,"pad","Pad this series to a new size"],[14,3,1,0,"partition","Rearranges the elements in the array in such a way that the value of the element in kth position is in the position it would be in a sorted array. All elements smaller than the kth element are moved before this element and all equal or greater are moved behind it. The ordering of the elements in the two partitions is undefined."],[14,3,1,0,"plot","Plot the data for this StateVector"],[14,3,1,0,"prepend","Connect another series onto the start of the current one."],[14,3,1,0,"prod","Return the product of the array elements over the given axis"],[14,3,1,0,"ptp","Peak to peak (maximum - minimum) value along a given axis."],[14,3,1,0,"put","Set a.flat[n] = values[n] for all n in indices."],[14,3,1,0,"ravel","Return a flattened array."],[14,3,1,0,"read","Read data into a StateVector"],[14,2,1,0,"real","The real part of the array."],[14,3,1,0,"repeat","Repeat elements of an array."],[14,3,1,0,"resample","Resample this StateVector to a new rate"],[14,3,1,0,"reshape","Returns an array containing the same data with a new shape."],[14,3,1,0,"resize","Change shape and size of array in-place."],[14,3,1,0,"round","Return a with each element rounded to the given number of decimals."],[14,2,1,0,"sample_rate","Data rate for this TimeSeries in samples per second (Hertz)."],[14,3,1,0,"searchsorted","Find indices where elements of v should be inserted in a to maintain order."],[14,3,1,0,"setfield","Put a value into a specified place in a field defined by a data-type."],[14,3,1,0,"setflags","Set array flags WRITEABLE, ALIGNED, WRITEBACKIFCOPY, respectively."],[14,2,1,0,"shape","Tuple of array dimensions."],[14,3,1,0,"shift","Shift this Series forward on the X-axis by delta"],[14,2,1,0,"si","Returns a copy of the current Quantity instance with SI units. The value of the resulting object will be scaled."],[14,2,1,0,"size","Number of elements in the array."],[14,3,1,0,"sort","Sort an array in-place. Refer to numpy.sort for full documentation."],[14,2,1,0,"span","X-axis [low, high) segment encompassed by these data"],[14,3,1,0,"squeeze","Remove axes of length one from a."],[14,3,1,0,"std","Returns the standard deviation of the array elements along given axis."],[14,3,1,0,"step","Create a step plot of this series"],[14,2,1,0,"strides","Tuple of bytes to step in each dimension when traversing an array."],[14,3,1,0,"sum","Return the sum of the array elements over the given axis."],[14,3,1,0,"swapaxes","Return a view of the array with axis1 and axis2 interchanged."],[14,2,1,0,"t0","X-axis coordinate of the first data point"],[14,3,1,0,"take","Return an array formed from the elements of a at the given indices."],[14,2,1,0,"times","Positions of the data on the x-axis"],[14,3,1,0,"to","Return a new Quantity object with the specified unit."],[14,3,1,0,"to_dqflags","Convert this StateVector into a DataQualityDict"],[14,3,1,0,"to_lal","Convert this TimeSeries into a LAL TimeSeries."],[14,3,1,0,"to_pycbc","Convert this TimeSeries into a PyCBC TimeSeries"],[14,3,1,0,"to_string","Generate a string representation of the quantity and its unit."],[14,3,1,0,"to_value","The numerical value, possibly in a different unit."],[14,3,1,0,"tobytes","Not implemented, use .value.tobytes() instead."],[14,3,1,0,"tofile","Not implemented, use .value.tofile() instead."],[14,3,1,0,"tolist","Return the array as an a.ndim-levels deep nested list of Python scalars."],[14,3,1,0,"tostring","Construct Python bytes containing the raw data bytes in the array."],[14,3,1,0,"trace","Return the sum along diagonals of the array."],[14,3,1,0,"transpose","Returns a view of the array with axes transposed."],[14,2,1,0,"unit","The physical unit of these data"],[14,3,1,0,"update","Update this series by appending new data from an other and dropping the same amount of data off the start."],[14,2,1,0,"value","The numerical value of this instance."],[14,3,1,0,"value_at","Return the value of this Series at the given xindex value"],[14,3,1,0,"var","Returns the variance of the array elements, along given axis."],[14,3,1,0,"view","New view of array with the same data."],[14,3,1,0,"write","Write this TimeSeries to a file"],[14,2,1,0,"x0","X-axis coordinate of the first data point"],[14,2,1,0,"xindex","Positions of the data on the x-axis"],[14,2,1,0,"xspan","X-axis [low, high) segment encompassed by these data"],[14,2,1,0,"xunit","Unit of x-axis index"],[14,3,1,0,"zip","Zip the xindex and value arrays of this Series"]],"gwpy.timeseries.StateVectorDict":[[15,3,1,0,"append","Append the dict other to this one"],[15,3,1,0,"clear","!! processed by numpydoc !!"],[15,3,1,0,"copy","Return a copy of this dict with each value copied to new memory"],[15,3,1,0,"crop","Crop each entry of this dict."],[15,3,1,0,"fetch","Fetch data from NDS for a number of channels."],[15,3,1,0,"find","Find and read data from frames for a number of channels."],[15,3,1,0,"from_nds2_buffers","Construct a new dict from a list of nds2.buffer objects"],[15,3,1,0,"fromkeys","Create a new ordered dictionary with keys from iterable and values set to value."],[15,3,1,0,"get","Retrieve data for multiple channels from frames or NDS"],[15,3,1,0,"items","!! processed by numpydoc !!"],[15,3,1,0,"keys","!! processed by numpydoc !!"],[15,3,1,0,"move_to_end","Move an existing element to the end (or beginning if last is false)."],[15,3,1,0,"plot","Plot the data for this TimeSeriesBaseDict."],[15,3,1,0,"pop","If the key is not found, return the default if given; otherwise, raise a KeyError."],[15,3,1,0,"popitem","Remove and return a (key, value) pair from the dictionary."],[15,3,1,0,"prepend","Prepend the dict other to this one"],[15,3,1,0,"read","Read data for multiple bit vector channels into a StateVectorDict"],[15,3,1,0,"resample","Resample items in this dict."],[15,3,1,0,"setdefault","Insert key with a value of default if key is not in the dictionary."],[15,2,1,0,"span","The GPS [start, stop) extent of data in this dict"],[15,3,1,0,"step","Create a step plot of this dict."],[15,3,1,0,"update","If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k] If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v In either case, this is followed by: for k in F:  D[k] = F[k]"],[15,3,1,0,"values","!! processed by numpydoc !!"],[15,3,1,0,"write","Write this TimeSeriesDict to a file"]],"gwpy.timeseries.TimeSeries":[[16,2,1,0,"T","View of the transposed array."],[16,3,1,0,"abs","Calculate the absolute value element-wise."],[16,3,1,0,"all","Returns True if all elements evaluate to True."],[16,3,1,0,"any","Returns True if any of the elements of a evaluate to True."],[16,3,1,0,"append","Connect another series onto the end of the current one."],[16,3,1,0,"argmax","Return indices of the maximum values along the given axis."],[16,3,1,0,"argmin","Return indices of the minimum values along the given axis."],[16,3,1,0,"argpartition","Returns the indices that would partition this array."],[16,3,1,0,"argsort","Returns the indices that would sort this array."],[16,3,1,0,"asd","Calculate the ASD FrequencySeries of this TimeSeries"],[16,3,1,0,"astype","Copy of the array, cast to a specified type."],[16,3,1,0,"auto_coherence","Calculate the frequency-coherence between this TimeSeries and a time-shifted copy of itself."],[16,3,1,0,"average_fft","Compute the averaged one-dimensional DFT of this TimeSeries."],[16,3,1,0,"bandpass","Filter this TimeSeries with a band-pass filter."],[16,2,1,0,"base","Base object if memory is from some other object."],[16,3,1,0,"byteswap","Swap the bytes of the array elements"],[16,2,1,0,"cgs","Returns a copy of the current Quantity instance with CGS units. The value of the resulting object will be scaled."],[16,2,1,0,"channel","Instrumental channel associated with these data"],[16,3,1,0,"choose","Use an index array to construct a new array from a set of choices."],[16,3,1,0,"clip","Return an array whose values are limited to [min, max]. One of max or min must be given."],[16,3,1,0,"coherence","Calculate the frequency-coherence between this TimeSeries and another."],[16,3,1,0,"coherence_spectrogram","Calculate the coherence spectrogram between this TimeSeries and other."],[16,3,1,0,"compress","Return selected slices of this array along given axis."],[16,3,1,0,"conj","Complex-conjugate all elements."],[16,3,1,0,"conjugate","Return the complex conjugate, element-wise."],[16,3,1,0,"convolve","overlap-save method"],[16,3,1,0,"copy","Return a copy of the array."],[16,3,1,0,"correlate","Cross-correlate this TimeSeries with another signal"],[16,3,1,0,"crop","Crop this series to the given x-axis extent."],[16,3,1,0,"csd","Calculate the CSD FrequencySeries for two TimeSeries"],[16,3,1,0,"csd_spectrogram","TimeSeries with 'other'."],[16,2,1,0,"ctypes","An object to simplify the interaction of the array with the ctypes module."],[16,3,1,0,"cumprod","Return the cumulative product of the elements along the given axis."],[16,3,1,0,"cumsum","Return the cumulative sum of the elements along the given axis."],[16,2,1,0,"data","Python buffer object pointing to the start of the array's data."],[16,3,1,0,"decompose","Generates a new Quantity with the units decomposed. Decomposed units have only irreducible units in them (see astropy.units.UnitBase.decompose)."],[16,3,1,0,"demodulate","Compute the average magnitude and phase of this TimeSeries once per stride at a given frequency"],[16,3,1,0,"detrend","Remove the trend from this TimeSeries"],[16,3,1,0,"diagonal","Return specified diagonals. In NumPy 1.9 the returned array is a read-only view instead of a copy as in previous NumPy versions.  In a future version the read-only restriction will be removed."],[16,3,1,0,"diff","Calculate the n-th order discrete difference along given axis."],[16,3,1,0,"dot","!! processed by numpydoc !!"],[16,2,1,0,"dt","X-axis sample separation"],[16,2,1,0,"dtype","Data-type of the array's elements."],[16,3,1,0,"dump","Not implemented, use .value.dump() instead."],[16,3,1,0,"dumps","Returns the pickle of the array as a string. pickle.loads will convert the string back to an array."],[16,2,1,0,"duration","Duration of this series in seconds"],[16,2,1,0,"dx","X-axis sample separation"],[16,3,1,0,"ediff1d","!! processed by numpydoc !!"],[16,2,1,0,"epoch","GPS epoch for these data."],[16,2,1,0,"equivalencies","A list of equivalencies that will be applied by default during unit conversions."],[16,3,1,0,"fetch","Fetch data from NDS"],[16,3,1,0,"fetch_open_data","Fetch open-access data from the LIGO Open Science Center"],[16,3,1,0,"fft","Compute the one-dimensional discrete Fourier transform of this TimeSeries."],[16,3,1,0,"fftgram","Calculate the Fourier-gram of this TimeSeries."],[16,3,1,0,"fill","Fill the array with a scalar value."],[16,3,1,0,"filter","Filter this TimeSeries with an IIR or FIR filter"],[16,3,1,0,"find","Find and read data from frames for a channel"],[16,3,1,0,"find_gates","Identify points that should be gates using a provided threshold and clustered within a provided time window."],[16,2,1,0,"flags","Information about the memory layout of the array."],[16,2,1,0,"flat","A 1-D iterator over the Quantity array."],[16,3,1,0,"flatten","Return a copy of the array collapsed into one dimension."],[16,3,1,0,"from_lal","Generate a new TimeSeries from a LAL TimeSeries of any type."],[16,3,1,0,"from_nds2_buffer","Construct a new series from an nds2.buffer object"],[16,3,1,0,"from_pycbc","Convert a pycbc.types.timeseries.TimeSeries into a TimeSeries"],[16,3,1,0,"gate","Removes high amplitude peaks from data using inverse Planck window."],[16,3,1,0,"get","Get data for this channel from frames or NDS"],[16,3,1,0,"getfield","Returns a field of the given array as a certain type."],[16,3,1,0,"heterodyne","Compute the average magnitude and phase of this TimeSeries once per stride after heterodyning with a given phase series"],[16,3,1,0,"highpass","Filter this TimeSeries with a high-pass filter."],[16,2,1,0,"imag","The imaginary part of the array."],[16,2,1,0,"info","Container for meta information like name, description, format.  This is required when the object is used as a mixin column within a table, but can be used as a general way to store meta information."],[16,3,1,0,"inject","Add two compatible Series along their shared x-axis values."],[16,3,1,0,"insert","Insert values along the given axis before the given indices and return a new Quantity object."],[16,3,1,0,"is_compatible","Check whether this series and other have compatible metadata"],[16,3,1,0,"is_contiguous","Check whether other is contiguous with self."],[16,2,1,0,"isscalar","True if the value of this quantity is a scalar, or False if it is an array-like object."],[16,3,1,0,"item","Copy an element of an array to a scalar Quantity and return it."],[16,3,1,0,"itemset","Insert scalar into an array (scalar is cast to array's dtype, if possible)"],[16,2,1,0,"itemsize","Length of one array element in bytes."],[16,3,1,0,"lowpass","Filter this TimeSeries with a Butterworth low-pass filter."],[16,3,1,0,"mask","Mask away portions of this TimeSeries that fall within a given list of time segments"],[16,3,1,0,"max","Return the maximum along a given axis."],[16,3,1,0,"mean","Returns the average of the array elements along given axis."],[16,3,1,0,"median","Compute the median along the specified axis."],[16,3,1,0,"min","Return the minimum along a given axis."],[16,2,1,0,"name","Name for this data set"],[16,3,1,0,"nansum","Deprecated since version 5.3: The nansum method is deprecated and may be removed in a future version.     Use np.nansum instead."],[16,2,1,0,"nbytes","Total bytes consumed by the elements of the array."],[16,2,1,0,"ndim","Number of array dimensions."],[16,3,1,0,"newbyteorder","Return the array with the same data viewed with a different byte order."],[16,3,1,0,"nonzero","Return the indices of the elements that are non-zero."],[16,3,1,0,"notch","Notch out a frequency in this TimeSeries."],[16,3,1,0,"override_unit","Forcefully reset the unit of these data"],[16,3,1,0,"pad","Pad this series to a new size"],[16,3,1,0,"partition","Rearranges the elements in the array in such a way that the value of the element in kth position is in the position it would be in a sorted array. All elements smaller than the kth element are moved before this element and all equal or greater are moved behind it. The ordering of the elements in the two partitions is undefined."],[16,3,1,0,"plot","Plot the data for this timeseries"],[16,3,1,0,"prepend","Connect another series onto the start of the current one."],[16,3,1,0,"prod","Return the product of the array elements over the given axis"],[16,3,1,0,"psd","Calculate the PSD FrequencySeries for this TimeSeries"],[16,3,1,0,"ptp","Peak to peak (maximum - minimum) value along a given axis."],[16,3,1,0,"put","Set a.flat[n] = values[n] for all n in indices."],[16,3,1,0,"q_gram","Scan a TimeSeries using the multi-Q transform and return an EventTable of the most significant tiles"],[16,3,1,0,"q_transform","Scan a TimeSeries using the multi-Q transform and return an interpolated high-resolution spectrogram"],[16,3,1,0,"ravel","Return a flattened array."],[16,3,1,0,"rayleigh_spectrogram","Calculate the Rayleigh statistic spectrogram of this TimeSeries"],[16,3,1,0,"rayleigh_spectrum","Calculate the Rayleigh FrequencySeries for this TimeSeries."],[16,3,1,0,"read","Read data into a TimeSeries"],[16,2,1,0,"real","The real part of the array."],[16,3,1,0,"repeat","Repeat elements of an array."],[16,3,1,0,"resample","Resample this Series to a new rate"],[16,3,1,0,"reshape","Returns an array containing the same data with a new shape."],[16,3,1,0,"resize","Change shape and size of array in-place."],[16,3,1,0,"rms","Calculate the root-mean-square value of this TimeSeries once per stride."],[16,3,1,0,"round","Return a with each element rounded to the given number of decimals."],[16,2,1,0,"sample_rate","Data rate for this TimeSeries in samples per second (Hertz)."],[16,3,1,0,"searchsorted","Find indices where elements of v should be inserted in a to maintain order."],[16,3,1,0,"setfield","Put a value into a specified place in a field defined by a data-type."],[16,3,1,0,"setflags","Set array flags WRITEABLE, ALIGNED, WRITEBACKIFCOPY, respectively."],[16,2,1,0,"shape","Tuple of array dimensions."],[16,3,1,0,"shift","Shift this Series forward on the X-axis by delta"],[16,2,1,0,"si","Returns a copy of the current Quantity instance with SI units. The value of the resulting object will be scaled."],[16,2,1,0,"size","Number of elements in the array."],[16,3,1,0,"sort","Sort an array in-place. Refer to numpy.sort for full documentation."],[16,2,1,0,"span","X-axis [low, high) segment encompassed by these data"],[16,3,1,0,"spectral_variance","Calculate the SpectralVariance of this TimeSeries."],[16,3,1,0,"spectrogram","Calculate the average power spectrogram of this TimeSeries using the specified average spectrum method."],[16,3,1,0,"spectrogram2","Calculate the non-averaged power Spectrogram of this TimeSeries"],[16,3,1,0,"squeeze","Remove axes of length one from a."],[16,3,1,0,"std","Returns the standard deviation of the array elements along given axis."],[16,3,1,0,"step","Create a step plot of this series"],[16,2,1,0,"strides","Tuple of bytes to step in each dimension when traversing an array."],[16,3,1,0,"sum","Return the sum of the array elements over the given axis."],[16,3,1,0,"swapaxes","Return a view of the array with axis1 and axis2 interchanged."],[16,2,1,0,"t0","X-axis coordinate of the first data point"],[16,3,1,0,"take","Return an array formed from the elements of a at the given indices."],[16,3,1,0,"taper","Taper the ends of this TimeSeries smoothly to zero."],[16,2,1,0,"times","Positions of the data on the x-axis"],[16,3,1,0,"to","Return a new Quantity object with the specified unit."],[16,3,1,0,"to_lal","Convert this TimeSeries into a LAL TimeSeries."],[16,3,1,0,"to_pycbc","Convert this TimeSeries into a PyCBC TimeSeries"],[16,3,1,0,"to_string","Generate a string representation of the quantity and its unit."],[16,3,1,0,"to_value","The numerical value, possibly in a different unit."],[16,3,1,0,"tobytes","Not implemented, use .value.tobytes() instead."],[16,3,1,0,"tofile","Not implemented, use .value.tofile() instead."],[16,3,1,0,"tolist","Return the array as an a.ndim-levels deep nested list of Python scalars."],[16,3,1,0,"tostring","Construct Python bytes containing the raw data bytes in the array."],[16,3,1,0,"trace","Return the sum along diagonals of the array."],[16,3,1,0,"transfer_function","Calculate the transfer function between this TimeSeries and another."],[16,3,1,0,"transpose","Returns a view of the array with axes transposed."],[16,2,1,0,"unit","The physical unit of these data"],[16,3,1,0,"update","Update this series by appending new data from an other and dropping the same amount of data off the start."],[16,2,1,0,"value","The numerical value of this instance."],[16,3,1,0,"value_at","Return the value of this Series at the given xindex value"],[16,3,1,0,"var","Returns the variance of the array elements, along given axis."],[16,3,1,0,"view","New view of array with the same data."],[16,3,1,0,"whiten","Whiten this TimeSeries using inverse spectrum truncation"],[16,3,1,0,"write","Write this TimeSeries to a file"],[16,2,1,0,"x0","X-axis coordinate of the first data point"],[16,2,1,0,"xindex","Positions of the data on the x-axis"],[16,2,1,0,"xspan","X-axis [low, high) segment encompassed by these data"],[16,2,1,0,"xunit","Unit of x-axis index"],[16,3,1,0,"zip","Zip the xindex and value arrays of this Series"],[16,3,1,0,"zpk","Filter this TimeSeries by applying a zero-pole-gain filter"]],"gwpy.timeseries.TimeSeriesDict":[[17,3,1,0,"append","Append the dict other to this one"],[17,3,1,0,"clear","!! processed by numpydoc !!"],[17,3,1,0,"copy","Return a copy of this dict with each value copied to new memory"],[17,3,1,0,"crop","Crop each entry of this dict."],[17,3,1,0,"fetch","Fetch data from NDS for a number of channels."],[17,3,1,0,"find","Find and read data from frames for a number of channels."],[17,3,1,0,"from_nds2_buffers","Construct a new dict from a list of nds2.buffer objects"],[17,3,1,0,"fromkeys","Create a new ordered dictionary with keys from iterable and values set to value."],[17,3,1,0,"get","Retrieve data for multiple channels from frames or NDS"],[17,3,1,0,"items","!! processed by numpydoc !!"],[17,3,1,0,"keys","!! processed by numpydoc !!"],[17,3,1,0,"move_to_end","Move an existing element to the end (or beginning if last is false)."],[17,3,1,0,"plot","Plot the data for this TimeSeriesBaseDict."],[17,3,1,0,"pop","If the key is not found, return the default if given; otherwise, raise a KeyError."],[17,3,1,0,"popitem","Remove and return a (key, value) pair from the dictionary."],[17,3,1,0,"prepend","Prepend the dict other to this one"],[17,3,1,0,"read","Read data for multiple channels into a TimeSeriesDict"],[17,3,1,0,"resample","Resample items in this dict."],[17,3,1,0,"setdefault","Insert key with a value of default if key is not in the dictionary."],[17,2,1,0,"span","The GPS [start, stop) extent of data in this dict"],[17,3,1,0,"step","Create a step plot of this dict."],[17,3,1,0,"update","If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k] If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v In either case, this is followed by: for k in F:  D[k] = F[k]"],[17,3,1,0,"values","!! processed by numpydoc !!"],[17,3,1,0,"write","Write this TimeSeriesDict to a file"]],"gwpy.timeseries.TimeSeriesList":[[18,3,1,0,"append","Append object to the end of the list."],[18,3,1,0,"clear","Remove all items from list."],[18,3,1,0,"coalesce","Merge contiguous elements of this list into single objects"],[18,3,1,0,"copy","Return a copy of this list with each element copied to new memory"],[18,3,1,0,"count","Return number of occurrences of value."],[18,3,1,0,"extend","Extend list by appending elements from the iterable."],[18,3,1,0,"index","Return first index of value."],[18,3,1,0,"insert","Insert object before index."],[18,3,1,0,"join","Concatenate all of the elements of this list into a single object"],[18,3,1,0,"pop","Remove and return item at index (default last)."],[18,3,1,0,"remove","Remove first occurrence of value."],[18,3,1,0,"reverse","Reverse IN PLACE."],[18,2,1,0,"segments","The span of each series in this list"],[18,3,1,0,"sort","Sort the list in ascending order and return None."]]},objnames:{"0":["py","function","Python function"],"1":["py","class","Python class"],"2":["py","attribute","Python attribute"],"3":["py","method","Python method"]},objtypes:{"0":"py:function","1":"py:class","2":"py:attribute","3":"py:method"},terms:{"0":[0,1,4,5,8,9,10,11,12,13,14,16,18,32,33,34,35,36,41,46,47,50,52,53,57,59,65,66,67,69,74,80,82,88,90,91,93,94,96,97,98,101,104,105,106,110],"00":[12,42,65,67,105],"000":[4,5,11,12,13,14,16,94,96,105],"000244140625":[13,14,16],"0004":[2,3],"00048828125":110,"01":[0,1,12,20,50,65,88,94,109],"01945053":94,"01t00":12,"029792":101,"03":[12,41,57],"03hz":[65,105],"04":42,"045853":101,"05":12,"0509116":16,"06":[4,5,11,13,14,16,94,96,98],"07":66,"077478":101,"08":[98,101],"08763900e":[13,14,16],"09":[55,56,94,104,109],"0d":[4,5,11,13,14,16],"0e":[4,5,11,13,14,16],"0j":[4,5,11,13,14,16],"0x1":[4,5,11,13,14,16],"0x100":[4,5,11,13,14,16],"0x2233":[4,5,11,13,14,16],"0x3322":[4,5,11,13,14,16],"0x7ff2fc1fc200":[4,5,11,13,14,16],"0x7ff2fc1fce60":[4,5,11,13,14,16],"0x7ff2fc1ff320":[4,5,11,13,14,16],"1":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],"10":[2,3,4,5,8,9,10,11,12,13,14,16,20,25,27,32,37,40,43,47,53,55,56,59,61,62,64,67,80,87,88,90,96,99,101,102,103],"100":[0,4,5,11,16,32,36,42,43,59,67,73,82,93,94,105],"1000":[4,5,11,12,13,14,16,36,84,88,93,94,98,106,110],"1000000000":[91,94],"1000000034":91,"1000000065":91,"1000000100":91,"100657":20,"101":[4,5,11,13,14,16],"1016":20,"1024":[24,25,39,52],"1064534416":[92,110],"1064535295":92,"1064535296":92,"1064535896":92,"1064535897":92,"1064536969":92,"1064536970":92,"1064537086":92,"1064537088":92,"1064537528":92,"1064537529":92,"1064538016":92,"1088":[2,3],"11":[4,5,8,9,11,12,13,14,16,101],"1123084671":74,"1123084703":74,"1126259446":[0,2,13,14,16,28,37,50,71,72,82,85,86],"1126259457":[31,32,81,83],"1126259458":[29,58],"1126259460":[58,71],"1126259461":71,"1126259462":[29,50,58,71,72,81,82,83,85,104,109],"1126259463":[58,71,82],"1126259464":71,"1126259465":58,"1126259467":[58,81,83],"1126259478":[0,2,13,14,16,37,50,71,72,82,85,86],"1126260017":[21,22,32,36,53],"1126260617":[36,53],"1131350417":16,"1131354017":16,"1131357617":16,"1135136228":43,"1135140324":43,"1135148571":16,"1135148661":16,"1135148681":16,"1135148771":16,"1167264018":104,"1172489751":66,"1172489782":66,"1172489783":66,"1172489784":66,"1172489815":66,"1186741850":[105,110],"1186741854":110,"1186741856":110,"1186741859":110,"1186741861":110,"1186741865":110,"1186741867":110,"1186741870":[105,110],"1187006834":[46,47],"1187007040":40,"1187008866":[28,32,82],"1187008882":[46,47,73],"1187008898":82,"1187009088":40,"1187010930":[46,47],"1187056280":107,"119":[46,47,52],"12":[4,5,7,10,11,12,13,14,15,16,17,39,45,46,47,49,50,65,67,81,83,86,90,98,101,105],"120":[2,3,16,29,40,50,81,83],"1200x400":29,"1200x600":32,"123":[4,5,11,12,13,14,16],"1234567890":101,"1238782700":98,"1239082262":98,"1239168612":98,"1240327333":98,"1241492407":97,"1242459857":98,"1245955943":98,"1246487219":98,"1246527224":98,"1246663515":98,"1249852257":98,"1251009263":98,"1253326744":98,"1253755327":98,"1253885759":98,"1255853400":101,"1262274636":110,"1262275684":110,"1262276525":110,"1262276527":110,"1262277684":110,"1264315518":[24,25],"1264316100":[26,27],"1264316116":23,"127":[13,14,16,110],"128":[14,16,101],"1284":[4,5,11,13,14,16],"13":[4,5,11,13,14,16,20,101],"13090":[4,5,11,13,14,16],"13234058":94,"1344":[4,5,11,13,14,16],"13920997":94,"14":[4,5,11,13,14,16,55,56,65,89,94,98,101,104,105,109],"1400":82,"144":101,"15":[4,5,8,9,10,11,12,13,14,16,46,58,67,71,89,90,98,101,108],"150":[16,52,66],"1500":[40,41,43,57],"155273438":101,"16":[4,5,10,11,13,14,16,40,45,46,50,52,58,65,66,74,80,93,94,96,101],"160":101,"160393":101,"16067":12,"161101":[46,47,52],"16384":[13,14,16,33,69],"16k":105,"17":[4,5,11,13,14,16,30,45,71,101],"17704028e":[13,14,16],"17941277":94,"1798":[4,5,11,13,14,16],"18":[4,5,9,11,12,13,14,16,65,81,98,101,107],"180":[16,40,50],"1800":42,"1826175":106,"186523438":101,"18828231":94,"19":[4,5,11,13,14,16,43,45,49,55,94,101],"19095158":94,"1980":[90,104],"1998":12,"1_m":105,"1_t":105,"1a":105,"1d":[4,5,11,13,14,16],"1dai":30,"1e":[0,4,11,16,37,41,43,45,50,55,67,81,82,83,94,96],"1hz":[65,105],"1j":[4,5,11,13,14,16],"2":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],"20":[4,5,9,11,12,13,14,16,34,40,41,43,58,66,67,71,72,94,96,101],"200":12,"2000":[37,45,55,56],"2002":12,"2010":[7,45,94,96],"2011":94,"2014":[2,3,42],"2015":[41,49,55,56,57,67,89,104,109],"2016":[49,50,58],"2017":[30,104],"2019":98,"2020":65,"2021":[20,105],"2024":101,"2048":[16,40,71],"2052":101,"20892526":101,"20892632":101,"20892636":101,"20995951":94,"21":[4,5,9,11,13,14,16,37,41,50,81,82,83],"217773438":101,"21st":85,"22":[4,5,11,13,14,16,101,105],"224":[4,5,11,13,14,16],"22785403":94,"23":[4,5,11,13,14,16,43,45,94,96],"2312":[4,5,11,13,14,16],"2352":20,"24":[12,37,40,41,43,55,82,98],"25":[9,12,24,52,53,57,66,82,101],"250":[16,50,81,83],"25253688":94,"256":[4,5,11,13,14,16,58,101],"26":[12,41,57,98],"27":42,"270205":101,"28":101,"280273438":101,"2826":[4,5,11,13,14,16],"282666":33,"29":[98,109,110],"29442085":94,"2d":[4,5,11,13,14,16],"2e":40,"2f":88,"3":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],"30":[0,2,4,5,9,11,12,13,14,16,39,41,45,46,47,57,67,82,93,108],"300":[12,29,82,85],"30273438":101,"307253":101,"30731":101,"31":98,"311523438":101,"3117":32,"31962608":[4,5,11,13,14,16],"32":[4,5,11,13,14,16,23,26,27,28,32,71,98],"321821":101,"323":[4,5,11,13,14,16],"33":[98,101],"331":16,"3340":[4,5,11,13,14,16],"33533516e":[13,14,16],"34":[52,98],"342773438":101,"344837":101,"347675":101,"35":[52,82],"35161785":94,"35647":101,"363036":101,"367717":101,"37":[41,57],"384432":101,"3854":[4,5,11,13,14,16],"39":[98,101],"39068193":94,"391":104,"3910":104,"391000":104,"391000000":104,"393112":101,"39681183e":[13,14,16],"3e":[40,96],"4":[0,2,3,4,5,7,11,12,13,14,15,16,17,23,24,37,40,45,46,47,50,52,57,58,66,67,71,72,74,80,81,82,83,86,87,94,96,98,101,107,110],"40":[4,5,9,11,13,14,16,45,66,71,84,94,96],"400":92,"4000":[23,25,27,32,67,94,96],"404041":101,"4049224853516":101,"405825":101,"4096":[13,14,16,84,93,107],"415":85,"42":[0,85],"420":32,"425":85,"427":[71,81,83],"4294967296":[4,5,11,13,14,16],"436523438":101,"4368":[4,5,11,13,14,16],"45":[55,56,104],"456789":16,"46":94,"4612102889":2,"465309":101,"46696636":94,"47":[41,57],"4759674072266":101,"48":[4,5,11,13,14,16],"480":[4,5,11,13,14,16],"4882":[4,5,11,13,14,16],"4k":105,"5":[4,5,8,9,10,11,12,13,14,16,34,40,43,46,47,53,55,56,57,62,65,67,69,70,72,74,80,81,82,83,88,90,96,98,101,103,107,110],"50":[4,5,9,11,12,13,14,16,29,36,40,41,42,50,52,53,55,56,57,81,82,83,85,94,96,99,104,109],"500":[0,5,11,12,16,46,72],"5000":[12,66],"5055584195":0,"50710421":94,"50hz":74,"51":109,"512":101,"512749":101,"513":[4,5,11,13,14,16],"5168914794922":101,"52":101,"5396":[4,5,11,13,14,16],"55":[12,42,55,56],"55365541e":[13,14,16],"561176":101,"561523438":101,"5620499351813308":[4,5,11,13,14,16],"57":66,"5740011":101,"57754":104,"58030742":94,"58121195e":[13,14,16],"59":94,"5910":[4,5,11,13,14,16],"59442285":106,"5e":[4,5,11,13,14,16,37,41,55],"5th":40,"6":[4,5,9,10,11,12,13,14,16,29,39,45,50,52,65,81,82,83,85,86,96,98,101,104,110],"60":[16,29,40,50,81,82,83,85],"600":[21,22,32],"60hz":41,"61551753":94,"61626489":94,"61979421":106,"62968915":106,"636543":101,"637x":[2,3],"64":[16,25],"662391":101,"66572174":94,"686523438":101,"696106":101,"6th":[90,104],"7":[4,5,9,10,11,12,13,14,16,90,96,98,101],"70":2,"70710678":[4,5,11,13,14,16],"7110":20,"715092":101,"72475187":94,"73":101,"73642962":94,"739489":101,"742907":101,"74846848":94,"75":101,"751953126":101,"753906251":101,"755859376":101,"757812501":101,"759765626":101,"761718751":101,"763671876":101,"765625001":101,"767578126":101,"769531251":101,"770":[4,5,11,13,14,16],"771484376":101,"773437501":101,"775390626":101,"77665596":94,"77702177":94,"777343751":101,"779296876":101,"781250001":101,"783203126":101,"78723728":94,"789":[2,3],"79137264":94,"79559404":94,"8":[0,1,2,3,4,5,9,11,12,13,14,16,29,47,62,64,65,66,67,72,82,83,86,94,96,98,101,103],"8000":53,"802326":101,"811523438":101,"811825":101,"813":[4,5,11,13,14,16],"81440898":94,"814697265625e":[4,5,11,13,14,16],"81492468":94,"816761":101,"83843501":94,"839205":101,"84":101,"85":12,"8644242":101,"864924":101,"8755":[4,5,11,13,14,16],"87654321e":16,"8896484375":101,"8900096":94,"8fhtga8meu":101,"9":[4,5,10,11,12,13,14,16,32,34,50,96,98,101,104],"905273438":101,"92154324":94,"92773438":101,"93154594":94,"94432426":94,"944695":101,"94513298":106,"94586261":94,"946339215":7,"946340946":7,"946351800":7,"946356479":7,"946360620":7,"946362652":7,"946369150":7,"946372854":7,"946382630":7,"946395595":7,"946396751":7,"946400173":7,"946404977":7,"946412312":7,"946413577":7,"946415770":7,"946422986":7,"946425615":7,"95":40,"95930736":94,"95th":40,"967773438":101,"968654552":[61,62,64,99,101,102,103,107],"968654553":107,"968654557":101,"968654558":101,"968654559":101,"968654560":101,"968654562":[61,62,103],"968654592":14,"97455031":94,"975931":101,"98309223":106,"985101":101,"991333007812":101,"995":[4,5,11,13,14,16],"9m":[50,81],"boolean":[4,5,11,12,13,14,16,35,98,103,110],"break":[4,5,11,13,14,16,79],"byte":[4,5,11,12,13,14,16],"case":[4,5,6,7,9,10,11,12,13,14,15,16,17,35,74,93,101,104,110],"class":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,70,73,79,81,87,91,101,102,107,109],"const":16,"default":[0,1,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,32,35,50,55,82,85,86,87,88,91,93,97,99,101,103,105,107,110],"do":[4,5,6,7,11,13,14,15,16,17,18,20,32,35,39,45,49,50,65,71,79,91],"export":[12,20],"final":[4,5,11,13,14,16,34,36,39,40,45,50,52,53,55,56,58,62,67,69,73],"float":[0,1,2,3,4,5,6,7,8,11,12,13,14,15,16,17,18,33,93,103,104],"function":[4,5,6,9,11,12,13,14,16,18,32,33,38,45,71,77,81,82,89,90,93,100,101,103],"import":[0,2,4,5,7,9,11,12,13,14,16,32,33,34,36,37,39,40,41,42,43,45,46,47,49,50,52,53,55,56,57,58,59,61,62,63,64,65,66,67,69,70,71,72,73,74,81,82,83,84,85,86,87,88,89,92,93,94,96,98,99,100,101,102,103,104,105,106,107,108,109,110],"int":[4,5,6,7,11,12,13,14,15,16,17,97,104,105,108,110],"long":[4,5,11,13,14,16,58,72,98,110],"new":[4,5,6,7,8,10,11,12,13,14,15,16,17,18,33,50,59,63,88,90,91,96,97,101,107],"null":[8,9],"public":[4,5,11,13,14,16,20,46,47,50,55,58,68,71,72,81,101,107,108],"return":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,50,55,61,72,87,89,90,91,93,98,99,100,101,103,104,107,109,110],"short":[4,5,11,13,14,16,52,54,56,72,73,110],"super":87,"switch":[16,35],"transient":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],"true":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,35,39,41,42,43,45,50,52,53,57,58,65,66,67,69,72,73,74,82,86,91,92,97,98,99,101,107,109],"try":[4,5,11,12,13,14,15,16,17,32,58,107],"var":[4,5,11,13,14,16],"while":[4,5,7,9,11,12,13,14,16,40,43,88,90,91,94,96,97,101,104,105,107,110],A:[4,5,6,7,8,9,10,11,12,13,14,16,20,33,85,90,101,105,107,110],And:[16,35],As:[4,5,11,13,14,16,40,46,57,65,81,85,91,94,101,107,110],At:[4,5,11,13,14,16,65,71],But:[12,50],By:[4,5,11,12,13,14,16,32,86,90,93,101,105,107],For:[4,5,7,9,11,12,13,14,16,20,39,41,45,52,55,58,69,71,72,73,81,83,90,93,97,98,101,103,104,105,106,107,108,109,110],IN:[9,18],If:[4,5,6,7,9,10,11,12,13,14,15,16,17,18,20,33,34,50,92,97,98,101,103,104,105,107],In:[4,5,6,9,10,11,12,13,14,15,16,17,33,36,37,39,40,41,45,46,50,52,66,67,69,70,71,81,83,90,92,93,96,98,101,105,110],It:[4,5,11,13,14,16,34,39,41,66,69,77],No:[4,5,6,7,9,11,12,13,14,15,16,17,90,107],Not:[4,5,11,13,14,16],OR:12,On:[65,104],One:[4,5,11,13,14,16,40,47,52,55,72,103],That:[10,49],The:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,84,85,86,87,88,91,92,93,95,97,98,99,101,102,103,104,105,107,109],Then:[4,5,11,13,14,16,34,46,47,69,108],There:[4,5,10,11,12,13,14,16],These:[4,5,11,13,14,16,33,81,89,90,91,92,97,101,102,105,106,107,108,110],To:[4,5,11,12,13,14,16,32,34,39,41,43,45,52,57,58,79,85,91,93,97,98,101,105,107,110],With:[4,5,11,13,14,16,82,98],_:[13,14,15,16,17,32,59,63,71,101],__attributes__:12,__init__:32,__main__:[4,5,11,13,14,16,42],__name__:42,_array_interface_:[4,5,11,13,14,16],_as_parameter_:[4,5,11,13,14,16],_ctype:[4,5,11,13,14,16],_glitch_:73,_glitches_:66,_injection_:[39,69],_intern:[4,5,11,13,14,16],_most_:43,_name_:101,_notes_:12,_reading_:[91,101],a1:20,a_list:[4,5,11,13,14,16],a_tolist:[4,5,11,13,14,16],aa:12,aaa:7,aastex:12,ab:[4,5,11,13,14,16,39,45,66,71],abbott:[50,58],abil:10,abl:[70,105],about:[4,5,11,13,14,15,16,17,50,90,101,107,110],abov:[4,5,8,11,13,14,16,50,71,80,83,89,92,93,98,99,100,101,103,106,107,109,110],above_2915:110,above_29_2:110,absolut:[4,5,11,13,14,16,32,104],ac:50,acc:[36,53],acceleromet:[36,53],accept:[4,5,6,7,9,11,12,13,14,15,16,17,86,91,101,104],access:[4,5,11,12,13,14,15,16,17,32,33,66,68,74,89,100,105,107,109],accommod:[4,5,11,13,14,16],accompani:[11,13,14,16],accomplish:69,accord:[4,5,9,11,12,13,14,16,18,33],accur:[4,5,7,11,13,14,16,71],achiev:[14,98,109],acknowledg:20,acquisit:101,acronym:7,across:[16,40,58,74],action:[4,5,6,11,13,14,16,32],activ:[6,7,9,12,13,16,27,45,88,89,90,91,92,107,110],actual:[4,5,11,12,13,14,16,34,61,62,64,71,90,91,97,99,110],ad:[4,5,6,7,8,10,11,12,13,14,16,39,50],adapt:[83,109],adc:[13,14,15,16,17,107],add:[4,5,6,7,11,12,13,14,16,32,39,50,69,97,109],add_column:[12,59,63],add_index:12,add_row:12,add_segments_bar:45,add_subplot:[4,5,6,7,11,12,13,14,16,40,81,83,99],addit:[2,3,9,10,12,16,91,97,101,105,107],addition:[4,5,11,13,14,16,81,93,96,101,104,107],address:[6,7],advanc:[6,7,66],affect:[4,5,10,11,13,14,15,16,17],after:[4,5,11,13,14,16,39,67,101,107],again:[4,5,11,13,14,16,56],against:[4,5,11,12,13,14,16,56,71,103],al:[2,3,20,50,58],alarm:110,alexand:20,algorithm:[4,5,9,11,12,13,14,16,52,61,62,64,71,72,81,90,101],alia:[4,5,11,13,14,16],align:[4,5,11,12,13,14,16],all:[4,5,6,7,9,10,11,12,13,14,15,16,17,18,32,33,34,42,44,49,50,71,74,80,81,89,90,91,104,107,108],all_intersect:10,all_intersects_al:10,alloc:[4,5,11,13,14,16],allow:[4,5,11,12,13,14,15,16,17,32,33,34,40,43,58,78,81,84,91,94,97,99,101,104,107,109],allow_tap:[13,14,15,16,17],almost:[4,5,11,13,14,16,50,81,91],along:[4,5,11,13,14,16,96],alongsid:[4,11,13,14,16,33,49,73,77,97,106,110],alpha:98,alphanumer:7,alreadi:[4,5,9,11,12,13,14,16,66,91,97,101,107],also:[10,20,40,43,49,66,73,74,80,82,83,86,89,101,105,106,107,108],alter:[4,5,11,13,14,16],altern:[4,5,11,12,13,14,16,91,109,110],although:[4,5,11,13,14,16,66],alwai:[4,5,11,13,14,15,16,17,40,71,94,98],amax:[4,5,11,13,14,16],amin:[4,5,11,13,14,16],among:[4,5,11,12,13,14,16],amount:[4,5,7,10,11,13,14,16,43,45,50,93,110],amp:16,amplitud:[5,11,16,29,37,39,40,42,43,46,50,55,56,58,69,70,74,82,83,93,94,96,97,101,106,107,109],an:[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,21,22,32,33,34,36,38,39,43,44,45,53,54,60,65,67,69,70,71,74,85,86,87,90,91,92,93,95,96,97,98,99,102,103,105,107,108,110],analog:[4,11,12,16,50,84,96,107],analogu:[50,93],analys:[16,81,90,103,110],analysi:[39,61,62,64,69,77,79,81,89,90,92,98,101],analysis_readi:[89,90,91],analyst:52,anchor:[12,82],angl:[2,3,30,47],ani:[4,5,6,7,10,11,12,13,14,15,16,17,18,58,74,78,80,84,85,86,89,92,93,94,96,99,101,104,105,106,107],annot:90,announc:[34,50,58],anoth:[4,5,11,12,13,14,16,33,40,42,86],anti:[4,5,11,13,14,16],anyth:[6,15,17,42,70,87,88],anywai:[90,98],api:[4,5,11,13,14,16,32,79,105,107],app:12,appear:[4,5,10,11,12,13,14,16,34],append:[4,5,9,10,11,12,13,14,15,16,17,18,45,91,97,101,107],appli:[4,5,6,7,9,10,11,12,13,14,15,16,17,18,50,67,71,89,90,92,93,101,107,110],applic:[9,12,50,79,93,106],approach:[4,5,11,12,13,14,16],appropri:[4,5,7,11,12,13,14,15,16,17,105],approv:12,approxim:[16,71],ar:[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,32,33,34,35,39,43,61,62,66,67,70,71,74,77,79,83,85,86,89,90,91,92,93,94,96,97,100,101,102,103,104,106,107,110],arang:[4,5,11,13,14,16,88],arbitrari:[4,5,11,13,14,16,86,94,95,101],arbitrarili:[4,5,11,13,14,16],archiv:[50,78,105,106,107,108],area:[4,5,11,13,14,16],areeda:[20,32],aren:[15,16,17,101],arg:[4,5,6,7,9,10,11,12,13,14,15,16,17,87,104],argmax:[4,5,11,13,14,16],argmin:[4,5,11,13,14,16],argpartit:[4,5,11,13,14,16],argsort:[4,5,11,12,13,14,16],argument:[2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,32,72,91,92,93,98,99,101,103,104,105,109],arithmet:[8,9],arm:[36,74,106],around:[0,2,4,5,11,13,14,16,23,24,25,26,27,28,29,30,31,37,40,41,43,46,47,50,52,55,56,57,58,70,71,72,73,74,90,105,107,108,109],arr:[4,5,11,13,14,16],arr_t:[4,5,11,13,14,16],arrai:[4,5,11,12,13,14,15,16,17,39,93,94,97,98,101,110],array_lik:[4,5,11,13,14,16],artefact:[16,50,58],articl:[20,50],artifact:69,arxiv:16,as_arrai:12,as_paramet:[4,5,11,13,14,16],as_strid:[4,5,11,13,14,16],asc:74,ascend:[9,18],ascii:[12,96],asd:[16,32,37,38,41,43,56,58,67,82,94,96],asd_kw:16,asdax:41,ask:[13,14,15,16,17,34],assert:[4,5,10,11,13,14,16],assign:[4,5,10,11,13,14,16],assist:[9,10],associ:[4,5,6,7,10,11,12,13,14,16,41,58,68,79,89,105,107],assum:[2,3,5,6,7],assymetr:[4,5,11,13,14,16],astro:[0,1,2,3,19,46,47],astronom:66,astrophys:[20,52,66,68,79,81,100],astropi:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],astyp:[4,5,11,12,13,14,16],attach:[4,5,11,13,14,16,36],attempt:[4,5,11,12,13,14,15,16,17,101,103,105,107],attenu:[16,93],attr:[6,91],attribut:[4,5,6,7,8,10,11,12,13,14,15,16,17,18,33,90,91,110],attributeerror:[4,5,11,13,14,16],au:20,augment:81,august:30,authent:[101,107],author:[20,34,90],authoris:105,auto:[4,5,6,7,9,11,12,13,14,15,16,17,45,81,82,83,86,101],auto_coher:16,automat:[6,12,16,34,85,86,101,104,106],automodapi:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],autoscal:99,aux:66,auxiliari:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110],avail:[4,5,6,7,9,10,11,12,13,14,15,16,17,19,32,45,70,71,83,85,86,93,104,108],averag:[2,3,4,5,11,13,14,16,30,38,43,46,47,53,65,93,96,105],average_fft:16,avoid:[4,5,11,12,13,14,16,69],awai:16,ax1:[50,65],ax2:[50,65],ax:[4,5,6,7,11,12,13,14,16,37,40,41,43,45,46,47,49,50,52,53,55,56,57,58,59,61,62,64,65,66,67,71,72,73,74,81,82,83,85,86,87,88,94,96,99,102,103,109,110],axi:[4,5,11,12,13,14,16,32,52,63,64,66,72,85,88,99,102,109],axis1:[4,5,11,13,14,16],axis2:[4,5,11,13,14,16],axvlin:[73,109],b:[4,5,11,12,13,14,16,20,33,90],b_1:12,back:[4,5,11,12,13,14,16,39,71],background:[52,66],backport:101,backward:[4,5,11,13,14,16,50],bad:[13,14,90,110],band:[11,16,40,41,43,55,56,58,65,74,84,92,93],bandpass:[16,50,81,82,83,84,85,93],bandwidth:[16,52,64,101,102],bank:71,bar:[6,7,12],bartlett:[16,93],base:[2,3,4,5,11,12,13,14,16,32,52,70,77,79,85,88,91,92,97,98,101,105,107],basetyp:[4,5,11,13,14,16],bash:34,basi:89,basic:[12,32,71,79,90,100],bb:12,bbb_ccc_ddd:7,bbox_to_anchor:37,beam:[21,22,36],becaus:[4,5,11,13,14,16,39,56,88,101,110],becom:[4,5,11,13,14,16],been:[4,5,6,7,9,11,13,14,16,49,58,69,81,83,85,90,98],befor:[4,5,6,7,9,11,12,13,14,15,16,17,18,32,39,42,46,50,52,67,69,74,91,101,103,107],beg:81,begin:[4,5,6,11,12,13,14,15,16,17,50],behav:[4,5,11,13,14,16],behavior:[4,5,11,12,13,14,16],behaviour:[4,5,9,11,13,14,16,41,43],behind:[4,5,11,13,14,16],being:[4,5,11,13,14,16,41,55,67,98],belczynski:[2,3],below:[4,5,6,7,8,9,11,12,13,14,15,16,17,20,32,39,52,58,66,69,74,87,88,99,101],best:[16,90],better:[55,82],between:[4,5,11,12,13,14,16,21,22,32,38,42,50,54,66,68,92,93,104,105],bewar:[4,5,11,13,14,16],bia:[13,14,15,16,17],bibtex:20,big:[4,5,11,13,14,16],bin:[5,11,12,16,43,57,59,60,99],binari:[2,3,14,30,39,46,47,52,58,69,72,101,107,110],bind:[75,76,77,78],binned_event_r:[12,62,103],bit:[4,5,11,13,14,15,16,73,79,81],bitmask:110,bitseri:14,black:[39,58,69,72,110],blank:[13,15,16,17],blind:71,blip:[12,101],block:[4,5,11,13,14,16],bloomberg:12,bn:[30,46,47],bode:84,bodeplot:[42,86,93],bogu:13,bokeh:12,bool:[2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,33,107],bootstrap:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],borrow:[4,5,11,13,14,16,81],bot:34,both:[4,5,7,9,10,11,12,13,14,16,28,41,49,50,52,53,66,72,74,81,90,91,97,101,105,107,110],bothon:49,bottom:[52,72],bound:[7,8,9,11,16],boundari:[7,10,13,16,74],box:34,bp:[16,50,93],bpseri:16,branch:34,breakfast:12,broadcast:[4,5,11,12,13,14,16],brows:12,browser:[4,5,11,12,13,14,16,89],bs_blrms_z_3_10:92,bst:12,buffer:[4,5,11,13,14,15,16,17],buffer_:[13,14,16],bug:[4,5,11,13,14,16,32,34],build:[6,7,11,34,45,63,79,86,90],built:[4,5,6,7,9,10,11,12,13,14,15,16,17,33,86,91,97,100,106],builtin:[4,5,11,13,14,16],bulk:[90,107,108],bump:41,burst:[0,1,13,14,16,19,61,62,64,73,101],burst_cat1:110,burst_cat2:110,burst_cat3:110,butterworth:16,bypass:[4,5,11,13,14,16],byteord:[4,5,11,13,14,16],bytestr:12,byteswap:[4,5,11,13,14,16],c99:81,c:[4,5,10,11,12,13,14,16,32,34,65,75,76,77,78,80,81],c_contigu:[4,5,11,13,14,16],c_doubl:[4,5,11,13,14,16],c_int:[4,5,11,13,14,16],c_intp:[4,5,11,13,14,16],c_long:[4,5,11,13,14,16],c_long_array_2:[4,5,11,13,14,16],c_longlong:[4,5,11,13,14,16],c_short:[4,5,11,13,14,16],c_uint32:[4,5,11,13,14,16],c_uint64:[4,5,11,13,14,16],c_uint:[4,5,11,13,14,16],c_ulong:[4,5,11,13,14,16],c_void_p:[4,5,11,13,14,16],ca:[4,5,11,13,14,16],cach:[4,5,11,12,13,14,15,16,17,32,35],cal:101,cal_darm_dq:67,calcul:[0,1,2,3,4,5,9,11,12,13,14,16,19,38,40,41,45,46,54,55,56,57,58,60,62,67,68,79,82,85,93,96,100,101],calib_strain:[21,22,32,36,53,66],calibr:[13,14,15,16,17,67,71,90,105,107,108],call:[4,5,6,9,11,12,13,14,15,16,17,19,32,37,42,43,45,49,55,56,58,66,70,74,86,89,90,91,93,98,101,105,106,108],callabl:[6,12,13,82,103],caltech:[32,34],can:[0,2,4,5,6,9,11,12,13,14,16,18,19,32,33,35,36,37,39,40,41,42,43,45,46,47,49,50,52,53,55,56,57,58,59,61,62,63,64,65,66,67,69,70,71,72,73,74,75,76,77,78,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,105,107,108,109,110],cannot:[4,5,11,12,13,14,16,101,103,104,108],capabl:[75,76,77],captur:33,care:[9,81],carefulli:[4,5,11,13,14,16],carrai:[4,5,11,13,14,16],carri:74,cascad:[16,93],cast:[4,5,10,11,13,14,16,101,104,107],cat1:[13,14,16],cat2:[13,14,16],cat3:[13,14,16],catalog:12,catalogu:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,105,106,107,108,109,110],categori:7,caus:[4,5,11,13,14,16,46,47,66],cbc:[13,14,16,71],cbc_cat1:110,cbc_cat2:110,cbc_cat3:110,cbcwaveform:[2,3],cd:[12,34],ceg:[4,5,11,13,14,16],center:[12,13,14,16,32,65,71,107],centr:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],central:[16,101,108],central_freq:[64,101,102,103],centuri:85,certain:[4,5,11,12,13,14,16,41,69],cg:[4,5,11,13,14,16],chain:98,chamber:66,chan:[21,22,30,32,33],chang:[4,5,10,11,12,13,14,16,79,94,100,106],channel:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,106,109,110],channellist:[15,17],charact:[7,12,13,14,16,98],character:[72,101],characteris:[105,110],characterist:96,chebyshev:16,check:[4,5,11,12,13,14,15,16,17,34,66,73,110],checkout:34,chi_eff_upp:98,chi_snr:101,chirp_mass:63,chirp_mass_low:101,chirp_mass_sourc:63,chirp_mass_source_low:101,chisq:101,chisq_dof:101,choic:[4,5,11,13,14,16],choos:[4,5,11,13,14,16],chose:58,chosen:85,chrome:12,chunk:16,ci:34,circular:2,circumst:[4,5,11,13,14,16],cit:[6,7],citat:20,cite:79,citizen:101,cividi:46,classifi:101,classmethod:[4,5,6,7,9,11,12,13,14,15,16,17,33,89,90],cleaner:[33,105],clear:[4,5,6,9,10,11,13,14,15,16,17,18,66],clearli:[36,52,66,69,71,72,85],click:[20,79],client:[13,14,15,16,17,78],clim:[45,46,52,53,64,66,82,102],clip:[4,5,11,13,14,16],close:[4,5,9,11,13,14,16,66,107],cluster:[12,16],cluster_window:16,cm:[4,5,11,13,14,16],cmap:[4,5,11,13,14,16,24,43,45,46,52,53,56,57,58,64,66,72,102],co:16,coalesc:[6,7,8,9,10,16,18,72,91,101],code:[4,5,11,12,13,14,16,50,71,79,81,83,102,103],coeffici:[4,11,16,41,93],coh:[36,53],coher:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,105,106,107,108,109,110],coherence_spectrogram:[16,53],coherencegram:[22,32],coinc:[12,101],coincid:[52,101],col0:12,col1:12,col2:12,col:12,col_b:12,col_c:12,col_d:12,collabor:[32,72,79,89,90,91,101,104,105,107],collaps:[4,5,11,13,14,16],collect:[10,16,18,33,77,81,86,90,98,106,110],colloqui:106,colnam:12,colon:90,color:[12,16,37,40,47,49,50,52,63,64,70,73,81,82,83,86,102,109],colorbar:[45,46,52,53,55,56,57,58,63,64,66,72,86,94,102],colormap:52,colour:[37,52,63,86,102],coltyp:7,column:[4,5,9,11,12,13,14,16,59,60,61,63,64,97,98,99,101,102,103,107],column_filt:12,columnclass:12,com:[12,20,32,34],combin:[8,14,50,79,91,93,94,101,107,109],come:[4,5,11,13,14,16,86,93,96,98,99,101],comma:9,command:[34,79,89,107],comment:[92,101],commented_head:12,commit:34,common:[4,5,11,13,16,20,32,43,45,79,93,101,106],commonli:101,comov:[2,3],compact:[2,3,12,72,101,110],compar:[4,5,8,11,12,13,14,16,32,50,68,71,91,93,101,103],comparison:[12,16,41,66,110],compat:[4,5,11,12,13,14,16,77],compil:[4,5,11,13,14,16],complement:[16,90,91,101],complet:[4,5,10,11,13,14,16,34,39,74,81,89,107],complex128:[4,5,11,13,14,16],complex:[4,5,11,13,14,16,42,110],complexwarn:[4,5,11,13,14,16],complic:[4,5,11,13,14,16,98],compon:[2,3,7,47,63,77,90],compress:[4,5,11,13,14,16],comput:[4,5,10,11,13,14,16,34,42,51,75,105,107],concaten:[18,50,93],concatenate_zpk:[16,50,93],concern:19,concurr:12,conda:[32,75,76,77,78],condit:[4,5,11,13,14,16,66,71,90,103],conf:12,confid:[12,59,63,73,101],configur:[4,5,11,12,13,14,16,79,90],conflict:12,congratul:50,conj:[4,5,11,13,14,16],conjug:[4,5,11,13,14,16],conlog:14,connect:[4,5,8,11,12,13,14,15,16,17,78],consecut:[4,5,11,13,14,16],consid:[10,16,104],consist:[4,5,9,11,13,14,16,50],constant:16,constraint:80,constrast:16,construct:[4,5,9,11,13,14,15,16,17,90,96,110],constructor:[6,7,11,13,14,15,16,17,33,86],consult:101,consum:[4,5,11,13,14,16],contain:[4,5,6,7,9,10,11,12,13,14,15,16,17,18,32,33,61,62,64,81,91,93,97,98,100,101,103,105,107,108,109,110],content:[4,5,10,11,12,13,14,16,43,50,55,58,66,67,74,91,93,101,103,107],context:[4,5,11,12,13,14,16],contigu:[4,5,11,13,14,16,18],continu:[9,16,34,101],contract:[7,8,9,10,50,85],contribut:[34,44,50,96,97],control:[4,5,11,12,13,14,16,33,92,96,105,106,110],conveni:[4,5,11,13,14,16,94,102,104],convent:[33,90,92,101],convers:[4,5,11,12,13,14,16,90],convert:[4,5,6,7,9,11,12,13,14,16,55,71,104,107,110],convert_bytestring_to_unicod:12,convert_unicode_to_bytestr:12,convolut:16,convolv:16,coolwarm:57,coordin:[4,5,11,12,13,14,16],copi:[4,5,6,7,9,10,11,12,13,14,15,16,17,18,33,34],copy_data:12,copy_indic:12,copy_on_getitem:12,copyright:34,copyto:[4,5,11,13,14,16],core:[4,5,11,13,14,16,77,81,90,110],corner:[16,93],correct:[2,3,4,5,11,13,14,16,50,69,101,105],correctli:[4,5,11,13,14,16],correl:[16,36,68,71,93],correspond:[4,5,9,10,11,12,13,14,16],corrupt:[16,50,74],cosmolog:[2,3],cost:10,coughlin:20,could:[4,5,11,13,14,16,98,109],count:[4,5,8,9,10,11,13,14,16,18,43,74],counter:99,coupl:[36,81,92],cover:[4,5,8,11,13,14,16,108],cpu:[6,7,12,16,107],crash:[4,5,11,13,14,16],creat:[4,5,6,7,10,11,12,13,14,15,16,17,34,39,50,63,69,81,86,93,99,100,101,106],create_artist:87,create_engin:12,creation:[4,5,11,13,14,16],credenti:[66,74,101,105],credit:90,criteria:98,critic:73,crop:[4,5,11,13,14,15,16,17,50,58,66,71,82,85],crop_frequ:[11,58],cross:[16,68,93],crucial:36,cs_acc_psl_periscope_x_dq:[21,22,32,36,53],csd:16,csd_spectrogram:16,css:12,csv:[4,9,12,13,14,16],ctype:[4,5,11,13,14,16],ctypeslib:[4,5,11,13,14,16],cumprod:[4,5,11,13,14,16],cumsum:[4,5,11,13,14,16],cumul:[4,5,11,13,14,16],current:[4,5,6,10,11,12,13,14,16,19,34,70,85,93,101],curv:56,custom:[12,16,32,35,85,86,88,91,97,98,100,101,107],customis:[79,105,109],cut:[2,16,50,69,110],cutoff:[0,93],cvmf:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],cwb:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],d:[4,5,6,10,11,12,13,14,15,16,17,20,60,65,102],da:20,dai:[12,44,85,89],daili:89,damp:36,daophot:12,dark:110,dash:12,data2:[4,11,16],data:[0,1,2,3,4,5,6,7,10,11,12,13,14,15,16,17,18,21,22,23,24,25,26,27,28,33,36,37,39,40,41,42,43,44,46,47,49,50,52,53,55,56,57,58,61,62,64,65,66,67,68,69,71,72,73,74,75,76,77,78,81,82,85,87,89,91,93,94,98,103,104],data_a:[4,5,11,13,14,16],databas:[6,7,12,13,14,15,16,17,33,90],datafind:105,datafram:12,dataqu:89,dataqualitydict:[14,79],dataqualityflag:[6,13,14,16,45,49,79,89,91,92,110],dataset:[7,52,70,86,91,97,100,101,107,108,110],datat:12,datatyp:[4,5,7,11,13,14,16],date:[7,12,32,34,45,59,104,107],datepars:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],datetim:104,datetime64:12,dateutil:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],db:[16,93],dc:[4,11,16,67],dch:[7,92],ddof:[4,5,11,13,14,16],de:67,deadtim:16,deal:110,dealloc:[4,5,11,13,14,16],debug:[13,16],dec:[12,41,57],decibel:84,decim:[4,5,11,12,13,14,16,88],declar:12,declare_namespac:32,decompos:[4,5,11,13,14,16],decreas:16,dedic:12,deep:[4,5,6,11,12,13,14,16],def:[87,98],default_css:12,default_css_nb:12,default_nam:12,default_notebook_table_class:12,default_segment_serv:[6,7],defin:[2,3,4,5,6,7,8,11,12,13,14,15,16,17,35,65,75,76,90,98,101,102,103],definit:[4,7,9,11,12,14,91,98],deg:[12,16],degre:[16,84],del:12,delimit:[4,5,11,13,14,16],delta:[4,5,11,12,13,14,16,32],delta_f:71,deltal_external_dq:101,demodul:16,demonst:[41,43,57,110],demonstr:[45,49,58,66,70,74,98,110],denomin:[4,11,16],denot:[9,90],dens:54,densiti:[0,1,2,3,5,11,16,25,26,27,28,37,40,41,43,46,55,71,79,83,96],depend:[1,4,5,9,11,12,13,14,15,16,17,34,54,73,75,76,77,80,91,93,96,97,101,105,107],deploy:34,deprec:[4,5,11,12,13,14,16,32],deprecationwarn:32,depth:[4,5,11,13,14,16,70],deriv:[16,33,81],descend:[9,18],describ:[4,5,11,12,13,14,16,32,33,34,57,96,97,100,103,105,110],descript:[4,5,7,11,12,13,14,16,90,91,101,105,110],descriptor:[4,5,11,12,13,14,16,101],design:[15,16,17,33,50,79],desir:[4,5,11,12,13,14,16,43,97],despit:55,detail:[4,5,9,10,11,12,13,14,15,16,17,18,25,26,27,29,32,33,49,52,58,72,73,87,91,93,97,98,101,107,108,110],detect:[2,3,4,5,6,7,9,11,13,14,15,16,17,19,29,37,41,43,47,51,55,57,58,59,61,62,63,64,66,70,71,72,73,83,92,93,101,107,108,110],detector:[19,26,27,29,30,31,33,37,40,45,46,47,50,52,61,62,64,66,67,68,72,73,78,79,81,92,96,101,105,106,110],determin:[4,5,11,12,13,14,16,32,45],detrend:16,deviat:[4,5,11,13,14,16],df:[2,4,5,11,12,39,71,94,96],dft:16,di:[4,5,11,13,14,16],diag:[4,5,11,13,14,16],diagnos:105,diagnost:107,diagon:[4,5,11,13,14,16],dict:[2,3,6,10,12,14,15,16,17,101,103,107],dictionari:[4,5,6,10,11,12,13,14,15,16,17],diff:[4,5,11,13,14,16],differ:[4,5,11,12,13,14,15,16,17,28,33,43,87,90,91,97,101,105,107,109],differenc:[4,5,11,13,14,16],differenti:[36,106],difficult:74,digit:[4,11,16,50,93,105],dim:[4,5,11,13,14,16],dimens:[4,5,11,13,14,16],dimension:[4,5,11,12,13,14,16,64,94,102],dimensionless:[13,14,16,106,110],dip:[41,46,47],direct:[4,5,11,13,14,15,16,17,21,22,64,65],directli:[4,5,11,12,13,14,16,33,46,47,50,82,86,91,92,93,101,104,105,109],disabl:[16,87,88],discard:[50,74],discard_on_copi:12,discern:74,discontigu:[4,5,11,13,14,16],discourag:[4,5,11,13,14,16],discov:[13,14,15,16,17,36,93,100,105],discover:[15,17,105],discoveri:106,discret:[4,5,11,13,14,16,58,103],disjoint:[8,9],disk:[6,7,13,15,16,17,33],dispasd:67,displac:67,displai:[4,5,11,12,13,14,16,32,37,40,43,45,49,56,61,67,73,84,85,99,110],display_length:12,displaystyl:[4,5,11,13,14,16],dist:34,distanc:[2,3,12,32,47,63],distil:110,distinct:[4,5,11,13,14,16],distinguish:[66,105],distribut:[16,59,63,107],divisor:14,dmt:[7,30,89,90,91],doc:[4,5,11,12,13,14,16,34,75,77],document:[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,34,75,76,77,79,81,89,93,99,100,101,106,107,108,110],dodgerblu:16,doe:[2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,105],doesn:[4,5,11,13,14,15,16,17,40,98,101,104,105],doi:[2,3,20,34],domain:[4,11,16,36,39,40,55,69,79,84,94,106,108],domin:70,don:[12,16,81,82],done:[4,5,11,12,13,14,16,34,45,52,101,109],doppler:16,dot:[4,5,11,13,14,16,32],doubl:[16,34],doubt:98,down:[4,5,11,13,14,16,49,98],download:[7,12,13,14,15,16,17,33,35,37,45,49,50,52,55,56,58,59,63,69,70,72,73,98,101,105,108,110],downsampl:[14,16],downselect:[12,107],downstream:[61,62,64],dpi:[16,32],dq:[32,33],dqdict:6,dqflag:[7,13],dqsegdb2:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],dqsegdb:[6,7,91],draft:34,draw:86,drawn:85,driven:79,drop:[4,5,11,13,14,16,58],dt:[11,12,13,14,16,94,106,110],dtype:[4,5,11,12,13,14,15,16,17,33,101],due:[12,16],dump:[4,5,11,13,14,16,91],duncan:[20,32,34],duplic:[10,12],durat:[7,9,13,14,16,21,22,23,24,25,26,27,28,29,30,32,52,54,64,72,101,102],dure:[4,5,6,7,11,13,14,16,49,66,90,91,110],dwarf:74,dx:[2,3,4,5,11,13,14,16],dy:[5,11],dynam:[13,15,16,17,55],e:[4,5,6,7,9,10,11,12,13,14,15,16,17,18,34,40,41,77,83,86,90,93,98,101,105],each:[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,32,33,35,37,43,45,50,57,58,65,67,71,79,82,85,86,89,90,91,93,96,97,101,103,105,106,107,108,109,110],earth:16,earthquak:65,easi:[18,41,79,81,104],easier:[4,5,11,13,14,16,39,81,110],easiest:50,easili:[9,39,42,50,65],ecsv:12,edg:[5,11,12,16,93,103],ediff1d:[4,5,11,13,14,16],edu:32,effect:[10,12,13,14,15,16,17,39,74,81],effici:107,either:[4,5,6,7,10,11,12,13,14,15,16,17,90,93,96,98],electron:90,element:[4,5,6,9,11,12,13,14,15,16,17,18,86,97,98,101],els:[6,10,15,17,42],elsewher:[4,5,11,13,14,16],emphasis:29,emploi:74,empti:[4,5,7,9,10,11,12,13,14,16,18,87],en:[12,32],enabl:[16,86,90,91,97,101,105,107,110],enclos:7,encod:12,encompass:[4,5,11,13,14,16],end:[4,5,6,7,8,9,11,12,13,14,15,16,17,18,33,42,45,50,52,61,62,69,81,98,101,103,105,107,108,110],end_tim:[12,101],endian:[4,5,11,13,14,16],endnod:20,energi:[0,1,16,52,66,72,82],engin:[12,107],enhanc:[58,66,74,90,100],enlarg:[4,5,11,13,14,16],enough:[4,5,11,13,14,16,66,91],ensur:12,entir:[4,5,11,12,13,14,16,107,108],entireti:108,entri:[4,5,6,10,11,12,13,14,15,16,17,18,33,90],env:32,environ:[6,7,13,14,16,79,105],environment:[33,66,106,107],epoch:[4,5,11,12,13,14,16,23,29,32,45,50,70,73,86,90,94,96,97,103,104,108,110],equal:[4,5,9,11,13,14,16,18],equiv:[4,5,11,13,14,16],equival:[4,5,10,11,12,13,14,16,77,101,104],er:20,era:16,error:[4,5,6,11,13,14,16,32,33,67,106],especi:12,essenti:94,estim:[16,21,22,32,44,47,79,101],et:[2,3,20,50,58],etc:[4,5,11,13,14,16,32,97],evalu:[4,5,11,12,13,14,16],even:[4,5,11,12,13,14,16,56],event:[12,13,14,16,40,46,47,56,58,59,61,62,63,64,66,69,70,98,99,100,105,107,108,110],event_gp:[52,70,105,108,110],event_r:[12,61,103],eventapi:101,eventt:[16,60,79,98,99,102,103],eventu:[13,15,16,17,93],ever:[50,72,108],everi:[16,43,53],everyth:[34,58],evid:66,evolut:[16,69,94],exact:[7,56,104],exactli:[4,5,6,7,8,9,11,13,14,16,73,90],examin:[16,69],exampl:[0,2,4,5,7,8,9,10,11,12,13,14,16,21,22,23,24,25,26,27,28,29,30,31,33,35,39,40,45,46,49,53,55,56,66,67,69,70,71,74,81,83,84,86,87,90,92,93,94,96,97,98,99,100,101,102,103,104,106,107,108,109,110],exce:16,exceed:92,excel:[90,93,100,101,104],except:[4,5,6,11,12,13,14,15,16,17,40,107],excess:[74,105],excesspow:[61,62,64],excis:[73,110],excit:14,exclud:101,exclus:9,excurs:43,execut:9,exhibit:[4,5,11,13,14,16],exist:[4,5,6,7,9,10,11,12,13,14,15,16,17,91,97,101,107],exit:[12,32],exp:16,expand:[7,12,96],expect:[4,5,9,11,13,14,16],explain:32,explan:[4,5,11,13,14,16,45],explicit:[9,12],explicitli:[11,33],expon:[4,5,11,13,14,16],exponenti:16,expos:[4,5,11,13,14,16,105],express:[9,15,17,101],extend:[9,10,12,18,81,82,93,94,100,101],extended_metadata:101,extens:[32,33,81,86,90,91,97,101,107],extent:[4,5,7,9,10,11,12,13,14,15,16,17],extent_al:10,extobj:[4,5,11,13,14,16],extra:[12,77,89,91,101],extract:[9,40,70,71,93,98,101],extract_common:10,extrani:50,extrem:[46,47],ey:[4,5,11,13,14,16],f0:[4,5,11,16,39,94,96,97],f:[4,5,6,10,11,12,13,14,15,16,17,69,91],f_contigu:[4,5,11,13,14,16],f_final:71,f_lower:71,f_out:33,f_out_dq:33,fa:[4,5,11,13,14,16],fac:[4,5,11,13,14,16],factor:40,fail:[4,5,11,13,14,15,16,17,110],faith:66,fall:[4,5,11,13,14,16],fals:[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,32,35,37,66,84,94,96,101,110],familiar:[55,106],fanci:18,fantast:86,far:19,farrai:[4,5,11,13,14,16],fast_bas:12,fast_commented_head:12,fast_csv:12,fast_no_head:12,fast_rdb:12,fast_tab:12,faster:[4,5,9,11,12,13,14,16,107],fatal:32,favour:[4,5,11,13,14,16],fc:16,fdict:91,fdot:16,fdurat:16,featur:[10,12,52,55,56,57,58,72,74,80,101],feedstock:34,fepoch:16,fetch:[6,7,12,13,14,15,16,17,45,46,47,71,92,101,108,110],fetch_open_data:[0,2,7,12,13,14,16,37,40,41,43,45,46,47,49,50,52,55,56,57,58,59,63,70,71,72,73,81,82,83,85,86,98,101,105,107,109,110],few:[12,34,40,43,45,56,74,104],fft:[4,16,39,41,55,56,57,58,71],fftconvolv:16,fftgram:16,fftlength:[0,2,16,36,40,43,45,46,47,53,55,56,57,58,82,94],fhigh:[16,93],fid:[4,5,11,13,14,16],field:[4,5,11,12,13,14,16],fifo:[6,15,17],fig2:69,fig:[82,83,87,88],figsiz:[7,11,13,15,16,17,39,45,46,47,50,65,66,72,81,82,83,86],figur:[4,5,6,7,11,12,13,14,16,32,40,41,47,50,72,81,82,83,85,86,87,88,99,109,110],file1:107,file2:107,file3:107,file4:107,file:[4,5,6,7,9,11,12,13,14,15,16,17,32,33,35,61,62,64,91,97,100,105,106],filenam:[4,5,7,9,11,12,15,17,32,97,101,107],fill:[4,5,6,7,11,12,13,14,15,16,17,18,106],fill_valu:12,filled_t:12,filt:[4,11,16],filtdata:16,filter:[4,11,12,16,32,51,58,68,70,71,72,74,79,82,83,86,94,96,100],filter_design:[16,50,84,93],filterba:4,filtfilt:[16,50],final_mass_source_low:101,final_mass_source_upp:98,find:[4,5,9,10,11,13,14,15,16,17,33,52,65,101,105,107],find_gat:16,fine:[4,5,11,13,14,15,16,17,58],finish:34,fir:[4,11,16,93],fir_from_transf:16,firefox:12,first:[2,3,4,5,8,9,10,11,12,13,14,16,18,36,39,40,45,46,47,49,50,52,53,55,59,61,62,63,64,65,66,67,69,70,71,72,73,74,92,98,107,108,109,110],firstli:70,firstnam:12,firwin:93,fit:[4,5,11,12,13,14,16,81],five:[4,11,14,16,67],fix:[4,5,6,11,13,14,15,16,17,34,41,50,86],fixed_width:12,fixed_width_no_head:12,fixed_width_two_lin:12,flag2:[6,7],flag:[4,5,6,7,9,11,13,14,16,18,45,89,90,110],flagdict:6,flat:[4,5,11,13,14,16,86],flatit:[4,5,11,13,14,16],flatten:[4,5,11,13,14,16],flip:[13,14],float32:[4,5,11,13,14,16],float64:[4,5,11,12,13,14,16,101],float_:[4,5,11,13,14,16],float_a:12,flow:[16,93],fluctuat:16,fly:[6,7,101],fmax:[0,2,46],fmin:[0,2,46,47],fnc:[4,5,11,13,14,16],focus:[52,72],follow:[4,5,6,7,9,10,11,12,13,14,15,16,17,32,33,34,35,50,79,80,82,88,90,91,93,94,96,97,99,100,101,103,105,106,107,110],fontsiz:[40,41,65,66,74],foo:12,footprint:16,forc:[4,5,7,11,13,14,16,91,97,101,107],forcefulli:[4,5,11,13,14,16],foreground:52,forg:[34,75,76,77,78,80],form:[4,5,7,11,12,13,14,16,32,98,103],format:[4,5,6,7,9,11,12,13,14,15,16,17,20,32,61,62,63,64,65,67,69,75,76,85,88,91,93,100,104,106,110],format_:12,formatt:88,former:[4,5,11,13,14,16],fortran:[4,5,11,13,14,16],fortun:66,forward:[4,5,7,11,12,13,14,16,50],found:[4,5,6,7,10,11,12,13,14,15,16,17,77],four:[4,5,9,11,13,14,16],fourier:[4,16,36,53,84],fp:6,fr:76,fraction:[4,5,11,13,14,16,85,105],framcach:32,frame:[2,13,14,15,16,17,33,101],framecach:32,framecpp:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],framel:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],frameon:37,frametyp:[13,14,15,16,17,32,33,105],frametype_match:[15,17],framework:101,frang:16,fre:16,free:[4,5,11,13,14,16],freeli:[70,105,107],freez:12,frequenc:[0,1,2,4,5,11,12,16,32,33,36,39,40,41,43,45,50,52,53,55,56,57,58,64,66,67,70,71,72,74,79,82,94,101,102],frequency_rang:33,frequencyseri:[0,1,2,3,5,11,16,40,41,42,43,53,67,71,79,93,94,95,107],fresh:[4,5,6,7,11,13,14,15,16,17],freshli:[4,5,11,13,14,16],frevent:101,friendli:79,from:[0,1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,23,24,25,26,28,32,33,34,36,37,39,40,41,42,43,45,46,47,49,50,52,53,55,56,57,58,59,61,62,63,64,65,66,67,69,70,71,72,73,74,77,78,79,81,82,83,84,85,86,87,88,89,90,91,92,93,97,98,99,100,101,102,103,104,105,106,107,109,110],from_gp:104,from_lal:[4,13,14,16],from_ligolw_t:6,from_nds2_buff:[13,14,15,16,17],from_panda:12,from_pycbc:[4,13,14,16,71],from_spectra:11,from_spectrogram:5,from_veto_def:7,from_veto_definer_fil:6,frombuff:[4,5,11,13,14,16],fromkei:[6,10,15,17],front:33,fs:4,fstop:[16,93],ftype:16,full:[4,5,9,10,11,12,13,14,15,16,17,25,26,27,49,69,71,77,94,96,105,108],fulli:[4,5,11,13,14,16],func:10,functiona:81,further:[4,5,11,13,14,16,70,74],futur:[4,5,11,12,13,14,16],fwf:12,g1_rds_c01_l3:105,g:[4,5,6,7,11,12,13,14,16,32,34,40,41,77,83,86,90,93,98,101,105],gain:[4,11,16,50,67,93],gap:[4,5,11,13,14,15,16,17,18],gate:16,gaussian:[16,39,41,57,69,101],gausspuls:16,gca:[16,37,43,45,46,47,49,50,52,53,55,56,57,58,59,61,62,64,66,69,71,72,73,83,85,87,88,94,96,99,102,103,109],gd:[21,22,32,36,53,66],gener:[0,2,4,5,7,8,9,11,12,13,14,16,32,37,41,43,44,49,56,59,61,62,64,68,70,71,73,79,86,89,90,93,94,99,101,105,110],geometri:[29,32,41,86],get:[4,5,6,10,11,12,13,14,15,16,17,32,36,40,42,53,65,66,67,74,82,94,96,98,104,107,108,110],get_:101,get_bit_seri:14,get_column:12,get_fd_waveform:71,get_readable_fileobj:69,get_window:16,getfield:[4,5,11,13,14,16],getsizeof:[4,5,11,13,14,16],getter:[4,5,11,13,14,16],git:34,github:[12,32,34],give:[4,5,11,12,13,14,16,32,53,58,67,92,108,110],given:[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,32,33,41,68,85,86,89,91,92,93,97,98,99,101,103,104,105,109,110],glitch:[12,16,39,52,66,69,72,74,90,100,101],global:[4,5,11,13,14,16],glue:[91,101],gnd:42,gnd_sts_etmy_z_blrms_30m_100m:105,gnd_sts_itmy_z_blrms_30m_100m:[65,105],gnd_sts_itmy_z_dq:42,gndchannel:42,go:[12,16,34,89,90,104],good:[7,13,14,16,90],googl:12,gp:[4,5,6,7,8,9,11,12,13,14,15,16,17,28,32,45,52,66,70,81,82,83,86,89,90,91,92,97,98,100,103,105,107,108,109,110],gpass:[16,93],gpg:34,gpsordat:104,gpsstart:12,gpstop:12,gpstype:6,gr:16,grab:[0,2,13,14,16],grai:[4,5,11,13,14,16],gram:16,gravit:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110],graviti:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],gravityspi:[12,100],gravityspyt:101,grb:[0,1],great:85,greater:[4,5,9,11,12,13,14,16,41,66,109],greatest:93,greatli:[16,105],green:110,grid:[16,32,43,52,53,66,72,101],ground:[42,52,65,79,92,105],group:[12,13,33,72,90,91,101,105,107,110],group_bi:12,gstlal:12,gstlal_idq_featur:101,gstop:[16,93],gstreamer:101,guarante:[15,17],guess:[12,103,105],guid:[4,5,11,13,14,16],gw150914:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],gw151226:[41,43,57],gw170814:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],gw170817:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],gw178017:40,gw190408_181802:[98,101],gw190412:[98,101],gw190413_052954:[98,101],gw190413_134308:101,gw190421_213856:101,gw190424_180648:101,gw190425:101,gw190426_152155:[98,101],gw190503_185404:101,gw190512_180714:101,gw190513_205428:101,gw190514_065416:101,gw190517_055101:101,gw190519_153544:101,gw190521:101,gw190521_074359:[98,101],gw190527_092055:101,gw190602_175927:101,gw190620_030421:101,gw190630_185205:[98,101],gw190701_203306:101,gw190706_222641:[98,101],gw190707_093326:[98,101],gw190708_232457:[98,101],gw190719_215514:101,gw190720_000836:101,gw190727_060333:101,gw190728_064510:101,gw190731_140936:101,gw190803_022701:101,gw190814:[98,101],gw190828_063405:[98,101],gw190828_065509:101,gw190909_114149:101,gw190910_112807:101,gw190915_235702:101,gw190924_021846:[98,101],gw190929_012149:[98,101],gw190930_133541:[98,101],gw200102:110,gw200105:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],gw200105_162426:110,gw200105_state:110,gw200129_065458:[25,26,27],gw510914:58,gw:[0,1,27,32,59,68,81,89,94,96,105,106,108],gw_observatory_color:83,gwdata:[41,57,58,94,96],gwdatafind:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,106,107,108,109,110],gwdatafind_serv:105,gwf:[12,13,14,15,16,17,32,75,76,77,105],gwo:[83,101,107],gwosc:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,105,106,109],gwpy:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,33,34,36,37,39,40,41,42,43,45,46,47,49,50,52,53,55,56,57,58,59,61,62,63,64,65,66,67,69,70,71,72,73,74,75,76,77,79,82,83,84,85,89,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],gwpy_cach:[13,14,16,35],gwpy_rcparam:35,gwpy_usetex:35,gwtc:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],gz:[13,14,16,61,62,64,97,99,101,102,103],h1:[0,2,7,10,13,14,16,21,22,23,27,28,29,30,31,32,36,37,40,45,47,50,53,55,56,58,61,62,64,65,71,72,74,81,83,86,91,94,96,97,99,101,102,103,105,107,108,109,110],h1_data:[7,45,49],h1_gwosc_16khz_r1:107,h1_gwosc_o2_16khz_r1:105,h1_gwosc_o2_4khz_r1:105,h1_hoft_c00:105,h1_hoft_cxi:105,h1_ldas_c02_l2:14,h1_m:105,h1_r:105,h1_t:105,h1b:[81,83],h1hoft:109,h1l1:101,h1month1:49,h1rang:47,h1seg:[45,49],h1strain:45,h2:10,h5:[97,101],h5py:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],h:[12,14,32,69,73,101,105,106,107],ha:[4,5,6,9,10,11,12,13,14,15,16,17,33,34,37,50,61,65,69,80,81,83,85,88,90,94,101,105,108],hacr:12,had:[4,5,11,12,13,14,16,50,65],half:16,ham:[12,16],hand:5,handi:110,handl:[4,5,6,11,13,14,15,16,86,106,110],handlelength:87,handler:87,handler_map:87,handlerline2d:87,hanford:[21,22,23,24,28,29,31,36,37,40,45,47,49,50,53,55,56,58,61,62,64,65,71,81,83,101,103,108],hann:[16,40,82],happen:[6,39,69],hard:56,hardwar:[4,5,11,13,14,16,61,62,64],harmon:[40,41,50],has_masked_column:12,has_masked_valu:12,has_mixin_column:12,have:[4,5,6,7,10,11,12,13,14,16,20,33,40,46,49,50,58,63,65,67,71,85,88,96,97,98,101,105,106],haven:[4,5,11,13,14,16],hdata:[50,86],hdf5:[4,5,6,7,9,11,12,13,14,15,16,17,90,96],hdf:[91,97,101,107],header:12,heapsort:[4,5,11,12,13,14,16],heavi:[2,3],height:[11,12],held:[13,15,16,17,97,107],help:[12,32],henc:12,hepi:42,here:[12,16,20,33,36,52,58,61,62,64,67,70,71,72,74,79,85,88,94,106,109,110],hertz:[4,5,11,13,14,16,56,61,84,93],het:16,heterodyn:16,hex:[4,5,11,13,14,16],hfilt:50,hide:50,high:[4,5,11,13,14,16,32,33,40,43,50,56,58,71,72,74,77,78,90,93,98,103],high_mass_ratio:98,high_seismic_1_3:92,higher:[4,5,11,13,14,16,66,71,74,103],highest:[5,11,13,14,16],highli:[16,58],highligh:56,highlight:[36,43,55],highpass:[16,29,32,58,67,71,93],highseism:92,hist:[12,59,99],histogram:[5,11,12,16,38,60,100],histogramplot:[12,99],histtyp:[59,99],hlv:107,hoff:[0,2],hoft:[0,2,33,36,40,53,66],hold:[4,5,11,13,14,15,16,17],hole:[39,58,69,72,110],home:[32,34],homogen:12,horizon:[2,3,19],host:[7,12,13,14,15,16,17,33,65,105,107,108,110],hostnam:32,hour:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],how:[4,5,6,7,11,13,14,15,16,18,19,32,36,40,42,45,46,49,55,56,63,70,71,73,79,81,93,94,100,101,107],howev:[4,5,11,12,13,14,16,40,43,56,71,85,86,101,105,107],howmani:101,hp:[58,67,71,93],hpi:[42,92],hpichannel:42,hpseri:16,hrec_hoft_16384hz:32,hstack:12,html:[12,32,34,101],http:[2,3,6,7,12,13,14,16,20,32,34,69,72,75,76,77,89,101,108],httperror:[15,17],huge:65,human:7,hundr:[56,89],hw100916:[61,62,64,99,103,107],hz:[0,3,4,11,12,13,14,16,33,36,39,40,41,43,45,46,50,52,53,55,58,61,62,64,65,66,67,71,72,82,84,92,93,94,96,99,102,103,105],i0:12,i1:[4,5,11,12,13,14,16],i2:[4,5,11,13,14,16],i8:[4,5,11,13,14,16],i:[4,5,7,9,11,12,13,14,16,18,34,42,59,61,62,64,65,77,79,100,105],ib:[4,5,11,13,14,16],id:[12,34,101],idea:9,ident:[9,91],identif:[83,101],identifi:[4,5,6,7,9,10,11,12,13,14,15,16,17,66,70,97,105,107,110],idx:12,ifft:[4,39],ifo:[6,7,13,14,16,23,24,25,26,27,28,29,31,32,33,65,90,92,101],ignor:[4,5,6,10,11,12,13,14,15,16,18,103],igwn:[101,105],iir:[16,93],iirdesign:[16,93],illumin:103,iloc:12,imag:[4,5,11,13,14,16,32,35,81,82,86],imagin:[4,5,11,13,14,16],imaginari:[4,5,11,13,14,16],imax:24,imc:[33,105,110],imc_bad_calibr:7,imin:24,immedi:90,immut:10,impact:[65,67,73],impar:65,implement:[4,5,10,11,13,14,16,32,33,87,97,98],implicit:32,implicitli:18,importerror:12,imposs:[55,56],improv:[66,82,85,86],impuls:50,imrphenomd:71,imshow:[4,5,11,13,14,16,45,55,66,82,86],in2p3:76,in_segmentlist:12,inch:[11,32],incid:105,includ:[4,5,6,9,11,12,13,14,15,16,17,20,34,79,89,90,91,93,94,96,97,98,101,105,107,108,109,110],inclus:[13,16],incoher:41,incompat:[4,5,11,13,14,16,107],incomplet:105,incorrectli:98,increas:[4,5,11,13,14,16,32],independ:[9,10,16,35],index:[4,5,8,9,11,12,13,14,16,18,34,79],index_arrai:12,index_column:12,index_mod:12,indexerror:[4,5,7,9,12,13,14,16,18],indic:[4,5,6,7,8,11,12,13,14,16,33,36,40,41,90,91,103,110],indirect:[4,5,11,13,14,16],individu:[4,5,11,12,13,14,16,18,105],ineffici:12,inf:16,infer:[4,5,11,13,14,16],infin:9,infinit:50,influenc:81,info:[4,5,11,12,13,14,16,101],inform:[4,5,11,13,14,16,46,47,49,73,74,89,91,93,97,101,107,108,110],infrastructur:81,inher:[39,69],inherit:[4,5,11,12,13,14,16,101],init:12,initi:[4,5,10,11,12,13,14,16],inj:39,inject:[4,5,11,13,14,16,38,61,62,64,68],injfd:39,inlin:[4,5,11,13,14,16],innermost:2,inplac:[4,5,7,11,13,14,15,16,17],input:[4,5,6,11,12,13,14,15,16,17,33,58,75,76,77,79,81,91,93,97,98,101,104,105,107],insert:[4,5,6,9,10,11,12,13,14,15,16,17,18],insert_row:12,insetlabel:73,insid:[4,5,11,13,14,16,33,73,97,107,110],inspir:[2,3,19,30,32,44],instal:[12,75,76,77,78,79,107],instanc:[4,5,11,12,13,14,16,93,102],instead:[4,5,10,11,12,13,14,16,88,100,101],instrument:[0,1,2,3,4,5,7,11,13,14,16,33,65,66,79,81,89,90,96,97,106,108,110],int16:[4,5,11,13,14,16],int32:[4,5,11,13,14,16],int8:[4,5,11,13,14,16],int_:[4,5,11,13,14,16],integ:[4,5,7,11,12,13,14,15,16,17,32,92,104,110],integr:[0,2,5,11,16,34,86],intellig:[13,15,16,17],intend:[4,5,11,12,13,14,16],intens:33,interact:[4,5,11,12,13,14,16,21,22,23,24,25,26,27,28,29,30,31,79,89],interchang:[4,5,11,13,14,16],intereferomet:[41,43,57],interest:[13,14,15,16,33,42,66,71,72,96,105],interfac:[4,5,10,11,12,13,14,16,32,33,70,79,98,105,108],interferomet:[6,7,14,21,22,32,33,36,41,42,45,49,55,56,65,70,74,83,90,92,105,106],intermedi:91,intern:[12,13,14,16,90,98],interp:4,interpol:[4,16],interpret:[4,5,11,13,14,16,66,98],intersect:[4,5,6,8,9,10,11,13,14,16,49,69],intersects_al:10,intersects_seg:[9,10],interv:[4,5,6,7,8,10,11,13,14,15,16,17,58,98,105,108,110],introduc:58,introselect:[4,5,11,13,14,16],intuit:[79,98],invari:84,invers:[4,5,11,13,14,16],invert:50,investig:[39,63,93],invok:[4,5,11,13,14,16],involv:[12,43],io:[12,32,34,101,107],ioerror:[91,97,101,107],ion:42,ioregistryerror:12,ip:78,ipac:12,ipydatagrid:12,ipython:12,irfft:4,irreduc:[4,5,11,13,14,16],irregular:16,is_coincid:10,is_compat:[4,5,11,13,14,16],is_contigu:[4,5,11,13,14,16],is_hdf5:101,isco:2,isgood:7,isi:[42,65,105],isn:[11,71,91,101,105],iso:104,iss:33,iss_pda_rel_out_dq:66,iss_pdb_out_dq:33,isscalar:[4,5,11,13,14,16],issn:20,issu:[12,32,45,73],item:[4,5,6,9,10,11,12,13,14,15,16,17,18],items:[4,5,11,13,14,16],itemset:[4,5,11,13,14,16],iter:[4,5,6,8,9,10,11,12,13,14,15,16,17,18,33],itercol:12,iterrow:12,itmi:42,itmy_blnd_l4c_z_in1_dq:42,its:[4,5,6,7,10,11,13,14,16,33,66,69,89,96,97,105,109],itself:[4,5,9,10,11,12,13,14,16,18,33,36,86,108],j:[4,5,11,13,14,16,20],jackson:12,jan:[7,49,65,98,104],januari:[90,104],java:32,javascript:12,jf:20,jo:[12,20],john:12,join:[4,5,11,13,14,16,18],joint:[32,50,58,89],joseph:[20,32],jour:20,journal:20,jqueri:12,jskwarg:12,json:[7,12,90],jsviewer:12,jul:[98,101],juli:105,jump:[4,5,11,13,14,16],just:[4,5,11,13,14,16,34,35,81,85,88,101,105,110],jyear:12,k:[4,5,6,10,11,13,14,15,16,17],kagra:89,keep:[4,5,11,12,13,14,16],keep_byteord:12,keep_column:12,keepdim:[4,5,11,13,14,16],kei:[4,5,6,9,10,11,12,13,14,15,16,17,18,34,40,90],kept:[4,5,11,13,14,16,90],keycach:32,keyerror:[6,10,12,15,17],keys_at:10,keyword:[2,3,4,5,6,7,9,11,12,13,14,15,16,17,32,72,86,91,92,93,99,101,105,108,109],kilohertz:74,kind:[4,5,11,12,13,14,16],km:[4,5,11,13,14,16],know:[12,16,42,105],knowledg:105,known:[2,3,4,5,6,7,9,11,13,14,16,29,33,38,50,68,71,90,91,101,110],kth:[4,5,11,13,14,16],kwarg:[2,3,4,5,6,7,9,11,12,13,14,15,16,17,87,93,97,99,104],l1:[13,14,16,24,25,26,27,28,30,32,33,37,41,42,43,46,47,50,52,57,65,66,67,70,73,81,82,83,85,86,89,90,91,92,101,105,107,108,109,110],l1_data:49,l1_gwosc_o2_16khz_r1:105,l1_gwosc_o2_4khz_r1:105,l1_hoft_c00:105,l1_hoft_cxi:105,l1_m:105,l1_r:105,l1_t:105,l1b:[81,83],l1hoft:109,l1lsc:33,l1month1:49,l1rang:47,l1spec:46,l:[10,20,105],lab:105,label:[6,7,13,15,16,17,32,37,45,46,47,49,50,52,53,55,56,57,58,63,64,66,67,72,81,82,83,87,94,101,102],laboratori:37,lack:[6,10,15,17],lal:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],lalf:4,lalfram:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],lalspec:4,lalsuit:[80,81,101],lalt:[13,14,16],lambda:10,lappweb:76,larg:[12,16,50,71,74,77,81,85,92,105,110],larger:[4,5,11,13,14,16,32],laser:[21,22,33,36,66,92],laserpow:110,last:[4,5,6,9,10,11,13,14,15,16,17,18,65,74],latenc:101,latest:[12,32,79],latex:[4,5,7,11,12,13,14,16,35],latex_array_threshold:[4,5,11,13,14,16],latex_inlin:[4,5,11,13,14,16],layer:69,layout:[4,5,11,13,14,16],lda:[6,7,33,34,75,94,96,107],ldas_strain:[61,62,64,99,101,102,103],ldas_tool:75,ldastool:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],ldata:[50,86],ldvw:32,lead:[9,20,58],leakag:16,leap:104,least:[4,5,11,13,14,16,110],left:[4,5,11,12,13,14,16,65],leftright:16,legaci:105,legal:12,legend:[16,32,37,47,50,62,65,81,83,86,109],legend_handl:87,len:10,length:[4,5,9,11,12,13,14,16,36,53,58,71,98,101,106],less:[9,12,41,88],let:[12,14,15,45,50],lett:[46,47,52],letter:[4,5,7,11,13,14,16],level:[4,5,11,13,14,16,77,78,103,110],leverag:81,lexsort:[4,5,11,13,14,16],lfilt:50,lfilter:16,lho:[37,58,65,96,99],lhoasd:37,lib:[4,5,11,13,14,16,32],librari:[4,5,11,12,13,14,16,75,76,77,78,81,91,97,101],lie:9,lifo:[6,10,15,17],lift:[2,3],ligo:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,106,107,108,109,110],ligo_datafind_serv:105,ligo_lw:[6,61,62,64,90,96],ligodv:32,ligol:101,ligolw:[4,6,7,12,91,101],ligolw_column:101,ligotimegp:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],like:[0,1,4,5,6,7,9,10,11,12,13,14,15,16,17,30,42,59,61,62,64,65,69,70,77,91,93,94,98],likelihood:101,limit:[2,4,5,9,11,12,13,14,16,65,67,85],line2d:87,line:[4,5,6,11,12,13,14,15,16,17,40,41,43,50,79,81,86,87,105,106,110],linear:[4,16,36,84,92,93],linestyl:[73,109],link:[105,107,109],links_subject:101,linspac:[4,5,11,13,14,16],linux:[75,77],list:[4,5,6,7,9,10,11,12,13,14,15,16,17,18,20,32,33,49,62,89,90,91,93,103,105,107,110],littl:[4,5,11,12,13,14,16,49],livetim:7,livingston:[0,2,16,25,26,28,33,37,41,43,46,47,49,50,52,57,65,66,70,73,81,82,83,86,89,91,101,108,109],llo:[37,43,65],lloasd:37,ln:34,load:[4,5,11,12,13,14,16,32,41,43,46,47,50,57,82,91,93,108],loadtxt:[97,107],loc:[12,16,37],loc_indic:12,local:[4,5,11,12,13,14,16,105,107],locat:[4,5,11,13,14,16,105],lock:[4,5,11,13,14,16],log:[4,5,9,11,16,36,39,40,41,43,45,46,52,53,55,56,57,58,64,65,66,67,72,82,86,94,102],logarithm:[5,11,16,32,86,88],logbin:99,logf:[16,94,96],logformattermathtext:88,logi:32,logic:[14,15,17,88],login:101,lognorm:82,logx:[32,88],longer:[16,91],look:[4,5,11,13,14,16,43,66,70,107],loop:[4,5,11,12,13,14,16,45,105],losc:[65,105,108,110],lose:[4,5,11,13,14,16],loss:[16,93],lost:107,lot:[49,81],loud:[39,46,47,52,66,69],loudest:[16,52],low:[4,5,11,12,13,14,16,33,40,43,50,58,67,70,74,93,101,110],low_frequency_cutoff:71,lower:[0,2,4,5,7,8,9,11,13,14,16,37,71,93],lowercas:[4,5,11,13,14,16],lowert:5,lowest:[5,11,16],lowpass:[16,29,32,93],lp:93,lp_c_uint:[4,5,11,13,14,16],lpseri:16,lsc:[50,58,101],lscsoft:77,lsctabl:101,luminos:[2,3],luminosity_dist:[63,98,101],lvk:81,lw:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],m:[4,5,11,12,13,14,16,20,34,59,63,67,77,80,105],ma:12,mac:12,macleod:[20,32,34],maco:[75,77],made:[4,5,6,10,11,12,13,14,16,34,77,103,105,107],mag:16,magnet:[13,14,15,16,17],magnitud:[16,42,84],mai:[4,5,11,12,13,14,16,32,33,42,58,79,91,105,107],main:[10,15,17,21,22,34,36,41,50,75,76,77],mainli:[9,77,110],mainlin:34,maintain:[4,5,7,9,11,12,13,14,16,18,105],mainten:34,major:[4,5,11,13,14,16,34,45,88],make:[4,5,11,12,13,14,16,32,40,50,55,56,57,58,62,63,64,66,69,70,73,74,81,92,93,105,107],mamba:[75,76,77,78],manag:12,mani:[4,5,9,10,11,12,13,14,15,16,17,32,33,43,83,101,102,104,105,106],manipul:[9,10,12,32,81,90,93],manner:[43,91,101,102],manual:[12,33,34,61,62,64,88,91,97,101,107],map:[4,5,9,10,11,12,13,14,15,16,17,52,72],march:67,mark:[12,103],marker:[12,87],mask:[12,14,16,101],maskedarrai:12,maskedcolumn:12,mass1:[2,3,12,71],mass2:[2,3,71],mass:[2,3,47,58,59,63,98],mass_1_sourc:[59,63,98,101],mass_1_source_upp:101,mass_2_sourc:[59,63,98,101],mass_2_source_upp:101,massing:20,match:[4,5,7,10,11,12,13,14,15,16,17,32,33,35,101,107],matched_filt:71,math:[12,103],mathemat:[12,92,98,101,103,110],mathrm:[40,41,43,45,46,55,58,67,94,96],matplotlib:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],matrix:[4,5,11,13,14,16],max:[4,5,11,12,13,14,16,32,42,105],max_column:12,max_lin:12,max_width:12,maxim:[2,3,12],maximum:[2,4,5,9,11,12,13,14,16,93],maxsiz:[8,9,18],mchirp:[12,101],mean:[4,5,7,9,11,12,13,14,16,30,35,45,50,74,87,93,98,105],meant:81,measur:[16,19,36,40,41,42,46,47,52,53,72,96,105],mechan:66,median:[4,5,11,13,14,16,40,56,93],megaparsec:2,member:[32,89,101,105,107],memori:[4,5,6,7,10,11,12,13,14,15,16,17,18,72],merg:[9,12,18,34,52],merger:[39,46,47,52,69,72],mergesort:[4,5,11,12,13,14,16],merit:47,messag:[32,34],met:90,meta:[4,5,11,12,13,14,16,101],metaattribut:12,metadata:[4,5,6,7,11,12,13,14,15,16,17,89,91,94,96,97,105,106,107],metdata:110,meter:[13,14,15,16,17],method:[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,36,37,40,41,42,43,45,49,50,53,55,56,57,58,59,61,62,69,70,71,80,81,85,87,90,91,92,93,94,95,96,97,98,99,101,102,103,104,105,106,108,109,110],methodolog:81,metr:16,mfilter:[16,66],microsecond:85,middl:[4,5,11,13,14,16,58],midnight:[90,104],might:[9,12,39,69,99],miller:12,millisecond:85,min:[4,5,11,13,14,16,32,105],minim:[6,7,96],minimum:[4,5,9,11,13,14,16,93,108],minlen:[13,14],minor:[34,88],minut:[16,34,45,55,85,105,110],misc:101,miscellan:79,mismatch:[16,52],miss:[4,5,11,12,13,14,16],mix:[107,110],mixin:[4,5,11,12,13,14,16],mjd:104,ml_confid:12,ml_label:[12,101],mlab:16,mode:[4,5,7,11,12,13,14,16,33,79,101,105],model:[16,33,34,39,68,79,101],modern:12,modif:[4,5,10,11,12,13,14,16,86],modifi:[4,5,6,7,9,11,12,13,14,15,16,17,18,34,36],modul:[4,5,11,13,14,16,50,81,86,106],moment:[4,5,11,13,14,16],monitor:[66,106],monochromat:16,month:[49,98,107],more:[4,5,6,7,10,11,12,13,14,15,16,17,29,32,33,43,46,47,49,52,55,58,66,70,72,73,74,85,87,89,93,97,98,100,107,108],morpholog:66,most:[4,5,11,12,13,14,16,20,40,43,52,55,56,72,74,79,85,90,101,105,109],motion:[16,21,22,36,42,53,65,92,105],move:[4,5,6,11,13,14,15,16,17],move_to_end:[6,15,17],mpc:[0,1,2,3,30,46,47,101],mrt:12,ms:50,mtotal:[59,63],much:[10,39,40,43,52,58,66,77,81,100],multi:[12,16,79],multipl:[4,5,6,7,11,12,13,14,15,16,17,18,32,86,91,97,101,103,105,106,110],multipli:[16,85],must:[4,5,6,7,9,10,11,12,13,14,15,16,17,34,66,93,101],mutual:10,my:[87,97,101,107],my_data:101,my_func:12,mydata:101,myhandl:87,myriad:110,mysqldb:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],mytabl:12,n:[4,5,9,10,11,12,13,14,16,32,35,93],name:[4,5,6,7,10,11,12,13,14,15,16,17,32,33,52,59,63,65,73,80,90,91,92,93,94,96,97,98,99,101,103,104,106,107,110],namespac:32,nan:[12,16],nanosecond:[85,104],nansum:[4,5,11,13,14,16],narrow:43,nativ:[4,5,11,12,13,14,16,91,101,105],natur:[12,14],nbin:[5,11,16,43],nbyte:[4,5,11,13,14,16],ncol:37,nd:[13,14,15,16,17,65,78,105,108,110],ndarrai:[4,5,11,12,13,14,16,93,106],ndarray_subclass:[4,5,11,13,14,16],ndim:[4,5,11,13,14,16],nds2:[13,14,15,16,17,32,80,105,107],ndsserver:105,nearbi:12,nearest:[4,5,11,12,13,14,16,103],nearli:66,necessari:[4,5,11,13,14,15,16,17,105,107],necessarili:81,need:[4,5,9,10,11,12,13,14,16,34,37,39,42,45,46,47,49,50,52,61,62,64,65,70,71,72,103,105,107,108],neg:[4,5,7,11,12,13,14,16,73],neighbour:16,nest:[4,5,11,13,14,16],net:12,network:[45,78,105],network_matched_filter_snr:98,neutron:[16,30,46,47,52,110],never:[4,5,9,11,13,14,16,33],new_arr:[4,5,11,13,14,16],new_nam:12,new_ord:[4,5,11,13,14,16],new_shap:[4,5,11,13,14,16],new_snr:101,newaxi:[4,5,11,13,14,16],newbyteord:[4,5,11,13,14,16],newbytord:[4,5,11,13,14,16],newli:[4,5,6,7,11,12,13,14,16,99],newq:[4,5,11,13,14,16],newtre:101,next:[4,5,6,11,12,13,14,16,40,41,50,55,56,57,65,66,72],nfft:16,nicer:88,nightli:[32,34],nm:[65,92,105],no_head:12,nogrid:32,nois:[0,1,2,3,16,33,36,39,40,41,43,45,46,47,50,52,58,62,64,66,67,69,70,71,72,81,83,90,92,99,100,101,102,103],noisefd:39,noisi:[39,69],nolegend:32,nomin:[33,90,92],non:[4,5,11,12,13,14,15,16,17,33,41,57,58,93,104],none:[2,4,5,6,7,9,10,11,12,13,14,15,16,17,18,32,87,90,91,92,93,94,96,97,98,101,103,106,107,110],nonzero:[4,5,11,13,14,16],nor:9,norm:[5,11,16,24,43,45,55,56,57,58,82,94,102],normal:[4,5,7,11,13,14,16,39,43,52,58,66,69,72,74,93,98],normalis:[4,5,11,16,32,54,55,66,82],notabl:[40,105],notat:88,notch:[16,29,32,50,81,82,83,85,93],note:[6,9,10,15,17,33,34,46,47,69,93,104],notebook:12,noth:[6,14,15],noverlap:16,now:[0,2,16,39,40,45,47,50,58,62,63,66,67,72,74,104],np:[4,5,11,12,13,14,16],nproc:[6,7,12,13,14,15,16,17,101,107],nrow:82,ns:12,nsampl:16,nullabl:12,num:[4,5,11,13,14,16],number:[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,32,33,34,40,50,55,59,62,77,82,85,90,91,93,98,103,104,105,109],number_of_column:12,numer:[4,5,10,11,12,13,14,16,33,67,98],numpi:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],numpydoc:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],nx1:[4,11,16],nx6:[4,11,16],o1:[16,48],o2:105,o3:[105,108],o:[4,5,9,11,13,14,16,77,100,105],oaf:67,obj:[4,5,11,13,14,16],object:[4,5,6,7,9,10,11,12,13,14,15,16,17,18,33,42,49,61,62,64,65,70,71,77,83,86,89,90,91,93,94,95,96,97,98,99,100,104,106,107,109,110],object_:101,observ:[48,66,89,90,105,107,108],observatori:[14,15,17,32,33,45,61,62,65,70,81,86,89,90,91,100,101,103,105,107,108],obtain:[4,5,11,13,14,16],obviou:[74,91,105,109],occur:[4,5,11,13,14,16,39,69,103],occurr:[8,9,18],oct:49,od:[6,15,17],odd:[4,5,11,13,14,16],odot:[59,63],off:[2,4,5,11,13,14,16,69,105,106,110],offlin:[12,33,101],offset:[4,5,10,11,13,14,16,85],often:[39,43,69,74,96,101,103,105],ok:[14,105],old:[4,5,10,11,13,14,16],older:20,omega:[12,32],omicron:12,omiss:[4,5,11,13,14,16],omit:[4,5,11,13,14,16,101],on_error:6,on_miss:6,onc:[4,5,9,10,11,12,13,14,16,18,34,36],one:[4,5,6,7,9,10,11,12,13,14,15,16,17,18,32,34,36,39,42,50,52,53,65,69,74,86,87,88,90,93,94,99,101,103,105,106,107,110],ones:12,onli:[4,5,6,7,10,11,12,13,14,15,16,17,19,20,32,33,34,35,39,49,61,62,64,72,86,90,91,93,98,100,101,105,107,110],onlin:[4,5,9,11,12,13,15,16,17,101],onto:[4,5,6,8,11,13,14,16],open:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,105,106,107,109,110],oper:[4,5,7,9,11,12,13,14,15,16,17,42,45,49,61,62,64,65,90,91,92,96,98,101,103,105,107,110],operand:11,opposit:[4,5,11,13,14,16],optic:[21,22],optim:16,optimis:[61,62,64,107],option:[0,1,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,32,33,63,75,76,77,80,91,93,97,99,102,103,107,108],option_context:12,orang:[16,73,109],orbit:[2,16],order:[4,5,6,9,10,11,12,13,14,15,16,17,18,37,45,50,61,62,64,66,67,71,83,90,93,98,107,108],ordereddict:[6,90],org:[2,3,6,7,12,13,14,16,32,34,65,66,69,72,74,75,77,89,101,105,108,110],organis:18,orient:50,origin:[4,5,6,7,10,11,12,13,14,16,34,50,74,93,98],other:[4,5,6,7,8,9,10,11,12,13,14,15,16,17,32,33,34,36,53,80,81,91,93,97,98,99,101,104,107],otherwis:[2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,50,88,101,104,110],our:[4,5,11,13,14,16,42,50,56,58,67,69,70,71],out:[4,5,7,9,10,11,12,13,14,16,18,19,32,33,34,43,50,56,58,65,66,89,93,98,110],outag:45,outlin:101,output:[0,1,4,5,9,11,12,13,14,15,16,17,32,33,36,50,53,58,75,76,77,81,91,93,97,101,105,106,107],outseg:[16,66,72],outsid:[4,5,11,12,13,14,16],outward:92,over:[4,5,6,11,12,13,14,15,16,17,18,33,40,43,47,52,54,55,56,61,62,64,71,90,94,96,99,101,103,105,107,110],overal:[4,11,16,56,67,93,96],overflow:[4,5,11,13,14,16],overhead:105,overlai:16,overlap:[8,9,16,36,40,41,43,53,55,56,57,58,69,73,82,91,93,94],overrid:[16,87,88],overridden:[12,16],override_unit:[4,5,11,13,14,16],overwrit:[87,91,97,101,107],overwrite_input:[4,5,11,13,14,16],overwritten:[4,11,16,107],own:[4,5,11,12,13,14,16,32,87,96,105,109],owndata:[4,5,11,13,14,16],owner:[4,5,11,13,14,16],p150914:69,p:[4,5,11,12,13,14,16,20,46,47,52],packag:[2,3,4,5,11,13,14,16,20,32,70,79,80,81,90,93,98,101,108],pad:[4,5,6,7,11,12,13,14,15,16,17,18,110],pad_width:[4,5,11,13,14,16],paddedflag:7,page:[12,20,34,107,110],pair:[4,5,6,10,11,12,13,14,15,16,17,103],pan:32,panda:12,panel:72,paper:20,parallel:[6,7,12,13,14,15,16,17],param:[33,97],paramet:[0,1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,18,32,33,93,99,100,101,103,104],pare:49,parent:[4,5,11,13,14,16],parquet:12,pars:[4,5,6,11,13,14,16,33,61,62,64,91,97,98,104,110],parsabl:[4,11,13,14,16],parse_strict:[4,5,11,13,14,16],parseabl:[4,5,7,11,13,14,15,16,17],parser:98,part:[4,5,11,13,14,16,20,32,42,43,66,101,102],partial:[4,5,11,13,14,16],particular:[4,5,9,10,11,12,13,14,16,107,110],partit:[4,5,11,13,14,16],partner:105,pass:[4,5,6,7,11,12,13,14,15,16,17,32,33,50,67,70,71,73,84,86,87,91,93,97,98,101,104,105,107,110],passband:[16,93],patch:34,path:[4,5,6,7,9,11,12,13,14,15,16,17,32,91,97,107],patient:34,pcolormesh:[5,11,16],pd:12,pdb:33,pdf:32,peak:[4,5,11,13,14,16,43,61,62,64,101,102,103],peak_frequ:101,peak_tim:101,peak_time_n:101,pem:[21,22,32,36,53],pep:32,per:[4,5,11,12,13,14,16,32,33,93,94,103],percentil:[4,5,11,13,14,16,38],perform:[4,5,6,7,11,12,13,14,16,45,53,61,62,64,66,71,81,96,98,101,103,105],perhap:[4,5,11,13,14,16,50],period:[43,49,90],periodogram:[16,93],periscop:[21,22,36,53],permut:[4,5,11,13,14,16],perspect:12,pformat:12,pformat_al:12,phase0:16,phase:[16,42,50,69,84],phenomena:58,photodiod:[33,66],phy:[46,47,52],physic:[4,5,11,14,16,33,67],pi:16,pick:[56,90,98],pickl:[4,5,11,13,14,16],pii:20,pip:77,pipelin:[101,105],pkg:32,pkg_resourc:32,place:[4,5,6,7,9,11,12,13,14,15,16,17,18,88],plain:[4,5,11,13,14,16],plan:12,planck:[4,5,11,13,14,16],plane:[4,5,11,13,14,16,52],plasma:[43,53],platform:[4,5,11,13,14,16,75,77,78,107],pleas:[12,20,52,58,72,73,79,101,107,108],plot:[4,5,6,7,11,12,13,14,15,16,17,21,22,23,24,25,26,27,28,29,30,31,36,38,39,44,46,47,48,50,52,53,54,60,65,66,67,68,69,70,71,72,74,79,81,82,83,84,87,88,93,99,103,105],plot_flag:14,plot_mmm:40,plot_segmentlist:[6,7],plotli:12,plotter:[15,17],plt:[4,5,11,13,14,16,86],png:[4,5,11,13,14,16,21,22,23,24,25,26,27,28,29,30,31,32,36,37,39,40,41,42,43,45,46,47,49,50,52,53,55,56,57,58,59,61,62,63,64,65,66,67,69,70,71,72,73,74,81,82,83,84,85,86,87,88,93,94,96,99,102,103,105,108,109,110],point:[4,5,9,11,12,13,14,15,16,17,33,71,89,105],pointer:[4,5,11,13,14,16],pole:[4,11,16,50,67,93],pollut:50,polygon:16,polynomi:[4,11,16],pool:12,poor:58,pop:[6,9,10,15,17,18],popitem:[6,10,15,17],popul:[4,5,6,7,13,16],port:[13,14,15,16,17],portion:[16,98],posit:[4,5,7,10,11,12,13,14,16],possess:[4,5,11,13,14,16],possibl:[4,5,6,7,9,11,12,13,14,15,16,17,50,52,66,81,90],post:[15,17],potenti:[4,5,11,13,14,16,18,72],power:[0,1,2,3,16,25,26,27,28,33,40,41,43,50,55,71,74,93,96,98,105],pprint:12,pprint_al:12,pprint_exclude_nam:12,pprint_include_nam:12,practic:[52,105],pre:[33,66],preced:[4,11,13,14,16],precis:[4,5,11,13,14,16,67,90,104],prefer:[4,5,11,12,13,14,16,32],prefix:[6,13,14,15,16,17,32,65,70,83,108],prepar:[39,69],prepend:[4,5,11,12,13,14,15,16,17],present:[6,8,9,10,12,13,14,15,16,17,18,32],preserv:[4,5,10,11,12,13,14,16,50,91,97,101,107],prettifi:[50,67],prevent:[4,5,11,13,14,16,35,67],previou:[4,5,7,11,12,13,14,16,34,56,94],previous:[4,5,11,13,14,16],primari:[12,66,89,106],primarili:[32,81],principl:71,print:[0,2,4,5,6,7,9,10,11,12,13,14,15,16,17,33,45,90,91,92,94,96,98,101,106,110],printabl:7,prior:[16,110],privat:[4,5,11,13,14,16],probabl:[4,5,11,13,14,16,101,105],problem:[4,5,11,13,14,16,90],proc:107,procedur:[39,50,61,62,64,69],process:[13,14,15,16,17,32,69,71,74,79,81,100],process_id:[6,91],prod:[4,5,11,13,14,16],produc:[4,5,11,13,14,16,33,50,52,58,72,79,81,91,101,105],product:[4,5,11,13,14,16,101],program:[32,81],programoutput:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],progress:[6,7,12,13,14,15,16,17],project:[6,7,20,101],promin:66,proper:7,properli:[4,5,9,11,13,14,16],properti:[4,5,11,12,13,14,16],proprietari:107,protact:7,protocol:78,protract:[7,8,9,10],provid:[4,5,6,9,10,11,12,13,14,15,16,17,18,19,32,33,43,70,75,76,77,78,79,81,85,86,90,93,94,96,97,98,100,101,102,104,105,106,107,108,110],psd2:97,psd:[0,1,2,3,16,41,43,55,58,71,93,97,101],psl:[33,36,53,66],pss:33,ptp:[4,5,11,13,14,16],publicli:[16,37,107],publish:[70,79,101,105,107,108],pull:34,puls:[16,101],pure:110,purpos:[4,5,10,11,13,14,16,35,81,110],push:34,put:[4,5,9,11,13,14,16],pwr_in_out_dq:[105,110],py:[20,32,87],pyarray_resolvewritebackifcopi:[4,5,11,13,14,16],pycbc:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,105,106,107,108,109,110],pycbc_liv:[12,101],pycbcseri:[13,14,16],pypa:32,pypi:[4,5,11,13,14,16],pyplot:[4,5,6,7,11,12,13,14,16,32,42,82,83,87,88,99],python3:32,python:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],q12_2019:98,q:[4,5,11,12,13,14,16,32,51,66,68,82,101],q_gram:[16,52],q_transform:[16,66,72,82],qaux:66,qax:82,qc:16,qdp:12,qgram:[16,52],qhoft:66,qplane:16,qrang:[16,52,66],qs:16,qspecgram:72,qtabl:12,qtile:16,qtran:82,qtransform:[16,32],qualiti:[13,14,16,41,45,73,79,89,107,110],quantiti:[0,2,3,4,5,11,12,13,14,16,33,93,110],quantityiter:[4,5,11,13,14,16],quasi:16,queri:[6,7,13,14,15,16,17,32,33,42,49,70,89,90,91,108],query_dqsegdb:[6,7],query_open_data:16,queryabl:[33,89],quickli:[81,96],quicksort:[4,5,11,12,13,14,16],quit:12,quot:98,r:[0,2,12,20,40,41,42,43,45,46,50,55,58,59,63,65,67,96],ra:12,rad:16,radian:[16,93],radiat:16,rais:[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,91,97,101,103,104,107],ramp:16,rand:82,randint:[4,5,11,13,14,16],random:[4,5,11,12,13,14,16,39,69,82,94,106],rang:[0,1,2,3,5,8,9,12,16,18,19,30,33,44,55,59,66,87,92,96,105],range_spectrogram:46,range_timeseri:47,rangespec:1,rank:12,rapidli:16,rare:[4,5,11,13,14,16],rate:[11,12,13,14,15,16,17,33,60,93,99,100,105,107],rather:[14,16,34,105,107],ratio:[0,1,2,3,11,16,47,56,62,64,66,71,98,99,102,103],ravel:[4,5,11,13,14,16],raw:[4,5,11,13,14,16,50,51,74,82,85,105,107],rayax:41,rayleigh:[16,38,54],rayleigh_spectrogram:[16,57],rayleigh_spectrum:[16,41],rcparam:35,rdb:12,re:[12,67,107],read:[4,5,6,7,9,11,12,13,14,15,16,17,32,45,61,62,64,67,69,75,76,79,90,99,102,103,105,110],readabl:7,readarg:[13,14,15,16,17],reader:[12,14,15,101],readi:[71,81,90],readout:[36,46,47,92],real8frequencyseri:4,real:[4,5,11,13,14,16,33,50,81,101,105,106],realli:[4,5,11,13,14,16],realloc:[4,5,11,13,14,16],rearrang:[4,5,11,13,14,16],reason:[15,17,105],recarrai:[4,5,11,12,13,14,16],receiv:98,recent:[4,5,11,12,13,14,16,20,79],recentr:85,recognis:98,recommend:[12,16,80,107],reconstruct:16,record:[5,10,13,14,16,20,33,37,41,46,50,52,66,67,72,73,74,89,90,92,93,101,104,105,106,110],recov:[12,16,52],recreat:[4,5,11,13,14,16,101],recurs:[4,5,11,13,14,16],reduc:[4,5,9,11,13,14,16,36,105],refcheck:[4,5,11,13,14,16],refer:[4,5,6,7,9,10,11,12,13,14,16,32,39,58,69,79,91,101,105,109],referenc:[4,5,11,13,14,16],reflect:[4,5,10,11,13,14,16],refresh:[12,85,109],refwork:20,region:[40,66,71],regist:[12,105],registr:101,registri:12,regular:[4,5,7,11,13,14,15,16,17,100,101,107,110],regularli:[16,72,101,110],reinterpret:[4,5,11,13,14,16],rel:[0,1,12,13,15,16,17,50,55,56,66,79,91],relat:[13,14,16,91,106],releas:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110],relev:[4,5,11,13,14,16,82,85,93,98,101,105,107,108],reliabl:[4,5,9,11,13,14,16,66],remain:[4,5,11,12,13,14,16],remot:[12,13,14,15,16,17,105,107,109],remov:[4,5,6,9,10,11,12,13,14,15,16,17,18,50,58,67,71,98],remove_column:12,remove_indic:12,remove_row:12,renam:12,rename_column:12,rename_dupl:12,render:[4,5,6,7,11,12,13,14,16,35],repeat:[4,5,9,10,11,13,14,16,35],replac:[4,5,11,12,13,14,16,34,65,91,97,101,105,107],replace_column:12,report:32,repositori:12,reprensent:14,repres:[4,5,7,8,11,12,13,14,16,18,88,90,96,106,110],represent:[4,5,7,11,12,13,14,16,33,85,86,101,110],reproduc:[72,109],request:[15,17,34,101,105],requir:[4,5,7,9,10,11,12,13,14,15,16,17,34,39,66,70,74,86,93,94,97,101,105,108],resampl:[14,15,16,17],research:105,reselect:85,reserv:89,reset:[4,5,11,13,14,16,109],reshap:[4,5,11,13,14,16],resiz:[4,5,11,13,14,16,82],resolut:[4,11,16,32,55,56,58,72],resolv:20,respect:[4,5,9,11,12,13,14,16,36,53,97,107],respons:[16,50,84],rest:[2,4,5,11,13,14,16],restrict:[4,5,6,11,12,13,14,16,101,107],result:[4,5,7,9,10,11,12,13,14,15,16,17,18,32,36,52,53,66,72,81,88,90,91,96,101,107,109],retain:[4,5,6,11,13,14,16],retriev:[12,13,15,16,17,32,42,78,105],reus:109,rev:[46,47,52],revers:[4,5,9,11,12,13,14,16,18],rf:34,rfft:16,ri:20,rich:58,right:[5,11,12,16,37,50,108],rightarrow:42,rightmost:[5,11,16],ring:69,rm:[16,34,65,105],root:[12,16],rotat:16,roughli:107,round:[4,5,7,11,12,13,14,16,92,103],roundedflag:7,routin:[52,81],row:[4,5,6,11,12,13,14,16,98,101],row_specifi:12,rspec:3,rst:[4,5,11,12,13,14,16],rt:20,rule:12,run:[10,13,14,32,34,35,49,66,101,105,107],runtim:16,runtimeerror:[4,5,11,13,14,15,16,17],s1:[4,5,11,13,14,16],s2352711021000029:20,s3:[4,5,11,13,14,16],s6:[14,45],s:[4,5,6,7,8,9,10,11,12,13,14,15,16,17,20,32,34,46,47,49,50,63,65,66,69,70,77,79,88,90,91,92,94,98,101,105,106,110],safari:12,safe:[4,5,11,13,14,16,33],safer:[4,5,11,13,14,16],sai:[16,39],same:[4,5,7,10,11,12,13,14,16,41,49,50,53,66,82,85,86,90,91,98,103,105,107,109],same_kind:[4,5,11,13,14,16],sampl:[4,5,11,12,13,14,16,33,58,69,93,101,103,105,107],sample_r:[4,11,13,14,16,33,39,50,69,84,93,94,110],saniti:45,satisfi:[4,5,11,12,13,14,16],satur:52,save:[4,5,11,13,14,16,72],savetxt:[97,107],sc:12,scalar:[4,5,11,12,13,14,16],scale:[4,5,11,13,14,15,16,17,32,39,69,86,107,109],scan:[16,52],scatter:[12,60,102],sccb:34,scenario:12,scengin:12,schema:107,scheme:[4,16,37,86,91,101],scienc:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110],sciencedirect:20,scientif:[20,72,88,91,101,104,105],scipi:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],scitoken:32,scott:20,scratchi:101,screen:[12,14,15],script:[12,32],seamlessli:[4,5,11,13,14,16],search:[4,5,11,12,13,14,15,16,17,52,71,73,89,90,91,105,107,110],searchedid:101,searchsort:[4,5,11,13,14,16],second:[2,3,4,5,7,9,10,11,12,13,14,16,29,32,33,36,39,40,41,43,50,52,53,55,56,57,58,65,66,69,71,72,73,74,85,90,92,93,94,98,101,103,104,105,108,109,110],secpfft:25,secret:101,section:[16,20,91,93,97,101],secur:78,sed:34,see:[9,10,20,25,26,27,29,32,34,36,39,40,41,43,45,46,47,49,50,52,53,55,56,58,65,66,69,70,71,72,73,74,82,87,88,89,91,97,100,101,105,106,107,108,110],seed:[4,5,6,11,13,14,16],seen:[40,46,85,110],seg:[10,12,32,89],segment:[0,1,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],segment_defin:[6,91],segment_summari:[6,91],segmentax:[6,7,14],segmentdeft:6,segmentlist:[6,7,10,14,16,79,91],segmentslist:10,segmentsumt:6,segmentt:6,segwizard:[7,9],seir:[4,5,11,13,14,16],seisdata:92,seismic:[68,90],seismomet:[92,110],select:[4,5,11,12,13,14,15,16,17,32,97,98,101],self:[4,5,6,7,8,9,10,11,12,13,14,15,16,17,87],semant:34,semi:[8,90],send:[15,17,105],sens:96,sensemon_rang:2,sensemon_range_psd:3,sensemonitor:[2,3],sensibl:[13,15,16,17,81,85,92],sensit:[0,2,3,27,32,37,40,41,43,46,47,55,56,57,66,96],sensor:[33,66,105,107,108],senstiv:30,sep:[4,5,11,13,14,16,45,49,55,56,89,104,109],separ:[4,5,6,7,9,11,12,13,14,16,39,42,50,65,67,69,74,86,90,101,107,109],septemb:[89,94,96],sequenc:[4,5,9,11,12,13,14,16,94,96],seri:[4,5,11,12,13,14,15,16,17,18,32,36,42,43,50,53,58,65,77,79,83,92,94,96,110],serial:[13,14,15,16,17],serv:[12,16,34],server:[12,13,14,15,16,17,32,78,91,105],servic:[78,105],set:[4,5,6,7,9,10,11,12,13,14,15,16,17,18,32,33,35,41,42,46,47,61,62,64,81,86,88,90,91,94,96,101,105,106,107,108],set_epoch:[16,46,47,52,64,66,69,71,81,83,85,102,109],set_facecolor:52,set_linestyl:87,set_linewidth:87,set_major_formatt:88,set_printopt:[4,5,11,13,14,16],set_titl:[40,41,42,43,45,46,47,50,53,57,58,59,61,62,64,65,71,73,99,103,109],set_xlabel:[43,59,67,82,99],set_xlim:[16,37,43,45,50,52,58,61,62,64,67,71,81,82,83,85,96],set_xscal:[45,50,52,66,72,73,82,85,88],set_ylabel:[16,41,43,45,47,50,52,53,59,61,62,64,65,66,67,71,72,74,81,82,83,96,99,102,103,109],set_ylim:[37,41,42,43,45,46,50,52,53,55,56,57,66,67,72,81,83,94,96],set_yscal:[41,45,46,52,53,55,56,57,64,66,72,82,85,88,94,102],setdefault:[6,10,12,15,17],setfield:[4,5,11,13,14,16],setflag:[4,5,11,13,14,16],settl:[16,74],setup_util:34,setuptool:32,sever:[12,65,67,90],severli:65,sextractor:12,sg:40,sh:34,shade:40,shallow:[9,10,12],shape:[4,5,11,13,14,16,56],shape_a:[4,5,11,13,14,16],share:[4,5,11,13,14,16],sharei:[39,69],sharex:[16,39,41,50,65,67,69,74,82,86,109],sharp:41,sheet:32,shift:[4,5,8,9,10,11,13,14,16,50,81],shorten:[16,18],shorter:16,shorthand:[4,5,11,13,14,16],should:[4,5,6,7,10,11,12,13,14,16,34,52,65,66,74,81,83,89,91,93,101,104,106,107],show:[4,5,6,7,11,12,13,14,16,21,22,23,24,25,26,27,29,31,32,36,37,39,40,41,42,43,45,46,47,49,50,52,53,55,56,57,58,59,61,62,63,64,65,66,67,69,70,71,72,73,74,81,82,83,84,85,86,87,88,93,94,96,99,103,105,108,109,110],show_dtyp:12,show_in_brows:12,show_in_notebook:12,show_nam:12,show_row_index:12,show_unit:12,shown:86,shrink:[4,5,11,13,14,16],si:[4,5,11,13,14,16],sibl:97,side:[4,5,11,13,14,16,110],siev:33,sign:34,signal:[0,1,2,3,16,19,29,30,32,33,38,42,47,50,52,55,56,58,61,62,64,66,68,70,72,73,74,79,81,84,90,92,94,98,99,101,102,103,106,107,110],signatur:[4,5,11,13,14,16],signific:[16,52,100],significantli:105,silent:32,sim:107,similar:[4,5,11,12,13,14,16,102],similari:96,similarli:[63,87,101],simpl:[4,5,11,12,13,14,16,19,32,33,81,82,84,87,90,92,102,104,106,107,110],simpler:82,simplest:[98,101],simpli:[4,5,9,11,12,13,14,16,40,91,101,107],simplifi:[4,5,11,13,14,16,81,83,93,104,105],simul:[2,3,16,61,62,64,69,91],simulink:33,simultan:[4,5,11,13,14,16],sinc:[4,5,6,10,11,12,13,14,16,69,90,104],sine:[16,101],singl:[4,5,7,9,11,12,13,14,15,16,17,18,33,39,40,42,50,67,91,98,105,106,107,110],singlesid:16,sinuosoid:39,sinusoid:[16,39],sit:43,site:[14,32,41,68],six:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],size:[4,5,11,12,13,14,16,32,39,69,103],skip:[4,5,11,13,14,16],skycoord:12,slice:[4,5,9,11,12,13,14,16,98],slightli:88,slope:[13,14,15,16,17],slow:[12,13,14,15,16,17,105],slower:12,slowli:16,small:[16,50,61,62,64,98,106,108],smaller:[4,5,11,13,14,16,71],smallest:9,smoothli:16,sn:20,snax:12,snax_featur:101,sngl:[12,101],sngl_burst:[61,62,64,99,101,102,103],snippet:[99,102,103],snr:[0,1,2,3,12,16,47,61,62,64,66,68,99,101,102,103],snr_chi:101,snrt:71,snrthresh:16,snsh_effective_range_mpc:30,so:[4,5,7,9,11,12,13,14,16,33,35,41,45,46,47,50,55,61,65,71,72,74,86,96,98,104,105,106,107],softwar:34,softwarex:20,softx:20,solar:[2,3,47],sole:9,solmass:[98,101],some:[0,2,4,5,9,11,12,13,14,16,39,41,43,46,47,50,55,57,58,67,69,71,77,81,90,93,98,101,103,110],some_dtyp:[4,5,11,13,14,16],someth:[4,5,6,11,12,13,14,16,35,71,85,90,91,101,110],sometim:[4,5,11,13,14,16,19],sort:[4,5,9,11,12,13,14,16,18],sortedarrai:12,sorter:[4,5,11,13,14,16],sosfilt:16,sosfiltfilt:16,sourc:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,32,33,34,36,50,81,92,93,97,99,103,104,107],sp:20,space:[4,5,11,12,13,14,16],spam:12,span:[4,5,9,11,13,14,15,16,17,18,50,55,85],spec:[11,96],specgram:[11,45,55,56,58,82,94],special:[6,12,15,17,85,104,105,110],specif:[4,5,11,12,13,14,16,33,41,42,52,60,72,82,83,85,97,101,103,105,107,110],specifi:[4,5,11,12,13,14,15,16,17,61,62,63,64,79,82,83,91,93,101,102,105,107,108,110],spectogram:5,spectra:[11,16,37,67,94],spectral:[0,1,2,3,5,11,16,25,26,27,28,33,37,40,41,43,44,55,71,79,83,96],spectral_r:[24,56],spectral_vari:[16,43],spectralvaraic:[5,11],spectralvari:[11,16,38],spectrogram2:[16,40,58,82],spectrogram:[5,16,32,40,44,46,72,79,82,95],spectrum:[4,5,11,16,32,38,43,46,57,96],specvar:[5,11,16],speed:[4,5,11,13,14,16,81,105],spelt:[4,5,11,13,14,16],spend:43,spent:45,sphinx:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],sphinxcontrib:32,sphx_glr_tutorials_intermediate_legend_guid:87,spike:[50,66,71,74],split:12,splot:45,spy:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],sql:12,sqlalchemi:12,sqrt:[4,5,11,13,14,16,40,41,43,45,46,55,58,67,94,96],squar:16,squeez:[4,5,11,13,14,16],ssh:34,stabil:[55,66],stabilis:33,stabl:[2,4,5,9,11,12,13,14,16,18,32,34,40,79],stack:[4,5,11,13,14,16,94],stai:7,stamp:[16,109],standard:[4,5,9,10,11,12,13,14,16,37,47,53,81,83,86,87,88,90,92,98,101,103,104,109,110],star:[16,30,46,47,52,110],start:[4,5,6,7,8,9,11,12,13,14,15,16,17,18,21,22,23,24,25,26,27,28,29,30,31,32,42,45,61,62,70,90,91,92,98,103,104,105,107,108,110],start_tim:101,state:[4,7,9,11,13,14,16,32,73,79,89,90,107],state_vector:107,statement:[98,110],statetimeseri:[14,16,79],statetimeseriesdict:14,statevector:[13,15,16,68,79,107],statevectordict:[107,110],stationari:[16,41,43],statist:[16,38,54],statu:[6,7,12],std:[4,5,11,13,14,16,32],stdin:[4,5,11,13,14,16],steadi:[16,39],step:[4,5,11,13,14,15,16,17,55,61,62,88,103],stepfil:[59,99],still:[4,5,10,11,13,14,16,19],stolen:81,stop:[4,5,6,7,8,9,11,13,14,15,16,17,18,70,90,92,93,105],stopband:[16,93],storag:[13,15,16,17,67,97,101,107],store:[4,5,7,10,11,12,13,14,15,16,17,89,91,97,100,101,104,105,107],str18:101,str3:12,str4:12,str:[4,5,6,7,9,11,12,13,14,15,16,17,18,33,93,97,98,99,103,104,107],strain:[0,1,13,14,16,21,22,23,24,25,26,27,28,29,31,36,37,40,41,43,46,47,50,52,53,55,56,58,70,72,73,81,82,83,86,94,96,105,106,107,108,109],stream:[4,11,13,14,16,33,39,66,67,69,105,106,107],stretch:[61,62,64],strict:[7,80],stride:[4,5,11,12,13,14,16,53,55,56,57,58,94,103],stride_trick:[4,5,11,13,14,16],strides_a:[4,5,11,13,14,16],string:[4,5,7,11,12,13,14,15,16,17,32,65,98,104],structur:[4,5,11,12,13,14,16,33,36,101],studi:[33,42,45,57,58,59,61,62,64,79,81,89,94,105,106],style:[4,5,11,12,13,14,16,20,32],style_sheet:32,sub:[4,5,11,13,14,16,90,93,101,109,110],subclass:[4,5,11,12,13,14,16,18,101],subfmt:[4,5,11,13,14,16],subformat:[4,5,11,13,14,16],subject:92,subok:[4,5,11,13,14,16],subplot:82,subsequ:[4,5,11,13,14,16],subset:[4,5,7,11,12,13,14,16,105],substanti:12,substitut:65,subsystem:[33,66,105],subtli:[4,5,11,13,14,16],subtract:[7,8],succesfulli:50,success:[7,13,14,16],successfulli:90,suffici:97,suffix:[33,105],suggest:[4,5,11,13,14,16],suit:[81,93],suitabl:[4,5,11,13,14,16],sum:[4,5,11,13,14,16],summari:[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,32,52,73,82],summaris:32,superb:81,superced:16,superclass:13,supersed:16,suppli:[12,41],support:[4,5,6,8,9,11,12,13,14,16,91,93,97,100,101,104,107],suppress:52,suptitl:[27,29,30,31,32],sure:[4,5,11,13,14,16,66,69,92],surround:[40,46,47,73],suscept:66,sv:14,sv_state_vector:14,svg:32,swamp:71,swap:[4,5,11,13,14,16],swapax:[4,5,11,13,14,16],sweep:52,swig:81,sy:[4,5,8,9,11,13,14,16,18],syntact:12,syntax:[4,5,11,12,13,14,16,107],system:[6,12,15,17,42,58,77,93,101,104,105,110],systemerror:[4,5,11,13,14,16],t030276:[2,3],t050017:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],t0:[11,12,13,14,16,69,106,110],t1:[12,20],t2:12,t970130:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],t:[4,5,11,12,13,14,15,16,17,20,40,70,71,73,81,82,86,91,97,98,101,104,105,106,107],tab:12,tabl:[4,5,6,9,11,12,13,14,16,32,36,59,61,62,63,64,102,103,105],table_arrai:12,table_class:12,tableclass:12,tablegroup:12,tableid:12,tableiloc:12,tableindic:12,tableloc:12,tablelocindic:12,tablenam:[12,61,62,64,99,101,102,103],tabular:[79,91,97,98,100,101],tag:[7,12,34,90,105],tailor:86,take:[4,5,6,7,10,11,12,13,14,16,34,39,45,90,91,97,98,101,103,105,107],taken:[4,5,11,12,13,14,16],tap:16,tape:[13,14,15,16,17],taper:[4,5,11,13,14,16,69,74],tarbal:34,target:[4,5,6,7,9,11,12,13,14,15,16,17,91,93,97,101,107],tax:82,tbl:12,tconvert:[42,104],tcp:78,team:90,techniqu:[71,74],tediou:81,tel:12,tell:[4,5,11,13,14,16,35],templat:71,ten:[55,66,71],termin:[12,32],terrestri:66,test:[4,5,9,10,11,13,14,16,33,34,98,107,110],texnam:7,text:[34,50,65],tf:42,th:[4,5,11,13,14,16],than:[4,5,7,9,11,12,13,14,16,32,34,41,87,88,105,107],thei:[4,5,6,11,12,13,14,16,35,39,66,90,105,107,110],them:[4,5,9,11,12,13,14,16,18,32,40,49,50,67,81,83,89,93,105,107],theme:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],themselv:[4,5,9,11,12,13,14,16],therefor:[10,16],therein:101,thi:[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,39,40,41,43,45,46,47,49,50,52,55,57,58,61,65,66,67,69,70,71,72,73,74,75,76,77,79,81,86,87,88,90,91,92,93,94,96,97,98,99,100,101,103,104,105,106,107,110],thicker:87,thie:[4,5,11,13,14,16],thin:[4,5,11,13,14,16],thing:[7,87,98,100],third:[12,109],thoma:20,those:[6,10,12,15,16,17,41,45,49,50,56,64,86,90,91,94,95,97,98,101,105,107],thousand:[33,66,71,106],three:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],threshold:[4,5,11,13,14,16,62,90,98,103,110],through:[4,5,11,13,14,16,42,45,52,104,105,110],throughout:108,ti:[4,5,11,13,14,16],tick:[82,88],ticker:88,tie:67,tight:99,tile:[12,16,52,60,100],time:[4,5,6,7,8,9,10,11,12,13,14,15,16,17,22,23,24,26,32,33,35,36,37,39,40,41,42,43,45,49,50,52,54,55,56,57,60,66,69,70,71,72,73,79,83,84,86,89,90,91,92,94,96,97,98,101,102,103,105,108,110],timeaft:101,timebefor:101,timecolumn:[12,103],timedelta64:12,timedelta:12,timelin:[7,45],timeout:7,timescal:[16,45],timeseri:[0,2,4,5,11,12,13,14,15,17,18,30,32,36,37,39,40,41,42,43,44,45,46,51,53,55,56,57,58,61,65,70,71,73,77,79,81,82,83,85,86,92,93,103,110],timeseriesbas:18,timeseriesbasedict:[15,17],timeseriesdict:[12,15,32,36,42,53,65,103,107,108,109],timestamp:[4,5,11,13,14,16,79,85,100],timsort:[4,5,11,13,14,16],tini:[85,105],titl:[4,11,13,14,16,20,32,34,62,70,84],tm:12,to_begin:[4,5,11,13,14,16],to_dqflag:[13,14,92,110],to_end:[4,5,11,13,14,16],to_gp:[4,11,13,14,15,16,17,98,104],to_lal:[4,13,14,16],to_ligolw_t:6,to_panda:12,to_pycbc:[4,13,14,16,71],to_str:[4,5,11,13,14,16],to_tabl:9,to_valu:[4,5,11,13,14,16],tobyt:[4,5,11,13,14,16],todai:104,tofil:[4,5,11,13,14,16],togeth:[18,33,50,67,81,106],toggl:[4,5,11,13,14,16],tol:[4,5,11,13,14,16],told:50,toler:[4,5,11,13,14,16],tolist:[4,5,11,13,14,16],tomorrow:104,too:[4,5,11,13,14,16],tool:[9,12,32,40,52,72,75,79,81,86,101],top:[69,104,106],topmost:32,tostr:[4,5,11,13,14,16],total:[4,5,9,11,13,14,16,45,59,63],total_mass_source_upp:101,touch:8,tpad:16,tqdm:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],trace:[4,5,11,13,14,16,52,58,72],traceback:[4,5,11,13,14,16],track:94,trail:58,transax:[50,65],transfer:[16,32,38],transfer_funct:[16,42],transferfunct:32,transform:[4,9,16,32,36,50,51,53,65,66,68,77,82,110],transmit:74,transpos:[4,5,11,13,14,16],travers:[4,5,11,13,14,16],tre:16,treat:[4,5,11,13,14,16],tree:101,treenam:101,trend:[16,45,47,68,107],treshold:62,triangular:16,trigger:[34,61,62,64,99,100,101],trio:[6,91],trivial:[40,86,93,99,108,110],trivialis:109,troubl:[4,5,11,13,14,16],truli:[4,5,11,13,14,16],truncat:16,ts:93,tsdict:17,ttreemethod:101,tupl:[4,5,8,10,11,12,13,14,16,33,93,98,103],tutori:79,twine:34,two:[4,5,6,7,8,9,10,11,12,13,14,16,18,32,38,47,52,54,67,68,74,91,93,97,98,105,107,109,110],txt:[4,13,14,16,69,97,107],ty:20,type:[4,5,6,7,11,12,13,14,15,16,17,18,32,33,71,77,91,93,97,101,102,104,105,107,110],typecod:[4,5,11,13,14,16],typeerror:[4,5,11,12,13,14,16,18,104],typic:[30,43,74,85,90,100,107],tzero:16,u2:[4,5,11,13,14,16],u:[4,5,11,12,13,14,16,34],uc:12,ufunc:[4,5,11,13,14,16],ui:32,uic:[4,5,11,13,14,16],uint32:[4,5,11,13,14,16],uint8:[4,5,11,13,14,16],ultim:[4,5,11,13,14,16],unabl:4,unadorn:[4,5,11,13,14,16],unchang:[4,5,11,13,14,16],uncov:50,undefin:[4,5,11,13,14,16],under:[4,5,9,11,13,14,16,90,107],underli:[4,5,11,12,13,14,15,16,17,109],understand:[71,73],understood:97,undetect:74,undo:67,undocu:[4,5,11,13,14,16],unexpect:9,unfilt:[50,69],ungat:16,unicod:12,unifi:101,uniformli:[4,5,11,13,14,16],uniniti:[4,5,11,13,14,16],union:[6,9,10],uniqu:12,uniquifi:[10,12],unit:[4,5,11,12,13,14,16,33,39,67,86,92,93,94,96,101,106,107,110],unitbas:[4,5,11,13,14,16],unitserror:[4,5,11,13,14,16],univers:19,unix:[75,77],unknown:50,unless:[4,5,11,13,14,16],unlik:[4,5,9,11,12,13,14,16],unlink:34,unmask:12,unnam:12,unpack:[4,5,11,13,14,16],unpickl:[4,5,11,13,14,16],unrepresent:[6,10,15,17],unsaf:[4,5,11,13,14,16],unspecifi:[4,5,11,13,14,16],unstabl:79,until:[10,83],unwant:16,up:[4,5,11,12,13,14,16,34,45,52,74,77,81,101,103,105,107],updat:[4,5,6,10,11,12,13,14,15,16,17,35,88,91,101],update_all_copyright:34,upload:34,upon:[14,15,96,101],upper:[0,4,5,7,8,9,11,13,14,16,93],uppercas:7,uproot:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],upsampl:14,upstream:101,upto:9,ur:20,urban:20,url:[6,7,13,14,15,16,17,20,33,69,105],us:[4,5,6,7,9,10,11,12,13,14,15,16,17,20,21,22,32,33,34,35,36,37,39,40,41,43,45,46,47,49,50,52,53,55,56,57,58,59,61,62,63,64,65,66,67,69,70,71,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,101,102,103,104,105,107,108,109,110],usag:[12,32,97,107],use_local_fil:12,use_nullable_int:12,use_numpy_dtyp:101,user:[4,5,11,13,14,16,32,78,79,81,89,91,101,106,107,108],user_guid:12,usual:[4,5,11,13,14,16,90,103],utc:89,utf:12,util:[32,33,69,77,81,90,100,101,110],utilis:[75,76,77,89],v1:[27,32,98,101],v1_gwosc_o2_16khz_r1:105,v1_gwosc_o2_4khz_r1:105,v1o2repro1a:105,v2:[98,101],v3:[98,101],v:[4,5,6,10,11,12,13,14,15,16,17,20,32],v_sort:[4,5,11,13,14,16],va:65,val:[4,5,11,12,13,14,16],valid:[4,5,7,11,12,13,14,16,61,62,64,89,92],valu:[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,32,35,41,42,43,71,97,98,103,110],value_at:[4,5,11,13,14,16],value_slice_to_index:9,valueerror:[4,5,6,8,9,11,12,13,14,15,16,17,18,101,103,104],values_equ:12,vanilla:12,vari:[4,5,11,13,14,16,32,40,43,53],variabl:[4,5,6,7,11,13,14,16,35,105],varianc:[4,5,11,13,14,16,43,57],variat:[22,40,41,46,47],varieti:92,variou:[4,5,11,13,14,16,20,62,66,77,101,110],vector:[4,5,11,13,14,15,16,73,79],verbos:[6,7,12,13,14,15,16,17,32,41,42,43,45,57,58,73],veri:[4,5,11,12,13,14,16,40,41,52,56,66,74,103,105,110],verifi:[13,14,15,16,17],versa:[7,104],version:[4,5,7,11,12,13,14,16,20,32,34,79,90,91,92,101,105],versu:[60,103],vertic:[11,110],veto:[6,7,90,92],veto_def_t:6,vetodef:7,vetodefinert:6,via:[4,5,9,11,12,13,14,15,16,17,32,43,83,85,91,93,97,101,103,105,107],vice:[7,104],view:[4,5,6,7,10,11,12,13,14,15,16,17,32,79,85,93,94,107],virgo:[32,45,50,58,72,76,79,89],viridi:[45,52,58,66,72],visibl:[12,29],visual:[16,39,69,71,83,110],visualis:[12,16,43,46,52,55,67,68,72,81,86,93,109,110],vl:20,vmax:[55,56,57,94],vmin:[43,55,56,57,94],vo:20,vol:[46,47,52],volum:20,votabl:12,vote:10,vs:12,vx:34,w:[4,5,11,12,13,14,16,105],wa:[4,5,7,11,12,13,14,16,33,36,45,49,50,65,72,73,83,90,105,110],wai:[4,5,9,10,11,12,13,14,16,18,80,81,82,85,90,93,105,106,109,110],wait:[34,50],want:[4,5,6,11,13,14,16,39,42,50,65,69,70,71,81,98,100,105,107],warn:[6,12,15],wash:43,waux:66,wav:[13,14,16],wave:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110],waveburst:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,105,106,107,108,109,110],waveform:[2,3,69,71,101],wavfil:107,wdurat:16,we:[0,2,4,5,9,11,12,13,14,16,33,36,37,39,40,41,42,43,45,46,47,49,50,52,53,55,56,57,58,59,61,62,63,64,65,66,67,69,70,71,72,73,74,85,94,96,98,99,103,105,106,108,110],weather:90,web:[12,32,89],week:85,weight:[11,16,99],welch:[16,93,96],welcom:97,well:[4,5,7,10,11,12,13,14,16,49,50,85,90,97,101,106,107],were:[4,5,6,11,13,14,16,49,50,61,62,64,90,98],what:[4,5,9,11,13,14,16,18,32,39,45,50,69,79,90],whatev:[15,17,98],when:[4,5,6,9,10,11,12,13,14,16,35,49,50,58,65,67,90,91,92,93,101,103,105,107,110],whenev:12,where:[4,5,7,11,12,13,14,15,16,17,32,40,41,57,83,96,97,101,110],whether:[4,5,7,11,12,13,14,16,35],which:[0,1,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,32,33,43,47,49,50,52,61,62,64,66,71,72,74,77,89,90,91,92,93,96,97,99,101,103,104,105,107,110],whistl:66,white:[39,58,66,67,69,74],whiteasd:67,whiten:[16,52,58,66,67,68],whiten_kwarg:16,who:[4,5,6,11,13,14,16,81],whoft:66,whole:[16,81],wholli:9,whose:[4,5,6,8,9,11,12,13,14,16,105],why:[7,39],wide:[74,93],wider:66,widget:12,width:[4,5,11,12,13,14,16,64],window:[4,5,11,12,13,14,16,32,40,52,72,77,82,108],wise:[4,5,11,12,13,14,15,16,17,110],wish:[4,5,11,13,14,16],wit:[33,66],within:[4,5,7,9,11,13,14,16],without:[4,5,10,11,13,14,16,85,101,105],word:[98,104],work:[10,12,13,15,16,17,72,81,91,92,93,98,107],worri:16,worth:66,would:[2,3,4,5,8,11,12,13,14,16,39,42,47,50,59,61,62,64,69,73,97,110],wrap:[16,81],wrapper:[4,5,11,13,14,16,93],write:[4,5,6,7,9,11,12,13,14,15,16,17,32,75,76,79,90,110],writeabl:[4,5,11,13,14,16],writebackifcopi:[4,5,11,13,14,16],writer:12,written:[4,5,11,13,14,16,32,75,76,77,91,97,101,107],wrong:[4,5,11,13,14,16],www:[12,20,72],wxh:32,x00:[4,5,11,13,14,16],x01:[4,5,11,13,14,16],x02:[4,5,11,13,14,16],x03:[4,5,11,13,14,16],x0:[4,5,11,13,14,16],x1:98,x:[4,5,7,8,9,10,11,12,13,14,16,32,34,63,64,88,99,102,109],xaxi:67,xindex:[4,5,11,13,14,16],xlabel:[32,36,40],xlal:4,xlalreal8timeseri:77,xlim:[40,41],xmax:[25,27,29,32],xmin:[25,27,29,32],xml:[6,61,62,64,90,96,99,102,103],xscale:[4,5,7,11,13,15,16,17,29,32,36,39,40,41,67,81,83,85],xspan:[4,5,11,13,14,16],xunit:[4,5,11,13,14,16],xv:[4,5,11,13,14,16],xx:[4,5,11,13,14,16],xxx:12,xy:105,y0:[5,11],y:[4,5,11,12,13,14,16,32,34,35,50,52,63,64,65,66,72,74,88,102],y_tr_a_nsum_out_dq:74,yaxi:88,ye:[4,5,6,7,9,11,12,13,14,15,16,17,35],year:[20,85],yesterdai:104,yet:105,yield:9,yindex:[5,11],ylabel:[29,30,32,36,40,70,86,105],ylgnbu:[64,102],ylim:[36,40,82],ymax:[23,32],ymin:32,you:[4,5,6,11,12,13,14,16,20,32,33,40,50,55,79,86,87,88,89,93,97,98,100,101,104,105,107,108],your:[32,87,105,108],yourself:87,yr:20,yscale:[32,36,39,40,43,58,65,67,82],yspan:[5,11],yunit:[5,11],z:[4,5,11,12,13,14,16,34,65,93,101],zenodo:20,zero:[4,5,9,11,12,13,14,16,18,50,67,69,85,93],zeros_lik:[4,5,11,13,14,16],zip:[4,5,11,13,14,16,65],zoom:[32,50,56,71,85],zorder:16,zpk:[4,11,16,50,68,84,93]},titles:["burst_range","burst_range_spectrum","inspiral_range","inspiral_range_psd","FrequencySeries","SpectralVariance","DataQualityDict","DataQualityFlag","Segment","SegmentList","SegmentListDict","Spectrogram","EventTable","StateTimeSeries","StateVector","StateVectorDict","TimeSeries","TimeSeriesDict","TimeSeriesList","Astrophysical modelling","Citing GWpy","<span class=\"section-number\">10. </span>Simple coherence","<span class=\"section-number\">11. </span>Simple coherence spectrogram","<span class=\"section-number\">8. </span>Simple spectrogram","<span class=\"section-number\">9. </span>Normalised spectrogram","<span class=\"section-number\">7. </span>High-resolution spectrum","<span class=\"section-number\">4. </span>Simple spectrum","<span class=\"section-number\">6. </span>Spectrum with three interferometers","<span class=\"section-number\">5. </span>Spectrum at two times","<span class=\"section-number\">2. </span>Filtered timeseries","<span class=\"section-number\">3. </span>Time-series of estimated distance sensitivity","<span class=\"section-number\">1. </span>Simple timeseries","Command line plotting with GWpy","The <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Channel</span></code> class","Publishing a release","Configuring GWpy from the environment","<span class=\"section-number\">4. </span>Calculating the coherence between two channels","<span class=\"section-number\">1. </span>Calculating and plotting a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">FrequencySeries</span></code>","<code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">FrequencySeries</span></code> examples","<span class=\"section-number\">7. </span>Inject a known signal into a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">FrequencySeries</span></code>","<span class=\"section-number\">3. </span>Plotting an averaged ASD with percentiles.","<span class=\"section-number\">6. </span>Plotting a Rayleigh-statistic <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Spectrum</span></code>","<span class=\"section-number\">5. </span>Plotting a transfer function","<span class=\"section-number\">2. </span>Calculating and plotting a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SpectralVariance</span></code> histogram","Miscellaneous examples","<span class=\"section-number\">3. </span>Plotting a spectrogram of all open data for 1 day","<span class=\"section-number\">2. </span>Estimating the spectral contribution to inspiral range","<span class=\"section-number\">1. </span>Generating an inspiral range timeseries","<code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Segments</span></code> examples","<span class=\"section-number\">1. </span>Plotting observing segments for O1","<span class=\"section-number\">1. </span>Filtering a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">TimeSeries</span></code> to detect gravitational waves","Signal processing examples","<span class=\"section-number\">2. </span>Compute the raw Q-transform of a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">TimeSeries</span></code>","<span class=\"section-number\">4. </span>Calculating the time-dependent coherence between two channels","<code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Spectrogram</span></code> examples","<span class=\"section-number\">1. </span>Plotting a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Spectrogram</span></code>","<span class=\"section-number\">2. </span>Plotting a normalised <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Spectrogram</span></code>","<span class=\"section-number\">5. </span>Plotting a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Spectrogram</span></code> of the Rayleigh statistic","<span class=\"section-number\">3. </span>Plotting an over-dense, short-duration <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Spectrogram</span></code>","<span class=\"section-number\">2. </span>Plotting an <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EventTable</span></code> in a histogram","Tabular data examples","<span class=\"section-number\">4. </span>Calculating (and plotting) rate versus time for an <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EventTable</span></code>","<span class=\"section-number\">5. </span>Plotting <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EventTable</span></code> rate versus time for specific column bins","<span class=\"section-number\">1. </span>Plotting an <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EventTable</span></code> in a scatter","<span class=\"section-number\">3. </span>Plotting an <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EventTable</span></code> as 2-d tiles","<span class=\"section-number\">5. </span>Comparing seismic trends between LIGO sites","<span class=\"section-number\">4. </span>Cross-correlating two <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">TimeSeries</span></code>","<span class=\"section-number\">2. </span>Filtering a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">TimeSeries</span></code> with a ZPK filter","<code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">TimeSeries</span></code> examples","<span class=\"section-number\">9. </span>Inject a known signal into a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">TimeSeries</span></code>","<span class=\"section-number\">1. </span>Accessing and visualising public GW detector data","<span class=\"section-number\">8. </span>Calculating the SNR associated with a given astrophysical signal model","<span class=\"section-number\">7. </span>Generate the Q-transform of a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">TimeSeries</span></code>","<span class=\"section-number\">6. </span>Plotting segments for a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">StateVector</span></code>","<span class=\"section-number\">3. </span>Whitening a <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">TimeSeries</span></code>","FrameCPP","FrameL","LALSuite","NDS2","GWpy docs","Installation","What is GWpy?","Colorbars","The Gravitational-Wave Observatory colour scheme","Visualising filters (<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BodePlot</span></code>)","Plotting GPS time scales","Plotting in GWpy (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gwpy.plot</span></code>)","Custom legends in GWpy","Log scales in GWpy","The Segment Database","Data-quality segments","Reading/writing segments and flags","Generating data-quality flags by thresholding","Signal processing","The <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Spectrogram</span></code>","Filtering frequency-domain data","The <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FrequencySeries</span></code> class","Reading and writing frequency-domain data","Filtering tables","Data table histograms","Data tables","Reading and writing <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Table</span></code> and <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EventTable</span></code> objects","Plotting tabular data","Calculating event trigger rate","Times and timestamps","Automatic data-discovery","Time Series data","Reading and writing time series data","Accessing Open Data from GWOSC","Plotting time-domain data","State vectors"],titleterms:{"0":20,"1":[20,45],"2":[20,64],"3":20,"4":20,"5":20,"6":20,"600":105,"7":20,"8":20,"9":20,"class":[33,90,96,100,106,110],"function":[42,98],"new":34,"public":70,"short":58,"true":110,Not:105,OR:90,The:[33,81,83,89,90,94,96,100,106,108,110],_title_:79,access:[70,101,108],addit:90,aka:101,all:[45,101,105],also:[2,3,4,5,6,7,11,12,13,14,15,16,17,18,93,99],an:[40,47,58,59,61,63,64,101],anoth:82,api:[90,93,94,106,110],applic:[86,94,96],ar:105,argument:[97,107,110],ascii:[97,101,107],asd:40,associ:[71,106,110],astrophys:[19,71],auto:85,automat:[105,107],auxiliari:108,avail:[101,105,107],averag:40,basic:[81,86],between:[36,53,65],bin:[62,103],bit:110,bodeplot:84,built:[82,98,101,107],burst_rang:0,burst_range_spectrum:1,calcul:[36,37,43,53,61,71,94,103],catalogu:101,center:108,channel:[33,36,53,105,107,108],channellist:33,ci:33,cite:20,coher:[21,22,36,53,101],colorbar:82,colour:83,column:62,combin:90,command:32,compar:65,comput:52,conda:[34,80],configur:35,contribut:46,convers:104,correl:66,cross:66,custom:87,customis:86,d:64,dai:45,data:[32,45,60,70,79,86,90,92,95,96,97,99,100,101,102,105,106,107,108,109,110],databas:[89,101],dataqualitydict:[6,90,91],dataqualityflag:[7,90],dataset:105,debian:34,dens:58,densiti:93,depend:53,design:93,detect:50,detector:[70,107],develop:79,discoveri:[105,107],distanc:[19,30],distribut:34,domain:[93,95,96,97,109],durat:58,environ:35,epoch:85,estim:[30,46,93],event:[101,102,103],eventt:[12,59,61,62,63,64,100,101],everywher:105,exampl:[32,38,44,48,51,54,60,68,79,82,105],exclus:90,fetch_open_data:108,file:[101,107],filter:[29,50,67,84,93,95,98,101],first:79,fix:85,flag:[91,92],format:[97,101,107],framecpp:75,framel:76,frequenc:[93,95,96,97],frequencyseri:[4,37,38,39,96,97],from:[35,94,96,108],full:101,gener:[47,72,92,96],geo:105,get:[45,105],given:71,gotcha:98,gp:[85,104],gravit:[50,83,108],gravityspi:101,gstlal:101,gw:[70,107],gwdatafind:105,gwf:[101,107],gwosc:[101,107,108,110],gwpy:[20,32,35,80,81,86,87,88],hanford:105,hdf5:[91,97,101,107],high:25,histogram:[43,59,99],how:105,http:33,idea:81,identifi:101,indic:79,inform:33,inject:[39,69],input:32,insetlabel:110,inspir:[46,47],inspiral_rang:2,inspiral_range_psd:3,instal:80,instanc:86,interact:32,interferomet:27,intersect:90,invers:90,json:91,keyword:[97,107,110],known:[39,69],label:110,lal:77,lalfram:77,lalsuit:77,legend:87,librari:107,ligo:[33,65,105],ligo_lw:[91,97,101],line:32,link:34,list:101,live:101,livingston:105,log:88,logarithm:82,manipul:79,method:[86,107],miscellan:44,mode:32,model:[19,71],modif:82,more:101,multi:[86,101,110],multipl:[98,107,109],name:105,nds2:78,normalis:[24,56],note:[4,5,7,11,12,13,14,16,50,52,55,58,61,62,64,71,72,79,82,83,85,89,91,97,101,103,107,108,110],o1:49,object:101,observ:49,observatori:83,one:109,open:[45,101,108],org:33,other:79,over:58,packag:34,percentil:40,pip:80,plot:[32,37,40,41,42,43,45,49,55,56,57,58,59,61,62,63,64,73,85,86,94,96,100,102,106,108,109,110],process:[51,93,101],proprietari:105,publish:34,pycbc:101,pypi:34,pyplot:86,q:[52,72],qualiti:[90,92],queri:101,rang:[46,47],rate:[61,62,103],raw:52,rayleigh:[41,57],read:[91,96,97,100,101,106,107],refer:[33,90,93,94,96,100,104,106,110],regard:105,releas:[34,108],requir:80,resolut:25,rhel:34,root:101,round:110,scale:[82,85,88],scatter:63,scheme:83,scienc:108,search:101,see:[2,3,4,5,6,7,11,12,13,14,15,16,17,18,93,99],segment:[8,45,48,49,73,89,90,91],segmentlist:[9,90],segmentlistdict:10,seismic:65,sensit:[19,30],seri:[30,106,107],signal:[39,51,69,71,93],similar:101,simpl:[21,22,23,26,31,98,101,103],singl:101,site:65,snax:101,snr:71,specif:62,specifi:32,spectral:[46,93],spectralvari:[5,43],spectrogram:[11,22,23,24,45,54,55,56,57,58,94],spectrum:[25,26,27,28,41],state:110,statetimeseri:[13,110],statevector:[14,73,110],statevectordict:15,statist:[41,57],step:[34,79],storag:91,strain:45,structur:79,subtract:90,suffic:105,system:33,tabl:[79,91,98,99,100,101],tabular:[60,102],three:27,threshold:92,tile:[64,102],time:[28,30,53,61,62,85,93,104,106,107,109],timeseri:[16,29,31,47,50,52,66,67,68,69,72,74,94,96,105,106,107,108,109],timeseriesdict:[17,105],timeserieslist:18,timestamp:104,togeth:109,transfer:42,transform:[52,72],trend:[65,105],trigger:[102,103],two:[28,36,53,66],txt:101,union:90,unit:85,updat:34,us:[98,100],usag:110,util:79,vector:110,versu:[61,62],virgo:105,visualis:[70,79,84],warn:[4,5,11,13,14,16,66,74,79,86,89,101,104,105,107],wav:107,wave:[50,83,108],waveburst:101,what:[33,81],whiten:74,work:[45,79,90,105],write:[91,96,97,100,101,106,107],xml:[91,97,101],zenodo:34,zpk:67}})